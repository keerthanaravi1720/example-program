/// <reference path="ng-file-upload-shim.min.js" />
var app = angular.module('RifApp', ['kendo.directives', 'ui.bootstrap', 'ngRoute', 'ngTouch', 'ngAnimate', 'ngFileUpload']);

app.config(['$routeProvider', '$locationProvider',
  function ($routeProvider, $locationProvider) {
      $routeProvider
    .when('/', {
        title: 'Admin.Breadcrumb.Dashboard',
        templateUrl: '/Admin/Home/Dashboard',
        caseInsensitiveMatch: true,

        controller: 'DashboardCtrl'
    })


          .when('/DashboardBMSOFTECH', {
              title: 'Admin.Breadcrumb.Dashboard',
              templateUrl: '/Admin/Home/DashboardBMSOFTECH',
              caseInsensitiveMatch: true,

              controller: 'DashboardCtrl'
          })

          .when('/HRDashboard', {
              title: 'Admin.Breadcrumb.Dashboard',
              templateUrl: '/Admin/Home/HRDashboard',
              caseInsensitiveMatch: true,

              controller: 'HRDashboardCtrl'
          })
          .when('/HRDashboard/:TypeId/:Status', {
              title: 'Admin.Breadcrumb.Dashboard',
              templateUrl: '/Admin/Home/HRDashboardNewRequest',
              caseInsensitiveMatch: true,
              permission: ["ReadRequest"],
              controller: 'HRDashboardNewRequestCtrl'
          })
    //Designation
    .when('/Designation', {
        title: 'Admin.Breadcrumb.Designation',
        templateUrl: '/Admin/Designation/List',
        caseInsensitiveMatch: true,
        permission: ["ReadDesignation"],
        controller: 'DesignationCtrl'
    })
          

      //DTCategory
      .when('/Category', {
          title: 'Admin.Breadcrumb.Category',
          templateUrl: '/Admin/DTCategory/List',
          caseInsensitiveMatch: true,
          permission: ["ReadCategory"],
          controller: 'CategoryCtrl'
                       
      })


      //DTMeasuringUnit
      .when('/MeasuringUnit', {
          title: 'Admin.Breadcrumb.MeasuringUnit',
          templateUrl: '/Admin/DTMeasuringUnit/List',
          caseInsensitiveMatch: true,
          permission: ["ReadMeasuringUnit"],
          controller: 'MeasuringUnitCtrl'

      })



      //Tax
      .when('/Tax', {
          title: 'Admin.Breadcrumb.Tax',
          templateUrl: '/Admin/DTTax/List',
          caseInsensitiveMatch: true,
          permission: ["ReadTax"],
          controller: 'TaxCtrl'
      })



       //BillType
       .when('/BillType', {
           title: 'Admin.Breadcrumb.BillType',
           templateUrl: '/Admin/BillType/List',
           caseInsensitiveMatch: true,
           permission: ["ReadBillType"],
           controller: 'BillTypeCtrl'
       })


      //Prefix
       .when('/Prefix', {
           title: 'Admin.Breadcrumb.Prefix',
           templateUrl: '/Admin/Prefix/List',
           caseInsensitiveMatch: true,
           permission: ["ReadPrefix"],
           controller: 'PrefixCtrl'  
       })
          


     //Accounts Group
      .when('/AccountsGroup', {
          title: 'Admin.Breadcrumb.AccountsGroup',
          templateUrl: '/Admin/AccountGroup/List',
          caseInsensitiveMatch: true,
          permission: ["ReadAccountGroup"],
          controller: 'AccountsGroupCtrl'
      })


     //FinancialYear
      .when('/FinancialYear', {
          title: 'Admin.Breadcrumb.FinancialYear',
          templateUrl: '/Admin/FinancialYear/List',
          caseInsensitiveMatch: true,
          permission: ["ReadFinancialYear"],
          controller: 'FinancialYearCtrl'
      })


      //PayHead
      .when('/PayHead', {
          title: 'Admin.Breadcrumb.PayHead',
          templateUrl: '/Admin/PayHead/List',
          caseInsensitiveMatch: true,
          permission: ["ReadPayHeads"],
          controller: 'PayHeadCtrl'
      })


      //HolidaySetting
      .when('/HolidaySetting', {
          title: 'Admin.Breadcrumb.HolidaySetting',
          templateUrl: '/Admin/HolidaySetting/List',
          caseInsensitiveMatch: true,
          permission: ["ReadHolidaySettings"],
          controller: 'HolidaySettingCtrl'
      })



    //Product
    .when('/Product', {
        title: 'Admin.Breadcrumb.Product',
        templateUrl: '/Admin/DTProduct/List',
        caseInsensitiveMatch: true,
        permission: ["ReadProduct"],
        controller: 'ProductCtrl'
    })

    //CreateProduct
        .when('/Product/Create', {
         title: 'Admin.Create',
         setTitle: 'Admin.Breadcrumb.Product',
         templateUrl: '/Admin/DTProduct/CreateOrUpdate',
            caseInsensitiveMatch: true,
            permission: ["CreateProduct"],
            controller: 'CreateOrUpdateProductCtrl'
     })

      //EditProduct
      .when('/Product/Edit/:Id', {
          title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.Product',
          templateUrl: '/Admin/DTProduct/CreateOrUpdate',
          caseInsensitiveMatch: true,
          permission: ["ReadProduct"],
          controller: 'CreateOrUpdateProductCtrl'

      })




    //ProductService
    .when('/ProductService', {
        title: 'Admin.Breadcrumb.ProductService',
        templateUrl: '/Admin/DTProduct/ProductServiceList',
        caseInsensitiveMatch: true,
        permission: ["ReadProductService"],
        controller: 'ProductServiceCtrl'
    })


     //CreateProductService
          .when('/ProductService/Create', {
         title: 'Admin.Create',
         setTitle: 'Admin.Breadcrumb.ProductService',
         templateUrl: '/Admin/DTProduct/CreateOrUpdateProductService',
         caseInsensitiveMatch: true,
         permission: ["CreateProductService"],
         controller: 'CreateOrUpdateProductServiceCtrl'
     })

     //EditProductService
      .when('/ProductService/Edit/:Id', {
          title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.ProductService',
          templateUrl: '/Admin/DTProduct/CreateOrUpdateProductService',
          caseInsensitiveMatch: true,
          permission: ["ReadProductService"],
          controller: 'CreateOrUpdateProductServiceCtrl'

            
          
      })



    //Warehouse
    .when('/Warehouse', {
        title: 'Admin.Breadcrumb.Warehouse',
        templateUrl: '/Admin/DTWareHouse/List',
        caseInsensitiveMatch: true,
        permission: ["ReadWareHouse"],
        controller:  'WarehouseCtrl'

    })

     //CreateWareHouse
          .when('/Warehouse/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.Warehouse',
        templateUrl: '/Admin/DTWareHouse/CreateOrUpdate',
        caseInsensitiveMatch: true,
        permission: ["CreateWareHouse"],
        controller:'CreateOrUpdateWarehouseCtrl'
     })

     //EditWareHouse
      .when('/Warehouse/Edit/:Id', {
          title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.Warehouse',
          templateUrl: '/Admin/DTWareHouse/CreateOrUpdate',
          caseInsensitiveMatch: true,
          permission: ["ReadWareHouse"],
          controller: 'CreateOrUpdateWarehouseCtrl'
      })



     //Customer
     .when('/Customer', {
         title: 'Admin.Breadcrumb.Customer',
         templateUrl: '/Admin/Party/CustomerList',
         caseInsensitiveMatch: true,
         permission: ["ReadCustomer"],
         controller: 'CustomerCtrl'

     })

    //CreateCustomer
          .when('/Customer/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.Customer',
        templateUrl: '/Admin/Party/CreateOrUpdate',
              caseInsensitiveMatch: true,
              permission: ["CreateCustomer"],
        controller: 'CreateOrUpdateCustomerCtrl'
    })

    //EditCustomer
   .when('/Customer/Edit/:Id', {
       title: 'Admin.Edit',
       setTitle: 'Admin.Breadcrumb.Customer',
       templateUrl: '/Admin/Party/CreateOrUpdate',
       caseInsensitiveMatch: true,
       permission: ["ModifyCustomer"],
       controller: 'CreateOrUpdateCustomerCtrl'
   })


     //Supplier
     .when('/Supplier', {
         title: 'Admin.Breadcrumb.Supplier',
         templateUrl: '/Admin/Party/SupplierList',
         caseInsensitiveMatch: true,
         permission: ["ReadSupplier"],
         controller: 'SupplierCtrl'

          })
          //Owner
          .when('/Owner', {
              title: 'Admin.Breadcrumb.Supplier',
              templateUrl: '/Admin/Party/SupplierList',
              caseInsensitiveMatch: true,
              controller: 'OwnerCtrl'

          })
          //Tenent
          .when('/Tenent', {
              title: 'Admin.Breadcrumb.Customer',
              templateUrl: '/Admin/Party/CustomerList',
              caseInsensitiveMatch: true,
              controller: 'TenentCtrl'

          })
          //CreateOwner
          .when('/Owner/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.Supplier',
              templateUrl: '/Admin/Party/CreateOrUpdateSupplier',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateSupplierCtrl'
          })

          //CreateCustomer
          .when('/Tenent/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.Customer',
              templateUrl: '/Admin/Party/CreateOrUpdate',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCustomerCtrl'
          })

    //CreateSupplier
          .when('/Supplier/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.Supplier',
        templateUrl: '/Admin/Party/CreateOrUpdateSupplier',
              caseInsensitiveMatch: true,
              permission: ["CreateSupplier"],
              controller:  'CreateOrUpdateSupplierCtrl'
    })

    //EditSupplier
   .when('/Supplier/Edit/:Id', {
       title: 'Admin.Edit',
       setTitle: 'Admin.Breadcrumb.Supplier',
       templateUrl: '/Admin/Party/CreateOrUpdateSupplier',
       caseInsensitiveMatch: true,
       permission: ["ReadSupplier"],
       controller: 'CreateOrUpdateSupplierCtrl'
   })


    //Accounts
     .when('/Accounts', {
         title: 'Admin.Breadcrumb.Accounts',
         templateUrl: '/Admin/Account/List',
         caseInsensitiveMatch: true,
         permission: ["ReadAccounts"],
         controller: 'AccountsCtrl'

     })

    //CreateAccount
          .when('/Account/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.Accounts',
        templateUrl: '/Admin/Account/CreateOrUpdate',
              caseInsensitiveMatch: true,
              permission: ["CreateAccounts"],
              controller: 'CreateOrUpdateAccountsCtrl'
    })

    //EditAccount
    .when('/Account/Edit/:Id', {
        title: 'Admin.Edit',
        setTitle: 'Admin.Breadcrumb.Accounts',
       templateUrl: '/Admin/Account/CreateOrUpdate',
        caseInsensitiveMatch: true,
        permission: ["ReadAccounts"],
       controller: 'CreateOrUpdateAccountsCtrl'
   })

    //CreateChequeConfiguration
          .when('/ChequeConfiguration/Create', {
        title: 'Admin.Breadcrumb.CreateChequeConfiguration',
        setTitle: 'Admin.Breadcrumb.Accounts',
        templateUrl: '/Admin/ChequeDetail/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller: 'CreateChequeConfigurationCtrl'
    })

    //EditChequeConfiguration
    .when('/ChequeConfiguration/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditChequeConfiguration',
        setTitle: 'Admin.Breadcrumb.Accounts',
        templateUrl: '/Admin/ChequeDetail/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller:'CreateOrUpdateChequeConfigurationCtrl'
    })


   //Employee
          .when('/Employee', {
        title: 'Admin.Breadcrumb.Employee',
        templateUrl: '/Admin/EmployeeDetail/List',
              caseInsensitiveMatch: true,
              permission: ["ReadEmployee"],
        controller: 'EmployeeCtrl'

    })


    //CreateEmployee
          .when('/Employee/Create', {
         title: 'Admin.Create',
         setTitle: 'Admin.Breadcrumb.Employee',
         templateUrl: '/Admin/EmployeeDetail/CreateOrUpdate',
              caseInsensitiveMatch: true,
              //permission: ["CreateEmployee"],
              controller:  'CreateOrUpdateEmployeeCtrl'
     })


    //EditEmployee
     .when('/Employee/Edit/:Id', {
         title: 'Admin.Edit',
         setTitle: 'Admin.Breadcrumb.Employee',
         templateUrl: '/Admin/EmployeeDetail/CreateOrUpdate',
         caseInsensitiveMatch: true,
         permission: ["ReadEmployee"],
         controller:'CreateOrUpdateEmployeeCtrl' 
     })


     //SalaryPackage
     .when('/SalaryPackage', {
         title: 'Admin.Breadcrumb.SalaryPackage',
         templateUrl: '/Admin/SalaryPackage/List',
         caseInsensitiveMatch: true,
         controller:'SalaryPackageCtrl'
     })

    //CreateSalaryPackage
       .when('/SalaryPackage/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.SalaryPackage',
        templateUrl: '/Admin/SalaryPackage/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller:  'CreateOrUpdateSalaryPackageCtrl'
    })

    //EditSalaryPackage
    .when('/SalaryPackage/Edit/:Id', {
        title: 'Admin.Edit',
        setTitle: 'Admin.Breadcrumb.SalaryPackage',
        templateUrl: '/Admin/SalaryPackage/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateSalaryPackageCtrl'
    })

    //Attendance
    .when('/Attendance', {
        title: 'Admin.Breadcrumb.Attendance',
        templateUrl: '/Admin/AttendanceDetail/List',
        caseInsensitiveMatch: true,
        controller: 'AttendanceCtrl'
    })

          .when('/AttendanceNew', {
              title: 'Admin.Breadcrumb.Attendance',
              templateUrl: '/Admin/AttendanceDetail/NewList',
              caseInsensitiveMatch: true,
              controller: 'AttendanceNewCtrl'
          })

          //

          .when('/MonthlyAttendanceNew1', {
              title: 'Admin.Breadcrumb.Attendance',
              templateUrl: '/Admin/AttendanceDetail/MonthlyAttendanceListNew1',
              caseInsensitiveMatch: true,
              controller: 'MonthlyAttendanceNewCtrlList1'
          })

          //MonthlySalarySettlement

          .when('/MonthlySalarySettlement', {
              title: 'Admin.Breadcrumb.MonthlySalarySettlement',
              templateUrl: '/Admin/EmployeeDetail/MonthlySalarySettlement',
              caseInsensitiveMatch: true,
              controller: 'MonthlySalarySettlementCtrl'
          })


     //AttendanceReport
    .when('/AttendanceReport', {
        title: 'Admin.Breadcrumb.AttendanceReport',
        setTitle: 'Admin.Breadcrumb.Attendance',
        templateUrl: '/Admin/AttendanceDetail/Report',
        caseInsensitiveMatch: true,
        permission: ["ReadAttendanceReport"],
        controller: 'AttendanceReportCtrl'
    })


          //AttendanceReport
          .when('/AttendanceReportNew', {
              title: 'Admin.Breadcrumb.AttendanceReport',
              setTitle: 'Admin.Breadcrumb.Attendance',
              templateUrl: '/Admin/AttendanceDetail/ReportNew',
              caseInsensitiveMatch: true,
              permission: ["ReadAttendanceReport"],
              controller: 'AttendanceReportNewCtrl'
          })
          //billimport  
          .when('/BillImportfile', {
              title: 'Admin.Breadcrumb.Bill',
              templateUrl: '/Admin/Bill/BillImportfile',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              //permission: ["ReadBillImport"],
              controller: 'BillImportCtrl'

          })

     
    //SalesList
    .when('/SalesList', {
        title: 'Admin.Breadcrumb.Sales',
        templateUrl: '/Admin/Bill/SalesList',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesInvoice"],
        controller:  'SalesListCtrl'

    })

    //CreateSalesInvoice
          .when('/SalesInvoice/Create', {
        title: 'Admin.Breadcrumb.CreateSalesInvoice',
        setTitle: 'Admin.Breadcrumb.SalesList',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesBill',
        caseInsensitiveMatch: true,
        permission: ["CreateSalesInvoice"],
       controller:  'CreateOrUpdateSalesCtrl'
    })
         //EditSalesInvoice
    .when('/SalesInvoice/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditSalesInvoice',
        setTitle: 'Admin.Breadcrumb.SalesList',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesBill',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesInvoice"],
        controller: 'CreateOrUpdateSalesCtrl'
    })
       

    //CreateSalesInvoice
          .when('/SalesInvoice1/Create', {
        title: 'Admin.Breadcrumb.CreateSalesInvoice',
        setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Bill/CreateOrUpdateSalesBillLatest',
        caseInsensitiveMatch: true,
        permission: ["CreateSalesInvoice"],
       controller:  'CreateOrUpdateSalesLatestCtrl'
    })
         //EditSalesInvoice
    .when('/SalesInvoice1/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditSalesInvoice',
        setTitle: 'Admin.Breadcrumb.SalesList',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesBillLatest',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesInvoice"],
        controller: 'CreateOrUpdateSalesLatestCtrl'
    })

     //PurchaseList
    .when('/PurchaseList', {
        title: 'Admin.Breadcrumb.Purchase',
        templateUrl: '/Admin/Bill/PurchaseList',
        caseInsensitiveMatch: true,
        controller: 'PurchaseListCtrl'

    })
   
    //CreatePurchaseInvoice
          .when('/PurchaseInvoice/Create', {
        title: 'Admin.Breadcrumb.CreatePurchaseInvoice',
        setTitle: 'Admin.Breadcrumb.PurchaseList',
        templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseBill',
              caseInsensitiveMatch: true,
              permission: ["ReadPurchaseInvoice"],
              controller: 'CreateOrUpdatePurchaseInvoiceCtrl'
    })
   
    //EditPurchaseInvoice
    .when('/PurchaseInvoice/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditPurchaseInvoice',
        setTitle: 'Admin.Breadcrumb.PurchaseList',
        templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseBill',
        caseInsensitiveMatch: true,
        permission: ["CreatePurchaseInvoice"],
        controller: 'CreateOrUpdatePurchaseInvoiceCtrl'
    })

    //SalesReturnList
    .when('/SalesReturn', {
        title: 'Admin.Breadcrumb.SalesReturn',
        templateUrl: '/Admin/Bill/SalesReturnList',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesReturn"],
        controller: 'SalesReturnCtrl'
    })

    //CreateSalesReturn
        .when('/SalesReturn/Create', {
        title: 'Admin.Breadcrumb.CreateSalesReturn',
        setTitle: 'Admin.Breadcrumb.SalesReturn',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesReturn',
            caseInsensitiveMatch: true,
            permission: ["CreateSalesReturn"],
        controller: 'CreateOrUpdateSalesReturnCtrl'
    })

    //EditSalesReturn
    .when('/SalesReturn/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditSalesReturn',
        setTitle: 'Admin.Breadcrumb.SalesReturn',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesReturn',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesReturn"],
        controller: 'CreateOrUpdateSalesReturnCtrl'
    })
     //PurchaseReturnList
    .when('/PurchaseReturn', {
        title: 'Admin.Breadcrumb.PurchaseReturn',
        templateUrl: '/Admin/Bill/PurchaseReturnList',
        caseInsensitiveMatch: true,
        permission: ["ReadPurchaseReturn"],
        controller:'PurchaseReturnCtrl'
    })

    //CreatePurchaseReturn
          .when('/PurchaseReturn/Create', {
        title: 'Admin.Breadcrumb.CreatePurchaseReturn',
        setTitle: 'Admin.Breadcrumb.PurchaseReturn',
        templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseReturn',
              caseInsensitiveMatch: true,
              permission: ["CreatePurchaseReturn"],
        controller: 'CreateOrUpdatePurchaseReturnCtrl'
    })

    //EditPurchaseReturn
    .when('/PurchaseReturn/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditPurchaseReturn',
        setTitle: 'Admin.Breadcrumb.PurchaseReturn',
        templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseReturn',
        caseInsensitiveMatch: true,
        permission: ["ReadPurchaseReturn"],
        controller: 'CreateOrUpdatePurchaseReturnCtrl'
    })
      //SalesQuotationList
    .when('/SalesQuotation', {
        title: 'Admin.Breadcrumb.SalesQuotation',
        templateUrl: '/Admin/Bill/SalesQuotationList',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesQuotation"],
        controller:'SalesQuotationCtrl'
    })

   //CreateSalesQuotation
    .when('/SalesQuotation/Create', {
        title: 'Admin.Breadcrumb.CreateSalesQuotation',
        setTitle: 'Admin.Breadcrumb.SalesQuotation',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesQuotation',
        caseInsensitiveMatch: true,
        permission: ["CreateSalesQuotation"],
        controller: 'CreateOrUpdateSalesQuotationCtrl'
    })

    //EditSalesQuotation
    .when('/SalesQuotation/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditSalesQuotation',
        setTitle: 'Admin.Breadcrumb.SalesQuotation',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesQuotation',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesQuotation"],
        controller:'CreateOrUpdateSalesQuotationCtrl'
    })

    //SalesEstimationList
    .when('/SalesEstimation', {
        title: 'Admin.Breadcrumb.SalesEstimation',
        templateUrl: '/Admin/Bill/SalesEstimationList',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesEstimation"],
        controller: 'SalesEstimationCtrl'

    })

    //CreateSalesEstimation
          .when('/SalesEstimation/Create', {
        title: 'Admin.Breadcrumb.CreateSalesEstimation',
        setTitle: 'Admin.Breadcrumb.SalesEstimation',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesEstimation',
        caseInsensitiveMatch: true,
        permission: ["CreateSalesEstimation"],
        controller:  'CreateOrUpdateSalesEstimationCtrl'
    })

    
    //EditSalesEstimation
    .when('/SalesEstimation/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditSalesEstimation',
        setTitle: 'Admin.Breadcrumb.SalesEstimation',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesEstimation',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesEstimation"],
        controller: 'CreateOrUpdateSalesEstimationCtrl'
    })


     //RFQ
    .when('/RFQ', {
        title: 'Admin.Breadcrumb.RFQ',
        templateUrl: '/Admin/Bill/RFQList',
        caseInsensitiveMatch: true,
        permission: ["ReadRFQ"],
        controller: 'RFQCtrl'
    })

    //CreateRFQ
          .when('/RFQ/Create', {
        title: 'Admin.Breadcrumb.CreateRFQ',
        setTitle: 'Admin.Breadcrumb.RFQ',
        templateUrl: '/Admin/Bill/CreateOrUpdateRFQ',
              caseInsensitiveMatch: true,
              permission: ["CreateRFQ"],
              controller: 'CreateOrUpdateRFQCtrl'
    })

    //EditRFQ
    .when('/RFQ/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditRFQ',
        setTitle: 'Admin.Breadcrumb.RFQ',
        templateUrl: '/Admin/Bill/CreateOrUpdateRFQ',
        caseInsensitiveMatch: true,
        permission: ["ReadRFQ"],
        controller: 'CreateOrUpdateRFQCtrl'
    })


     //PurchaseOrder
    .when('/PurchaseOrder', {
        title: 'Admin.Breadcrumb.PurchaseOrder',
        templateUrl: '/Admin/Bill/PurchaseOrderList',
        caseInsensitiveMatch: true,
        permission: ["ReadPurchaseOrder"],
        controller:'PurchaseOrderCtrl'

    })

     //CreatePurchaseOrder
          .when('/PurchaseOrder/Create', {
        title: 'Admin.Breadcrumb.CreatePurchaseOrder',
        setTitle: 'Admin.Breadcrumb.PurchaseOrder',
        templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseOrder',
        caseInsensitiveMatch: true,
        permission: ["CreatePurchaseOrder"],
       controller: 'CreateOrUpdatePurchaseOrderCtrl'
    })

      //EditPurchaseOrder
    .when('/PurchaseOrder/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditPurchaseOrder',
        setTitle: 'Admin.Breadcrumb.PurchaseOrder',
        templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseOrder',
        caseInsensitiveMatch: true,
        permission: ["ReadPurchaseOrder"],
        controller: 'CreateOrUpdatePurchaseOrderCtrl'
    })


    //SalesOrder
    .when('/SalesOrder', {
        title: 'Admin.Breadcrumb.SalesOrder',
        templateUrl: '/Admin/Bill/SalesOrderList',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesOrder"],
        controller:  'SalesOrderCtrl'
    })

     //CreateSalesOrder
          .when('/SalesOrder/Create', {
        title: 'Admin.Breadcrumb.CreateSalesOrder',
        setTitle: 'Admin.Breadcrumb.SalesOrder',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesOrder',
        caseInsensitiveMatch: true,
        permission: ["CreateSalesOrder"],
        controller: 'CreateOrUpdateSalesOrderCtrl'
    })

    //EditSalesOrder
    .when('/SalesOrder/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditSalesOrder',
        setTitle: 'Admin.Breadcrumb.SalesOrder',
        templateUrl: '/Admin/Bill/CreateOrUpdateSalesOrder',
        caseInsensitiveMatch: true,
        permission: ["ReadSalesOrder"],
        controller: 'CreateOrUpdateSalesOrderCtrl'
    })

    //DeliveryNote
    .when('/DeliveryNote', {
        title: 'Admin.Breadcrumb.DeliveryNote',
        templateUrl: '/Admin/Bill/DeliveryNote',
        caseInsensitiveMatch: true,
        permission: ["ReadDeliveryNote"],
        controller:  'DeliveryNoteCtrl'
    })

    //CreateDeliveryNote
          .when('/DeliveryNote/Create', {
        title: 'Admin.Breadcrumb.CreateDeliveryNote',
        setTitle: 'Admin.Breadcrumb.DeliveryNote',
        templateUrl: '/Admin/Bill/CreateOrUpdateDeliveryNote',
              caseInsensitiveMatch: true,
              permission: ["ReadDeliveryNote"],
              controller: 'CreateOrUpdateDeliveryNoteCtrl'
    })

     //EditDeliveryNote
    .when('/DeliveryNote/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditDeliveryNote',
        setTitle: 'Admin.Breadcrumb.DeliveryNote',
        templateUrl: '/Admin/Bill/CreateOrUpdateDeliveryNote',
        caseInsensitiveMatch: true,
        permission: ["ReadDeliveryNote"],
        controller: 'CreateOrUpdateDeliveryNoteCtrl'
    })

    //OpeningStock/CreateOpeningStock
    .when('/OpeningStock', {
        title: 'Admin.Breadcrumb.OpeningStock',
        templateUrl: '/Admin/Bill/OpeningStock',
        caseInsensitiveMatch: true,
        permission: ["ReadOpeningStock"],
        controller: 'OpeningStockCtrl'
    })


    //CreateOpeningStock
          .when('/OpeningStock/Create', {
        title: 'Admin.Breadcrumb.CreateOpeningStock',
        setTitle: 'Admin.Breadcrumb.OpeningStock',
        templateUrl: '/Admin/Bill/CreateOrUpdateOpeningStock',
              caseInsensitiveMatch: true,
              permission: ["CreateOpeningStock"],
              controller: 'CreateOrUpdateOpeningStockCtrl'
    })

     //EditOpeningStock
    .when('/OpeningStock/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditOpeningStock',
        setTitle: 'Admin.Breadcrumb.OpeningStock',
        templateUrl: '/Admin/Bill/CreateOrUpdateOpeningStock',
        caseInsensitiveMatch: true,
        permission: ["ReadOpeningStock"],
        controller:'CreateOrUpdateOpeningStockCtrl'
    })

     //StockEntry
    .when('/StockEntry', {
        title: 'Admin.Breadcrumb.StockEntry',
        templateUrl: '/Admin/Bill/StockEntry',
        caseInsensitiveMatch: true,
        controller: 'StockEntryCtrl'
    })

    //CreateStockEntry
          .when('/StockEntry/Create', {
        title: 'Admin.Breadcrumb.CreateStockEntry',
        setTitle: 'Admin.Breadcrumb.StockEntry',
        templateUrl: '/Admin/Bill/CreateOrUpdateStockEntry',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateStockEntryCtrl'
    })

    //EditStockEntry
    .when('/StockEntry/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditStockEntry',
        setTitle: 'Admin.Breadcrumb.StockEntry',
        templateUrl: '/Admin/Bill/CreateOrUpdateStockEntry',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateStockEntryCtrl'
    })


    //AllBills
    .when('/AllBills', {
        title: 'Admin.Breadcrumb.AllInvoices',
        templateUrl: '/Admin/Bill/AllBillList',
        caseInsensitiveMatch: true,
        controller: 'AllBillsCtrl'
    })


     //registry
    //SalesInvoiceRegistry
    .when('/SalesInvoiceRegistry', {
        title: 'Admin.Breadcrumb.SalesInvoiceRegistry',
        templateUrl: '/Admin/Bill/SalesInvoiceRegistry',
        caseInsensitiveMatch: true,
        permission: ["ManageSalesInvoiceRegistry"],
        controller:'SalesInvoiceRegistryCtrl'
    })

          //SalesInvoiceRegistry
          .when('/ProductWiseSalesInvoiceRegistry', {
              title: 'Admin.Breadcrumb.SalesInvoiceRegistry',
              templateUrl: '/Admin/Bill/ProductWiseSalesInvoiceRegistry',
              caseInsensitiveMatch: true,
              permission: ["ManageSalesInvoiceRegistry"],
              controller: 'ProductWiseSalesInvoiceRegistryCtrl'
          })

          //SalesInvoiceRegistry
          .when('/ProductWiseMISReport', {
              title: 'Admin.Breadcrumb.ProductWiseMISReport',
              templateUrl: '/Admin/Bill/ProductWiseMISReport',
              caseInsensitiveMatch: true,
              permission: ["ManageSalesInvoiceRegistry"],
              controller: 'ProductWiseMISReportCtrl'
          })



     //PurchaseInvoiceRegistry
    .when('/PurchaseInvoiceRegistry', {
        title: 'Admin.Breadcrumb.PurchaseInvoiceRegistry',
        templateUrl: '/Admin/Bill/PurchaseInvoiceRegistry',
        caseInsensitiveMatch: true,
        permission: ["ManagePurchaseInvoiceRegistry"],
        controller: 'PurchaseInvoiceRegistryCtrl'
    })

    //SalesReturnRegistry
    .when('/SalesReturnRegistry', {
        title: 'Admin.Breadcrumb.SalesReturnRegistry',
        templateUrl: '/Admin/Bill/SalesReturnRegistry',
        caseInsensitiveMatch: true,
        permission: ["ManageSalesReturnRegistry"],
        controller: 'SalesReturnRegistryCtrl'
    })

    //PurchaseReturnRegistry
    .when('/PurchaseReturnRegistry', {
        title: 'Admin.Breadcrumb.PurchaseReturnRegistry',
        templateUrl: '/Admin/Bill/PurchaseReturnRegistry',
        caseInsensitiveMatch: true,
        permission: ["ManagePurchaseReturnRegistry"],
        controller:'PurchaseReturnRegistryCtrl'

    })

     //SalesOrderRegistry
    .when('/SalesOrderRegistry', {
        title: 'Admin.Breadcrumb.SalesOrderRegistry',
        templateUrl: '/Admin/Bill/SalesOrderRegistry',
        caseInsensitiveMatch: true,
        permission: ["ManageSalesOrderRegistry"],
        controller: 'SalesOrderRegistryCtrl'

    })

    //SalesEstimationRegistry
    .when('/SalesEstimationRegistry', {
        title: 'Admin.Breadcrumb.SalesEstimationRegistry',
        templateUrl: '/Admin/Bill/SalesEstimationRegistry',
        caseInsensitiveMatch: true,
        controller: 'SalesEstimationRegistryCtrl'

    })

    //Receipt
    .when('/Receipt', {
        title: 'Admin.Breadcrumb.Receipt',
        templateUrl: '/Admin/Voucher/Receipt',
        caseInsensitiveMatch: true,
        permission: ["ReadReceipt"],
        controller: 'ReceiptCtrl'

    })

    //CreateReceipt
          .when('/Receipt/Create', {
        title: 'Admin.Breadcrumb.CreateReceipt',
        setTitle: 'Admin.Breadcrumb.Receipt',
        templateUrl: '/Admin/Voucher/CreateOrUpdateReceipt',
              caseInsensitiveMatch: true,
              permission: ["CreateReceipt"],
        controller: 'CreateOrUpdateReceiptCtrl'
    })

    //EditReceipt
    .when('/Receipt/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditReceipt',
        setTitle: 'Admin.Breadcrumb.Receipt',
        templateUrl: '/Admin/Voucher/CreateOrUpdateReceipt',
        caseInsensitiveMatch: true,
        permission: ["ReadReceipt"],
        controller: 'CreateOrUpdateReceiptCtrl'
    })
          //Bill Clearance Receipt
          .when('/ClientReceipt/Create', {
      
          //title: 'Admin.Breadcrumb.CreateClientReceipt',
          setTitle: 'Admin.Breadcrumb.CreateClientReceipt',
          templateUrl: '/Admin/Voucher/CreateVoucherBillDetail',
              caseInsensitiveMatch: true,
              permission: ["ReadClientReceipt"],
              controller: 'CreateOrUpdateClientReceiptCtrl'
      })

       //EditReceipt
    .when('/ClientReceipt/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditReceipt',
        setTitle: 'Admin.Breadcrumb.Receipt',
        templateUrl: '/Admin/Voucher/CreateVoucherBillDetail',
        caseInsensitiveMatch: true,
        permission: ["CreateClientReceipt"],
        controller:'CreateOrUpdateClientReceiptCtrl'
    })
          //Bill Clearance Receipt for Supplier
          .when('/ClientPayment/Create', {
      
          //title: 'Admin.Breadcrumb.CreateClientPayment',
          setTitle: 'Admin.Breadcrumb.CreateClientPayment',
          templateUrl: '/Admin/Voucher/CreateVoucherBillDetailSupplier',
              caseInsensitiveMatch: true,
              permission: ["ReadClientPayment"],
      controller: 'CreateOrUpdateClientPaymentCtrl'
      })
      
    //Edit Client Payment
    .when('/ClientPayment/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditPayment',
        setTitle: 'Admin.Breadcrumb.Payment',
        templateUrl: '/Admin/Voucher/CreateVoucherBillDetailSupplier',
        caseInsensitiveMatch: true,
        permission: ["ReadClientPayment"],
        controller: 'CreateOrUpdateClientPaymentCtrl'
    })

    //Payment
    .when('/Payment', {
        title: 'Admin.Breadcrumb.Payment',
        templateUrl: '/Admin/Voucher/Payment',
        caseInsensitiveMatch: true,
        permission: ["ReadPayment"],
        controller: 'PaymentCtrl'

    })

          .when('/VatAllocationVoucher', {
              title: 'Admin.Breadcrumb.Payment',
              templateUrl: '/Admin/Voucher/VatAllocationVoucherList',
              caseInsensitiveMatch: true,
          /*    permission: ["ReadPayment"],*/
              controller: 'VatAllocationVoucherCtrl'

          })

     //CreatePayment
          .when('/Payment/Create', {
        title: 'Admin.Breadcrumb.CreatePayment',
        setTitle: 'Admin.Breadcrumb.Payment',
        templateUrl: '/Admin/Voucher/CreateOrUpdatePayment',
              caseInsensitiveMatch: true,
              permission: ["CreatePayment"],
        controller: 'CreateOrUpdatePaymentCtrl'
    })

     //EditPayment
    .when('/Payment/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditPayment',
        setTitle: 'Admin.Breadcrumb.Payment',
        templateUrl: '/Admin/Voucher/CreateOrUpdatePayment',
        caseInsensitiveMatch: true,
        permission: ["ReadPayment"],
        controller: 'CreateOrUpdatePaymentCtrl'
    })


    //Journal
           //Journal
    .when('/Journal', {
        title: 'Admin.Breadcrumb.Journal',
        templateUrl: '/Admin/Voucher/Journal',
        caseInsensitiveMatch: true,
        permission: ["ReadJournal"],
        controller: 'JournalCtrl'
    })

    //CreateJournal
          .when('/Journal/Create', {
        title: 'Admin.Breadcrumb.CreateJournal',
        setTitle: 'Admin.Breadcrumb.Journal',
        templateUrl: '/Admin/Voucher/CreateOrUpdateJournal',
              caseInsensitiveMatch: true,
              permission: ["CreateJournal"],
        controller: 'CreateOrUpdateJournalCtrl'
    })


    //EditJournal
    .when('/Journal/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditJournal',
        setTitle: 'Admin.Breadcrumb.Journal',
        templateUrl: '/Admin/Voucher/CreateOrUpdateJournal',
        caseInsensitiveMatch: true,
        permission: ["ReadJournal"],
        controller:'CreateOrUpdateJournalCtrl'
    })

    //Contra
          
    //Contra
    .when('/Contra', {
        title: 'Admin.Breadcrumb.Contra',
        templateUrl: '/Admin/Voucher/Contra',
        caseInsensitiveMatch: true,
        permission: ["ReadContra"],
        controller: 'ContraCtrl'
    })
    

    //CreateContra
          .when('/Contra/Create', {
        title: 'Admin.Breadcrumb.CreateContra',
        setTitle: 'Admin.Breadcrumb.Contra',
        templateUrl: '/Admin/Voucher/CreateOrUpdateContra',
              caseInsensitiveMatch: true,
              permission: ["CreateContra"],
        controller: 'CreateOrUpdateContraCtrl'
    })

    //EditContra
    .when('/Contra/Edit/:Id', {
        title: 'Admin.Breadcrumb.EditContra',
        setTitle: 'Admin.Breadcrumb.Contra',
        templateUrl: '/Admin/Voucher/CreateOrUpdateContra',
        caseInsensitiveMatch: true,
        permission: ["ReadContra"],
        controller: 'CreateOrUpdateContraCtrl'
    })
     //ProductStock
    .when('/ProductStock', {
        title: 'Admin.Breadcrumb.ProductStock',
        templateUrl: '/Admin/DTProductStock/ProductStock',
        caseInsensitiveMatch: true,
        controller: 'ProductStockCtrl'

    })

    //SearchProductStock
    .when('/SearchProductStock/:ProductCategoryId/:WarehouseId/:OrderBy', {
        title: 'Admin.Breadcrumb.ProductStock',
        templateUrl: '/Admin/DTProductStock/ProductStock',
        caseInsensitiveMatch: true,
        controller: 'SearchProductStockCtrl'

    })

    //ProductCategoryStock
    .when('/ProductCategoryStock', {
        title: 'Admin.Breadcrumb.ProductCategoryStock',
        templateUrl: '/Admin/DTProductStock/ProductCategoryStock',
        caseInsensitiveMatch: true,
        permission: ["ManageProductCategoryStock"],
        controller:'ProductCategoryStockCtrl'

    })

    //ProductWareHouseStock
    .when('/ProductWareHouseStock', {
        title: 'Admin.Breadcrumb.ProductWarehouseStock',
        templateUrl: '/Admin/DTProductStock/ProductWarehouseStock',
        caseInsensitiveMatch: true,
        permission: ["ManageProductWareHouseStock"],
        controller: 'ProductWareHouseStockCtrl'

    })

    //ProductStockDetails
    .when('/ProductStockDetails', {
        title: 'Admin.Breadcrumb.ProductStockDetails',
        templateUrl: '/Admin/DTProductStock/ProductStockDetails',
        caseInsensitiveMatch: true,
        permission: ["ManageProductStockDetails"],
        controller: 'ProductStockDetailsCtrl'

    })

    //SearchProductStockDetails
    .when('/SearchProductStockDetails/:ProductId/:ProductCategoryId/:WarehouseId/:OrderBy', {
        title: 'Admin.Breadcrumb.ProductStockDetails',
        templateUrl: '/Admin/DTProductStock/ProductStockDetails',
        caseInsensitiveMatch: true,
        controller: 'SearchProductStockDetailsCtrl'
        //controller: function ($scope, myService, $http, $timeout, $routeParams, $location, $rootScope) {

        //}

    })

     //ProductCategoryStockDetails
    .when('/ProductCategoryStockDetails', {
        title: 'Admin.Breadcrumb.ProductCategoryStockDetails',
        templateUrl: '/Admin/DTProductStock/ProductCategoryStockDetails',
        caseInsensitiveMatch: true,
        permission: ["ManageProductCategoryStockDetails"],
        controller: 'ProductCategoryStockDetailsCtrl'

    })


    //ProductWarehouseStockDetails
    .when('/ProductWarehouseStockDetails', {
        title: 'Admin.Breadcrumb.ProductWarehouseStockDetails',
        templateUrl: '/Admin/DTProductStock/ProductWarehouseStockDetails',
        caseInsensitiveMatch: true,
        permission: ["ManageProductWarehouseStockDetails"],
        controller: 'ProductWarehouseStockDetailsCtrl'

    })

    //StockLedger
    .when('/StockLedger', {
        title: 'Admin.Breadcrumb.StockLedger',
        templateUrl: '/Admin/DTProductStock/ProductStockLedger',
        caseInsensitiveMatch: true,
        permission: ["ManageStockLedger"],
        controller: 'StockLedgerCtrl'

    })


   //AccountLedger
    .when('/AccountLedger', {
        title: 'Admin.Breadcrumb.AccountLedger',
        templateUrl: '/Admin/Account/AccountLedger',
        caseInsensitiveMatch: true,
        controller: 'AccountLedgerCtrl'

    })

    //SearchAccountLedger
    .when('/SearchAccountLedger/:AccountId', {
        title: 'Admin.Breadcrumb.AccountLedger',
        setTitle: 'Admin.Breadcrumb.AccountTransaction',
        templateUrl: '/Admin/Account/AccountLedger',
        caseInsensitiveMatch: true,
        controller:'SearchAccountLedgerCtrl'

    })

    //AccountGroupLedger
    .when('/AccountGroupLedger', {
        title: 'Admin.Breadcrumb.AccountGroupLedger',
        templateUrl: '/Admin/Account/AccountGroupLedger',
        caseInsensitiveMatch: true,
        controller: 'AccountGroupLedgerCtrl'
    })

    // for using balancesheet double click not working
    //SearchAccountGroupLedger
    .when('/SearchAccountGroupLedger/:AccountGroupId', {
        title: 'Admin.Breadcrumb.AccountGroupLedger',
        templateUrl: '/Admin/Account/AccountGroupLedger',
        caseInsensitiveMatch: true,
        controller: function ($scope, myService, $http, $timeout, $routeParams, $location, $rootScope) {

           
        }

    })

     //AccountTransaction
    .when('/AccountTransaction', {
        title: 'Admin.Breadcrumb.AccountTransaction',
        templateUrl: '/Admin/Account/AccountTransaction',
        caseInsensitiveMatch: true,
        permission: ["ManageAccountTransaction"],
        controller: 'AccountTransactionCtrl'

    })

    //SearchAccountTransaction
    .when('/SearchAccountTransaction/:AccountGroupId', {
        title: 'Admin.Breadcrumb.AccountTransaction',
        templateUrl: '/Admin/Account/AccountTransaction',
        caseInsensitiveMatch: true,
        controller: 'SearchAccountTransactionCtrl'

    })



     //AccountGroupTransaction
    .when('/AccountGroupTransaction', {
        title: 'Admin.Breadcrumb.AccountGroupTransaction',
        templateUrl: '/Admin/Account/AccountGroupTransaction',
        caseInsensitiveMatch: true,
        permission: ["ManageAccountGroupTransaction"],
        controller: 'AccountGroupTransactionCtrl'

    })
    

    //AccountLedgerByMonth
    .when('/AccountLedgerByMonth', {
        title: 'Admin.Breadcrumb.AccountLedgerByMonth',
        templateUrl: '/Admin/Account/AccountLedgerByMonth',
        caseInsensitiveMatch: true,
        permission: ["ManageAccountLedgerByMonth"],
        controller: 'AccountLedgerByMonthCtrl'

    })

    
    //AccountLedgerByDay
    .when('/AccountLedgerByDay', {
        title: 'Admin.Breadcrumb.AccountLedgerByDay',
        templateUrl: '/Admin/Account/AccountLedgerByDay',
        caseInsensitiveMatch: true,
        permission: ["ManageAccountLedgerByDay"],
        controller: 'AccountLedgerByDayCtrl'

    })

    //AccountGroupLedgerByMonth
    .when('/AccountGroupLedgerByMonth', {
        title: 'Admin.Breadcrumb.AccountGroupLedgerByMonth',
        templateUrl: '/Admin/Account/AccountGroupLedgerByMonth',
        caseInsensitiveMatch: true,
        permission: ["ManageAccountGroupLedgerByMonth"],
        controller: 'AccountGroupLedgerByMonthCtrl'

    })

    //AccountGroupLedgerByDay
    .when('/AccountGroupLedgerByDay', {
        title: 'Admin.Breadcrumb.AccountGroupLedgerByDay',
        templateUrl: '/Admin/Account/AccountGroupLedgerByDay',
        caseInsensitiveMatch: true,
        permission: ["ManageAccountGroupLedgerByDay"],
        controller: 'AccountGroupLedgerByDayCtrl'

    })

    //TrialBalance
    .when('/TrialBalance', {
        title: 'Admin.Breadcrumb.TrialBalance',
        templateUrl: '/Admin/Voucher/TrialBalance',
        caseInsensitiveMatch: true,
        permission: ["ManageTrialBalance"],
        controller: 'TrialBalanceCtrl'

    })

    //Transaction
    .when('/Transaction', {
        title: 'Admin.Breadcrumb.Transaction',
        templateUrl: '/Admin/Voucher/Transaction',
        caseInsensitiveMatch: true,
        permission: ["ManageTransaction"],
        controller: 'TransactionCtrl'

    })




          
        //Transaction History
    .when('/TransactionHistory', {
        title: 'Admin.Breadcrumb.Transaction',
        templateUrl: '/Admin/Voucher/TransactionHistory',
        caseInsensitiveMatch: true,
        permission: ["ManageTransactionHistory"],
        controller: 'TransactionHistoryCtrl'

    })


    //BalanceSheet
    .when('/BalanceSheet', {
        title: 'Admin.Breadcrumb.BalanceSheet',
        templateUrl: '/Admin/Voucher/BalanceSheet',
        caseInsensitiveMatch: true,
        permission: ["ManageBalanceSheet"],
        controller: 'BalanceSheetCtrl'

    })

          
    //BalanceSheet
    .when('/BalanceSheetGroup', {
        title: 'Admin.Breadcrumb.BalanceSheetGroup',
        templateUrl: '/Admin/Voucher/BalanceSheetGroup',
        caseInsensitiveMatch: true,
        controller: 'BalanceSheetGroupCtrl'

    })


    //ProfitAndLoss
    .when('/ProfitAndLoss', {
        title: 'Admin.Breadcrumb.ProfitAndLoss',
        templateUrl: '/Admin/Voucher/ProfitAndLoss',
        caseInsensitiveMatch: true,
        permission: ["ManageProfitAndLoss"],
        controller:'ProfitAndLossCtrl'

    })


    //ReceiptAndPayment
    .when('/ReceiptAndPayment', {
        title: 'Admin.Breadcrumb.ReceiptAndPayment',
        templateUrl: '/Admin/Voucher/ReceiptAndPayment',
        caseInsensitiveMatch: true,
        permission: ["ManageReceiptAndPayment"],
        controller:'ReceiptAndPaymentCtrl'

    })


          .when('/ReceiptAndPaymentOld', {
              title: 'Admin.Breadcrumb.ReceiptAndPayment',
              templateUrl: '/Admin/Voucher/ReceiptAndPayment',
              caseInsensitiveMatch: true,
              permission: ["ManageReceiptAndPayment"],
              controller: 'ReceiptAndPaymentOldCtrl'

          })
      
   //CustomerReport
    .when('/CustomerReport', {
        title: 'Admin.Breadcrumb.CustomerReport',
        templateUrl: '/Admin/Party/CustomerTransaction',
        caseInsensitiveMatch: true,
        controller: 'CustomerReportCtrl'

    })

     //SupplierReport
    .when('/SupplierReport', {
        title: 'Admin.Breadcrumb.SupplierReport',
        templateUrl: '/Admin/Party/SupplierTransaction',
        caseInsensitiveMatch: true,
        controller: 'SupplierReportCtrl'
    })

            //Customer Ageing Report
    .when('/CustomerAgeingReport', {
        title: 'Admin.Breadcrumb.CustomerAgeingReport',
        templateUrl: '/Admin/Party/CustomerAgeingTransaction',
        caseInsensitiveMatch: true,
        permission: ["ManageCustomerAgeingReport"],
        controller: 'CustomerAgeingReportCtrl'

    })


     //Supplier Ageing Report
    .when('/SupplierAgeingReport', {
        title: 'Admin.Breadcrumb.SupplierAgeingReport',
        templateUrl: '/Admin/Party/SupplierAgeingTransaction',
        caseInsensitiveMatch: true,
        permission: ["ManageSupplierAgeingReport"],
        controller: 'SupplierAgeingReportCtrl'

    })
          .when('/SalesmanwiseAgeingReport', {
              title: 'Admin.Breadcrumb.CustomerReport',
              templateUrl: '/Admin/Party/SalesmanAgeingReport',
              caseInsensitiveMatch: true,
              //permission: ["ManageAllSupplierAgeingReport"],
              controller: 'SalesmanAgeingReportCtrl'
          })
    //Pending Bill Of All Party
    .when('/AllCustomerOrSupplierPendingBill', {
        title: 'Admin.Breadcrumb.CustomerReport',
        templateUrl: '/Admin/Party/AllPartyPendingBillView',
        caseInsensitiveMatch: true,
        //permission: ["ManageAllSupplierAgeingReport"],
        controller: 'AllCustomerOrSupplierPendingBillCtrl'
    })
          
     //Balance Adjustment
    .when('/BalanceAdjustment', {
        title: 'Admin.Breadcrumb.BalanceAdjustment',
        templateUrl: '/Admin/Party/BalanceAdjustmentView',
        caseInsensitiveMatch: true,
              controller: 'BalanceAdjustmentCtrl'
          })

    //LogAccount
     .when('/LogAccount', {
         title: 'Admin.Breadcrumb.LogAccount',
         templateUrl: '/Admin/LogAccount/List',
         caseInsensitiveMatch: true,
         controller:'LogAccountCtrl'

     })

    //CreateLogAccount
          .when('/LogAccount/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.LogAccount',
        templateUrl: '/Admin/LogAccount/CreateOrUpdate',
        caseInsensitiveMatch: true,
              controller:'CreateOrUpdateLogAccountCtrl'
    })


    //EditLogAccount
    .when('/LogAccount/Edit/:Id', {
        title: 'Admin.Edit',
        setTitle: 'Admin.Breadcrumb.LogAccount',
        templateUrl: '/Admin/LogAccount/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateLogAccountCtrl'
    })

     //Currency
     .when('/Currency', {
         title: 'Admin.Breadcrumb.Currency',
         templateUrl: '/Admin/Currency/List',
         caseInsensitiveMatch: true,
         controller: 'CurrencyCtrl'

     })

    //CreateCurrncy
          .when('/Currncy/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.Currency',
        templateUrl: '/Admin/Currency/CreateOrUpdate',
        caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCurrencyCtrl'
    })

     //EditCurrency
    .when('/Currency/Edit/:Id', {
        title: 'Admin.Edit',
        setTitle: 'Admin.Breadcrumb.Currency',
        templateUrl: '/Admin/Currency/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateCurrencyCtrl'
    })



     //UserRole
     .when('/UserRole', {
         title: 'Admin.Breadcrumb.UserRole',
         //setTitle: '',
         templateUrl: '/Admin/CustomerRole/List',
         caseInsensitiveMatch: true,
         controller: 'UserRoleCtrl'

     })

     //CreateUserRole
          .when('/UserRole/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.UserRole',
        templateUrl: '/Admin/CustomerRole/CreateOrUpdate',
        caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateUserRoleCtrl'
    })

    //EditUserRole
    .when('/UserRole/Edit/:Id', {
        title: 'Admin.Edit',
        setTitle: 'Admin.Breadcrumb.UserRole',
        templateUrl: '/Admin/CustomerRole/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateUserRoleCtrl'
    })


    //AllSettings
    .when('/AllSettings', {
        title: 'Admin.Breadcrumb.AllSettings',
        templateUrl: '/Admin/Setting/AllSettings',
        caseInsensitiveMatch: true,
        controller: 'AllSettingsCtrl'
    })

     //GeneralSettings
      .when('/GeneralSettings', {
          title: "Admin.Breadcrumb.GeneralSettings",
              setTitle: "Admin.Breadcrumb.AllSettings",
              templateUrl: '/Admin/Setting/GeneralSettings',
              caseInsensitiveMatch: true,
          controller: 'GeneralSettingsCtrl'
          })
          

     //OnlineUsers
     .when('/OnlineUsers', {
         title: 'Admin.Breadcrumb.OnlineUsers',
         templateUrl: '/Admin/OnlineCustomer/List',
         caseInsensitiveMatch: true,
         controller: 'OnlineUsersCtrl'

     })


     //ActivityListTypes
     .when('/ActivityListTypes', {
         title: 'Admin.Breadcrumb.ActivityTypes',
         templateUrl: '/Admin/ActivityLog/ListTypes',
         caseInsensitiveMatch: true,
         controller: 'ActivityListTypesCtrl'

     })


     //AllActivityLogs
     .when('/AllActivityLogs', {
         title: 'Admin.Breadcrumb.AllActivityLogs',
         templateUrl: '/Admin/ActivityLog/ListLogs',
         caseInsensitiveMatch: true,
         controller: 'AllActivityLogsCtrl'

     })

           //MyActivityLogs
     .when('/MyActivityLogs', {
         title: 'Admin.Breadcrumb.MyActivityLogs',
         templateUrl: '/Admin/ActivityLog/MyListLogs',
         caseInsensitiveMatch: true,
         controller: 'MyActivityLogsCtrl'

     })


     //ACL
     .when('/AccessControlList', {
         title: 'Admin.Breadcrumb.AccessControlList',
         templateUrl: '/Admin/Security/Permissions',
         caseInsensitiveMatch: true,
         controller: 'AccessControlListCtrl'

     })

     //EmailAccount
     .when('/EmailAccount', {
         title: 'Admin.Breadcrumb.EmailAccount',
         templateUrl: '/Admin/EmailAccount/List',
         caseInsensitiveMatch: true,
         controller:'EmailAccountCtrl'

     })

     //CreateEmailAccount
          .when('/EmailAccount/Create', {
        title: 'Admin.Create',
        setTitle: 'Admin.Breadcrumb.EmailAccount',
        templateUrl: '/Admin/EmailAccount/CreateOrUpdate',
        caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateEmailAccountCtrl'
    })

    //EditEmailAccount
    .when('/EmailAccount/Edit/:Id', {
        title: 'Admin.Edit',
        setTitle: 'Admin.Breadcrumb.EmailAccount',
        templateUrl: '/Admin/EmailAccount/CreateOrUpdate',
        caseInsensitiveMatch: true,
        controller: 'CreateOrUpdateEmailAccountCtrl'
    })

     //QueuedEmail
     .when('/QueuedEmail', {
         title: 'Admin.Breadcrumb.QueuedEmail',
         templateUrl: '/Admin/QueuedEmail/List',
         caseInsensitiveMatch: true,
         controller: 'QueuedEmailCtrl'

     })

      //Log
     .when('/Log', {
         title: 'Admin.Breadcrumb.Log',
         templateUrl: '/Admin/Log/List',
         caseInsensitiveMatch: true,
         controller: 'LogCtrl'

     })   
          
     .when('/Log/View/:Id', {
         title: 'Admin.Breadcrumb.Log.View',
          setTitle: 'Admin.Breadcrumb.Log',
          templateUrl: '/Admin/Log/LogView',
          caseInsensitiveMatch: true,
         controller: 'UpdateLogCtrl'
             
     })

          //CustomFields
          .when('/CustomFields', {
              title: 'Admin.Breadcrumb.CustomFields',
              templateUrl: '/Admin/Party/CustomFieldsList',
              caseInsensitiveMatch: true,
              controller: 'CustomFieldsCtrl'
              })
     //scheduled Tasks
       .when('/ScheduleTask', {
           title: 'Admin.Breadcrumb.ScheduleTask',
            templateUrl: '/Admin/ScheduleTask/List',
            caseInsensitiveMatch: true,
           controller: 'ScheduleTaskCtrl'
         })  

        //Warnings
        .when('/Warnings', {
            title: 'Admin.Breadcrumb.Warnings',
              templateUrl: '/Admin/Common/Warnings',
              caseInsensitiveMatch: true,
              controller: function ($scope, myService, $http, $timeout, $routeParams, $location, $interval, $rootScope) {

              }
          })

      //Language
     .when('/Language', {
         title: 'Admin.Breadcrumb.Language',
         templateUrl: '/Admin/Language/List',
         caseInsensitiveMatch: true,
         controller:'LanguageCtrl'
     })

     //CreateLanguage
          .when('/Language/Create', {
         title: 'Admin.Create',
         setTitle: 'Admin.Breadcrumb.Language',
         templateUrl: '/Admin/Language/CreateOrUpdate',
         caseInsensitiveMatch: true,
         controller: 'CreateOrUpdateLanguageCtrl'
      })

       //EditLanguage
      .when('/Language/Edit/:Id', {
          title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.Language',
          templateUrl: '/Admin/Language/CreateOrUpdate',
          caseInsensitiveMatch: true,
          controller: 'CreateOrUpdateLanguageCtrl'

      })

          //EditSalesInvoice
          .when('/BillView/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Bill/CreateOrUpdateEditBillView',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'EditBillViewSalesCtrl'
          })

          //EditReceipt
          .when('/ViewReceipt/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewReceiptVoucher',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditClientReceipt
          .when('/ViewClientReceipt/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewClientReceiptVoucher',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditPayment
          .when('/ViewPayment/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewPaymentVoucher',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditClientPayment
          .when('/ViewClientPayment/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewClientPaymentVoucher',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditJournal
          .when('/ViewJournal/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewJournalVoucher',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditContra
          .when('/ViewContra/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewContraVoucher',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditContra
          .when('/ViewCreditNote/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewCreditNote',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })

          //EditContra
          .when('/ViewDebitNote/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Voucher/ViewDebitNote',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'ViewReceiptVoucherCtrl'
          })
        

     //Resource
    .when('/Language/Resource/:Id', {
        title: 'Admin.Breadcrumb.Language.Resources',
        setTitle: 'Admin.Breadcrumb.Language',
        templateUrl: '/Admin/Language/Resources',
        caseInsensitiveMatch: true,
        controller: function ($scope, myService, $http, $timeout, $routeParams, $location, $rootScope) {

            $scope.LanguageId = $routeParams.Id;

            $http({
                method: "GET",
                url: "/Admin/Language/GetAllLanguages",
                cache: false
            })
            .success(function (data) {
                $scope.languageDataSource = data;
            });

            $scope.gridData = new kendo.data.DataSource({
                type: "json",
                transport: {
                    //read: {
                    //    url: "/Admin/Setting/LoadSettings",
                    //    type: "POST",
                    //    dataType: "json",
                    //},
                    read: {
                        url: "/Admin/Language/LoadResources",
                        type: "POST",
                        data: { languageId: $scope.LanguageId },
                        // data: $scope.additionalData,
                        //data: {
                        //    languageId: function () {
                        //        return $scope.LanguageId;
                        //    }
                        //},
                        dataType: "json",
                        contentType: "application/json"
                    },
                    create: {
                        url: "/Admin/Language/ResourceAdd",
                        type: "POST",
                        data: { languageId: $scope.LanguageId },
                        dataType: "json"
                    },
                    update: {
                        url: "/Admin/Language/ResourceUpdate",
                        type: "POST",
                        dataType: "json"
                    },
                    destroy: {
                        url: "/Admin/Language/ResourceDelete",
                        type: "POST",
                        dataType: "json"
                    },                    
                    parameterMap: function (data, operation) {
                        if (operation === "update" || operation === "create" || operation === "destroy") {
                            data.languageId = $scope.LanguageId;

                        } else {
                            //for some reasons only such "Filter" data be parsed
                            data.languageId = $scope.LanguageId;
                            return JSON.stringify(data);
                        }                       
                        return data;
                    }
                },
                schema: {
                    data: "Data",
                    total: "Total",
                    errors: "Errors",
                    model: {
                        id: "Id",
                        fields: {
                            Name: { type: "string" },
                            Value: { type: "string" },
                        }
                    }
                },
                requestEnd: function (e) {
                    if (e.type == "create" || e.type == "update" || e.type == "destroy") {
                        //this.read();
                       

                        if (e.response.Status) {
                            $rootScope.showSuccessNotification(e.response.Title, e.response.Message);
                            $scope.gridData.read({ languageId: $scope.LanguageId });
                        }
                        else {
                            $rootScope.showErrorNotification(e.response.Title, e.response.Message);
                        }
                    }
                },
                //requestEnd: function (e) {
                //    if (e.type == "create" || e.type == "update" || e.type == "destroy") {
                //        this.read();
                //    }
                //},
                error: function (e) {
                    display_kendoui_grid_error(e);
                    // Cancel the changes
                    this.cancelChanges();
                },
                pageSize: 10,
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
            });
            $scope.edit = function (e) {

                //e.container.find('.k-window,.ui-group-buttons').hide();
                //e.container.find('.k-grid-edit-row').show();
                //$scope.LanguageId = $scope.Search.LanguageId;
                e.container.find('.k-grid-update').addClass('btn btn-inverse btn-line');
                e.container.find('.k-grid-update').removeClass('k-button');
                e.container.find('.k-update').addClass('fa fa-check');
                e.container.find('.k-update').removeClass('k-icon k-update');

                e.container.find('.k-grid-cancel').addClass('btn btn-primary btn-line');
                e.container.find('.k-grid-cancel').removeClass('k-button');
                e.container.find('.k-cancel').addClass('fa fa-close');
                e.container.find('.k-cancel').removeClass('k-icon k-cancel');
                e.container.find(".k-grid-cancel").css("margin-left", "5px");
                // e.container.find(".k-icon .k-update").css("color", "#fff");

            },
            $scope.toolBar = [{
                template: '<button class="btn btn-success btn-line k-grid-add tooltip-success" data-rel="tooltip" tooltip-placement="right" tooltip="' + myService.GetResource("Admin.AddNew") + '"><i class="fa fa-plus icon-only"></i></button>'
            }],
            $scope.gridColumns = [{
                field: "Name",
                title: myService.GetResource("Admin.Configuration.Languages.Resources.Fields.Name"),
                sortable: true,
                filterable: {
                    cell: {
                        showOperators: false,
                        operator: "contains"
                    }
                },
                width: 200
            },
                    {
                        field: "Value",
                        title: myService.GetResource("Admin.Configuration.Languages.Resources.Fields.Value"),
                        filterable: {
                            cell: {
                                showOperators: false,
                                operator: "contains"
                            }
                        },
                        sortable: true,
                        width: 200
                    },
            {
                command: [
                     { name: "edit", text: "Edit", template: "<div class=\"ui-group-buttons\"><a class=\"btn btn-inverse k-grid-edit\"><i class=\"fa fa-edit icon-only\"></i></a>" },
                    {
                        name: "destroy", text: "Delete", template: "<div class=\"or\"></div><a class=\"btn btn-primary k-grid-delete\"><i class=\"fa fa-trash-o icon-only\"></i></a></div>"
                    }],
                width: 250,
                attributes: { style: "text-align:center" },

            }]
            
            $scope.languageChange = function () {
                $scope.LanguageId = $scope.Search.LanguageId;
                $scope.gridData.read({ languageId: $scope.LanguageId });
               // alert($scope.LanguageId);
            }

            //$scope.additionalData= function () {
            //    return {
            //        languageId: $scope.LanguageId
            //    };
            //}
           


        }
    })

    //Countries
     .when('/Countries', {
         title: 'Admin.Breadcrumb.Countries',
         templateUrl: '/Admin/Country/List',
         caseInsensitiveMatch: true,
         controller:'CountriesCtrl'

     })

 
     //CreateCountry
          .when('/Country/Create', {
         title: 'Admin.Create',
         setTitle: 'Admin.Breadcrumb.Countries',
         templateUrl: '/Admin/Country/CreateOrUpdate',
         caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCountriesCtrl'
      })    

        //EditCountry
      .when('/Country/Edit/:Id', {
          title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.Countries',
          templateUrl: '/Admin/Country/CreateOrUpdate',
          caseInsensitiveMatch: true,
          controller: 'CreateOrUpdateCountriesCtrl'

       })

       //Stores
     .when('/Stores', {
         title: 'Admin.Breadcrumb.Stores',
         templateUrl: '/Admin/Store/List',
         caseInsensitiveMatch: true,
         controller: 'StoresCtrl'

     })

          //EditStore
          .when('/Stores/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.Stores',
              templateUrl: '/Admin/Store/CreateOrUpdateStores',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateStoresCtrl'

          })

    //CreateStore
          .when('/Store/Create', {
         title: 'Admin.Create',
         setTitle: 'Admin.Breadcrumb.Stores',
         templateUrl: '/Admin/Store/CreateOrUpdate',
         caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateStoresCtrl'
      })   
          
      //EditStore
      .when('/Store/Edit/:Id', {
          title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.Stores',
          templateUrl: '/Admin/Store/CreateOrUpdate',
          caseInsensitiveMatch: true,
          controller:'CreateOrUpdateStoresCtrl'

       })

      .when('/Profile', {
          title: 'Admin.Breadcrumb.ProfileView',
              templateUrl: '/Admin/Profile/ProfileView',
              caseInsensitiveMatch: true,
          controller: 'ProfileCtrl'
          })


     //ChangePassword
     .when('/ChangePassword', {
         title: 'Admin.Breadcrumb.ChangePassword',
         templateUrl: '/Admin/Customer/ChangingPassword',
         caseInsensitiveMatch: true,
         controller:'ChangePasswordCtrl'

     })
     

    //SearchTransaction
    .when('/SearchTransaction/:VoucherNumber', {
        title: 'Admin.Breadcrumb.SearchTransaction',
        templateUrl: '/Admin/Voucher/SearchTransaction',
        caseInsensitiveMatch: true,
        controller: 'SearchTransactionCtrl'

    })

 

          //customersummarry
          .when('/CustomerSummary/:customerId?', {
              title: 'Admin.Breadcrumb.CustomerSummary',
              templateUrl: '/Admin/Party/CustomerSummary',
              caseInsensitiveMatch: true,
              controller: 'CustomerSummaryCtrl'
          })



           /////***********HRMASTER*********************// 
         .when('/HRMaster/:Type', {
          title: 'Admin.Breadcrumb.HRMaster',
          templateUrl: '/Admin/HRMaster/List',
          caseInsensitiveMatch: true,
             controller: 'HRMasterCtrl'
        })


           //////***************EmployeeLoanTab****************//
           .when('/EmployeeLoan', {
               title: 'Admin.Breadcrumb.EmployeeLoan',
               templateUrl: '/Admin/EmployeeLoan/EmployeeLoanTab',
               caseInsensitiveMatch: true,
               controller: 'EmployeeLoanCtrl'
           })

          .when('/EmployeeLoan/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.EmployeeLoan',
               templateUrl: '/Admin/EmployeeLoan/CreateEmployeeLoan',
               caseInsensitiveMatch: true,
              controller:'UpdateEmployeeLoanCtrl'
           })

            //////************************TypeOfAllowance***********//
          .when('/TypeOfAllowance', {
              title: 'Admin.Breadcrumb.TypeOfAllowance',
              templateUrl: '/Admin/TypeOfAllowance/TypeOfAllowanceTab',
              caseInsensitiveMatch: true,
              controller: 'TypeOfAllowanceCtrl'
        })

          .when('/TypeOfAllowance/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.TypeOfAllowance',
              templateUrl: '/Admin/TypeOfAllowance/Create',
              caseInsensitiveMatch: true,
              controller: 'UpdateTypeOfAllowanceCtrl'
          })

          //////************* Type Of Vacations ************
             .when('/TypeOfVacation', {
                 title: 'Admin.Breadcrumb.TypeOfVacation',
              templateUrl: '/Admin/TypeOfVacation/List',
              caseInsensitiveMatch: true,
                 controller: 'TypeOfVacationCtrl'
             
             }) 

            .when('/TypeOfVacation/Edit/:Id', {
                title: 'Admin.Edit',
                setTitle: 'Admin.Breadcrumb.TypeOfVacation',
              templateUrl: '/Admin/TypeOfVacation/Edit',
              caseInsensitiveMatch: true,
                controller: 'UpdateTypeOfVacationCtrl'
          })

          //////********************Department******************//
          .when('/Department',{
              title: 'Admin.Breadcrumb.Department',
              templateUrl: '/Admin/Department/DepartmentTab',
              caseInsensitiveMatch: true,
              controller: 'DepartmentCtrl'
          })

          .when('/Department/Edit/:Id',{
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.Department',
              templateUrl: '/Admin/Department/Create',
              caseInsensitiveMatch: true,
              controller: 'UpdateDepartmentCtrl'
          })

           //////*************SponsorCard****************//
       .when('/SponsorCard', {
           title: 'Admin.Breadcrumb.SponsorCard',
              templateUrl: '/Admin/SponsorCard/SponsorCardTab',
              caseInsensitiveMatch: true,
           controller: 'SponsorCardCtrl'
                  
        })

          .when('/SponsorCard/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.SponsorCard',
              templateUrl: '/Admin/SponsorCard/Create',
              caseInsensitiveMatch: true,
              controller: 'UpdateSponsorCardCtrl'
          })

          ////////****************Housing Card*****************//
          .when('/HousingCard', {
              title: 'Admin.Breadcrumb.HousingCard',
              templateUrl: '/Admin/HousingCard/HousingCardTab',
              caseInsensitiveMatch: true,
              controller: 'HousingCardCtrl'
        })

          .when('/HousingCard/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.HousingCard',
              templateUrl: '/Admin/HousingCard/Create',
              caseInsensitiveMatch: true,
              controller: 'UpdateHousingCardCtrl'
          })

           ////////*****************ShiftCard*******************//
          .when('/ShiftCard', {
              title: 'Admin.Breadcrumb.ShiftCard',
          templateUrl: '/Admin/ShiftCard/ShiftCardTab',
          caseInsensitiveMatch: true,
              controller: 'ShiftCardCtrl'
              })


          .when('/ShiftCard/Edit/:Id', {
              title: 'Admin.Edit',
          setTitle: 'Admin.Breadcrumb.ShiftCard',
          templateUrl: '/Admin/ShiftCard/Create',
          caseInsensitiveMatch: true,
              controller: 'UpdateShiftCardCtrl'
          })

           //////***************Deduction**************//
          .when('/AdditionalTransaction/:Type', {          
          title: 'Admin.Breadcrumb.AdditionalTransactions',
          templateUrl: '/Admin/AdditionalTransaction/List',
          caseInsensitiveMatch: true,
              controller: 'AdditionalTransactionCtrl'
        })

          //////****************TrainingCourse*****************//
          .when('/TrainingCourse', {
              title: 'Admin.Breadcrumb.TrainingCourse',
          templateUrl: '/Admin/TrainingCourse/List',
          caseInsensitiveMatch: true,
              controller:'TrainingCourseCtrl'
        })

            //////****************Vacation*****************//
          .when('/Vacation', {
              title: 'Admin.Breadcrumb.Vacation',
          templateUrl: '/Admin/Vacation/VacationTab',
          caseInsensitiveMatch: true,
              controller: 'VacationCtrl'
              })


          .when('/Vacation/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.Vacation',
              templateUrl: '/Admin/Vacation/Edit',
              caseInsensitiveMatch: true,
              controller: 'UpdateVacationCtrl'
                  })

          ////////******************Consignment********************//
          .when('/Consignment', {
              title: 'Admin.Breadcrumb.Consignment',
          templateUrl: '/Admin/Consignment/ConsignmentTab',
          caseInsensitiveMatch: true,
              controller: 'ConsignmentCtrl'
              })

          .when('/Consignment/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.Consignment',
              templateUrl: '/Admin/Consignment/Edit',
              caseInsensitiveMatch: true,
              controller: 'UpdateConsignmentCtrl'
          })

         .when('/ReturnedConsignment/Edit/:Id', {
             title: 'Admin.Edit',
             setTitle: 'Admin.Breadcrumb.Consignment',
             templateUrl: '/Admin/Consignment/ReturnedConsignmentEdit',
             caseInsensitiveMatch: true,
             controller: 'UpdateReturnedConsignmentCtrl'
         })

          ////////****************HourlyVacation*****************//
        .when('/HourlyVacation', {
          title: 'Admin.Breadcrumb.HourlyVacation',
          templateUrl: '/Admin/HourlyVacation/List',
          caseInsensitiveMatch: true,
            controller: 'HourlyVacationCtrl'
        })

           //////****************Branch*****************//

          .when('/Branch', {
          title: 'Admin.Breadcrumb.Branch',
          templateUrl: '/Admin/Branch/List',
          caseInsensitiveMatch: true,
              controller: 'BranchCtrl'
        })


          .when('/BranchNew', {
              title: 'Admin.Breadcrumb.Customer',
              templateUrl: '/Admin/Branch/List',
              caseInsensitiveMatch: true,
              permission: ["ReadCustomer"],
              controller: 'BranchNewCtrl'

          })

          //CreateCustomer
          //.when('/BranchNew/Create', {
          //    title: 'Admin.Create',
          //    setTitle: 'Admin.Breadcrumb.Customer',
          //    templateUrl: '/Admin/Branch/CreateOrUpdate',
          //    caseInsensitiveMatch: true,
          //    permission: ["CreateCustomer"],
          //    controller: 'CreateOrUpdateCustomerCtrl'
          //})




          .when('/BranchNew', {
              title: 'Admin.Breadcrumb.Customer',
              templateUrl: '/Admin/Branch/List',
              caseInsensitiveMatch: true,
              permission: ["ReadCustomer"],
              controller: 'BranchNewCtrl'

          })



          //CreateProduct
          .when('/BranchNew/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.Product',
              templateUrl: '/Admin/Branch/CreateOrUpdate',
              caseInsensitiveMatch: true,
              permission: ["CreateProduct"],
              controller: 'CreateOrUpdateBranchCtrl'
          })

          //EditProduct
          .when('/BranchNew/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.Product',
              templateUrl: '/Admin/Branch/CreateOrUpdate',
              caseInsensitiveMatch: true,
              permission: ["ReadProduct"],
              controller: 'CreateOrUpdateBranchCtrl'

          })

         //////*****************TypeOfTask*******************//
           .when('/TypeOfTask', {
               title: 'Admin.Breadcrumb.TypeOfTask',
              templateUrl: '/Admin/TypeOfTask/List',
              caseInsensitiveMatch: true,
               controller: 'TypeOfTaskCtrl'
              }) 


            .when('/TypeOfTask/Edit/:Id', {
                title: 'Admin.Edit',
                setTitle: 'Admin.Breadcrumb.TypeOfTask',
              templateUrl: '/Admin/TypeOfTask/Edit',
              caseInsensitiveMatch: true,
                controller: 'UpdateTypeOfTaskCtrl'
          })

          //////************EmployeeTask**********************//
        .when('/EmployeeTask', {
            title: 'Admin.Breadcrumb.EmployeeTask',
                templateUrl: '/Admin/EmployeeTask/TaskTab',
                caseInsensitiveMatch: true,
            controller: 'EmployeeTaskCtrl'
                })

          /////***********Employee Document Type*********************// 
         .when('/EmployeeDocumentType/:Type', {
          title: 'Admin.Breadcrumb.EmployeeDocumentType',
          templateUrl: '/Admin/EmployeeDocumentType/List',
          caseInsensitiveMatch: true,
             controller: 'EmployeeDocumentTypeCtrl'
        })

        ////****************EmployeeTransfer*****************//
        .when('/EmployeeTransfer', {
          title: 'Admin.Breadcrumb.EmployeeTransfer',
          templateUrl: '/Admin/EmployeeTransfer/List',
          caseInsensitiveMatch: true,
            controller: 'EmployeeTransferCtrl'
        }) 

           //////**********************AllDocument************************/
           .when('/AllDocument/:Type', {
               title: 'Admin.Breadcrumb.AllDocument',
               templateUrl: '/Admin/EmployeeDetail/StaffDocumentDetails',
          caseInsensitiveMatch: true,
               controller: 'AllDocumentCtrl'
                })

                 //////**********************CalendarType************************/
      .when('/CalendarType', {
          title: 'Admin.Breadcrumb.CalendarType',
          templateUrl: '/Admin/CalendarType/CalendarType',
              caseInsensitiveMatch: true,
          controller: 'CalendarTypeCtrl'
        })

          //////**********************Calendar*********************// 
         
         .when('/Calendar', {
             title: 'Admin.Breadcrumb.Calendar',
          templateUrl: '/Admin/Calendar/CalendarTab',
          caseInsensitiveMatch: true,
             controller: 'CalendarCtrl'
         })

          ////*********************End news page*************************************/////



          //Credit Note
          .when('/CreditNote', {
              title: 'Admin.Breadcrumb.Credit',
              templateUrl: '/Admin/Voucher/CreditNote',
              caseInsensitiveMatch: true,
              controller: 'CreditNoteCtrl'

          })

          //CreateCreditNote         
          .when('/CreditNote/Create', {
              title: 'Admin.Breadcrumb.CreateCreditNote',
              setTitle: 'Admin.Breadcrumb.Journal',
              templateUrl: '/Admin/Voucher/CreateOrUpdateCreditNote',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCreditNoteCtrl'
          })
          //EditCreditNote
          .when('/CreditNote/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditCreditNote',
              setTitle: 'Admin.Breadcrumb.CreditNote',
              templateUrl: '/Admin/Voucher/CreateOrUpdateCreditNote',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCreditNoteCtrl'
          })

          //Debit Note
          .when('/DebitNote', {
              title: 'Admin.Breadcrumb.Credit',
              templateUrl: '/Admin/Voucher/DebitNote',
              caseInsensitiveMatch: true,
              controller: 'DebitNoteCtrl'

          })



          //CreateDebitNote
          .when('/DebitNote/Create', {
              title: 'Admin.Breadcrumb.CreateDebitNote',
              setTitle: 'Admin.Breadcrumb.Journal',
              templateUrl: '/Admin/Voucher/CreateOrUpdateDebitNote',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDebitNoteCtrl'

          })


          //EditDebitNote
          .when('/DebitNote/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditDebitNote',
              setTitle: 'Admin.Breadcrumb.DebitNote',
              templateUrl: '/Admin/Voucher/CreateOrUpdateDebitNote',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDebitNoteCtrl'
          })
          .when('/InsertApplication', {
              title: 'Admin.Breadcrumb.InsertApplication',
              templateUrl: '/Admin/Home/InstallApplication',
              caseInsensitiveMatch: true,
              controller: 'InsertApplicationCtrl'
              })

          //MonthlyAttendance//
          .when('/MonthlyAttendance', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.MonthlyAttendance',
              templateUrl: '/Admin/AttendanceDetail/MonthlyAttendanceList',
              caseInsensitiveMatch: true,
              controller: 'MonthlyAttendanceCtrl'
          })


          //MonthlyAttendance//
          .when('/MonthlyAttendanceNew', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.MonthlyAttendance',
              templateUrl: '/Admin/AttendanceDetail/MonthlyAttendanceListNew',
              caseInsensitiveMatch: true,
              controller: 'MonthlyAttendanceNewCtrl1'
          })

              //Employeee//
          .when('/EmployeeSalary', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.EmployeeSalary',
              templateUrl: '/Admin/EmployeeDetail/EmployeeSalaryList',
              caseInsensitiveMatch: true,
              permission: ["ReadEmployeeSalary"],
              controller: 'EmployeeSalaryCtrl'
          })
          .when('/EmployeeSalaryNew', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.EmployeeSalary',
              templateUrl: '/Admin/EmployeeDetail/EmployeeSalaryNewList',
              caseInsensitiveMatch: true,
              permission: ["ReadEmployeeSalary"],
              controller: 'EmployeeSalaryNewCtrl'
          })
          //EmployeeSalaryReport
          .when('/EmployeeSalaryReport', {
              title: 'Admin.Breadcrumb.EmployeeSalaryReport',
              templateUrl: '/Admin/EmployeeDetail/EmployeeSalaryReportList',
              caseInsensitiveMatch: true,
              controller: 'EmployeeSalaryReportCtrl'

          })

          .when('/EmployeeSalaryReportNew', {
              title: 'Admin.Breadcrumb.EmployeeSalaryReport',
              templateUrl: '/Admin/EmployeeDetail/EmployeeSalaryNewReportList',
              caseInsensitiveMatch: true,
              controller: 'EmployeeSalaryReportNewCtrl'

          })

          //EmployeeVacationPay
          .when('/EmployeeVacationPay', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.EmployeeVacationPay',
              templateUrl: '/Admin/EmployeeDetail/EmployeeVacationPayList',
              caseInsensitiveMatch: true,
              permission: ["ReadEmployeeVacationPay"],
              controller: 'EmployeeVacationPayCtrl'
          })


          //EmployeeVacationPayReport
          .when('/EmployeeVacationPayReport', {
              title: 'Admin.Breadcrumb.EmployeeSalaryReport',
              templateUrl: '/Admin/EmployeeDetail/EmployeeVacationPayReportList',
              caseInsensitiveMatch: true,
              permission: ["ReadEmployeeVacationPayReport"],
              controller: 'EmployeeVacationPayReportCtrl'

          })


          //AllEmployeeSalaryList


          .when('/AllEmployeeSalaryList', {
              setTitle: 'EmployeeSalaryReport',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/AllEmployeeSalaryList',
              caseInsensitiveMatch: true,
              permission: ["ReadAllEmployeeSalaryList"],
              controller: 'AllEmployeeSalaryListCtrl'
          })

          //AllEmployeeSalaryListNew


          .when('/AllEmployeeSalaryListNew', {
              setTitle: 'EmployeeSalaryReport',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/AllEmployeeSalaryListNew',
              caseInsensitiveMatch: true,
              permission: ["ReadAllEmployeeSalaryList"],
              controller: 'AllEmployeeSalaryListNew111Ctrl'
          })
          
          .when('/SalesManWiseProfit', {
              title: 'Admin.Breadcrumb.SalesManWiseProfit',
              templateUrl: '/Admin/Bill/SalesManWiseProfit',
              caseInsensitiveMatch: true,
              controller: 'SalesManWiseProfitCtrl'

          })


          .when('/AllEmployeeSalaryListNew1', {
              setTitle: 'EmployeeSalaryReport',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/AllEmployeeSalaryListNew1',
              caseInsensitiveMatch: true,
              permission: ["ReadAllEmployeeSalaryList"],
              controller: 'BulkEmployeeSalaryListCtrl'
          })

          //SiteMaster


          //SiteMasterList
          .when('/SiteMasterList', {
              title: 'SiteMasterList',
              templateUrl: '/Admin/ManPower/SiteMasterList',
              caseInsensitiveMatch: true,
              permission: ["ReadSite"],
              controller: 'SiteMasterListCtrl'
          })


          ////CreateSiteMaster
          //.when('/SiteMasterList', {
          //    title: 'Create',
          //    setTitle: 'SiteMasterList',
          //    templateUrl: '/Admin/ManPower/CreateSiteMaster',
          //    caseInsensitiveMatch: true,
          //    controller: 'SiteMasterListCtrl'
          //})

          //CreateSiteMaster
          .when('/CreateSiteMaster', {
              title: 'Create',
              setTitle: 'SiteMasterList',
              templateUrl: '/Admin/ManPower/CreateSiteMaster',
              caseInsensitiveMatch: true,
              permission: ["CreateSite"],
              controller: 'CreateOrUpdateSiteMasterCtrl'
          })


          //EditSiteMaster  
          .when('/SiteMaster/Edit/:Id', {
              title: 'Create',
              setTitle: 'SiteMasterList',
              templateUrl: '/Admin/ManPower/CreateSiteMaster',
              caseInsensitiveMatch: true,
              permission: ["ReadSite"],
              controller: 'CreateOrUpdateSiteMasterCtrl'
          })

          //ProjectList
          .when('/ProjectList/:Type', {
              title: 'ProjectList',
              templateUrl: '/Admin/ManPower/ProjectList',
              permission: ["ReadProject"],
              caseInsensitiveMatch: true,
              controller: 'ProjectListCtrl'
          })

          //Supplier mobilization list
          .when('/SupplierMobilizationList/:Type', {
              title: 'SupplierMobilizationList',
              templateUrl: '/Admin/ManPower/SupplierMobilizationList',
              permission: ["ReadProject"],
              caseInsensitiveMatch: true,
              controller: 'SupplierMobilizationListCtrl'
          })

          //ResourceType
          .when('/ResourceType/:Type', {
              title: 'ResourceType',
              templateUrl: '/Admin/EmployeeDetail/ResourceTypeList',
              caseInsensitiveMatch: true,
              controller: 'ResourceTypeCtrl'
          })


          //MachineBreakedown
          .when('/EquipmentForm', {
              title: 'EquipmentForm',
              templateUrl: '/Admin/EmployeeDetail/EquipmentFormList',
              caseInsensitiveMatch: true,
              controller: 'EquipmentFormListCtrl'
          })

          .when('/CreateEquipmentForm', {
              title: 'Admin.Breadcrumb.CreateEquipmentForm',
              setTitle: 'Admin.Breadcrumb.EquipmentForm',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateEquipmentForm',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateEquipmentFormCtrl'
          })

          //EditSiteMaster  
          .when('/EquipmentForm/Edit/:Id', {
              title: 'Admin.Breadcrumb.CreateEquipmentForm',
              setTitle: 'Admin.Breadcrumb.EquipmentForm',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateEquipmentForm',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateEquipmentFormCtrl'
          })

          .when('/AllEquipmentForm', {
              title: 'EquipmentForm',
              templateUrl: '/Admin/EmployeeDetail/AllEquipmentFormList',
              caseInsensitiveMatch: true,
              controller: 'AllEquipmentFormCtrl'
          })

          //ProjectList
          .when('/ProjectDetailList', {
              title: 'ProjectDetailList',
              templateUrl: '/Admin/ManPower/MobilizationDetailList',
              caseInsensitiveMatch: true,
              permission: ["ReadProjectDetailList"],
              controller: 'MobilizationDetailListCtrl'
          })

          //ProjectSummaryList
          .when('/ProjectSummaryList', {
              title: 'ProjectSummaryList',
              templateUrl: '/Admin/ManPower/ProjectSummaryList',
              caseInsensitiveMatch: true,
              //permission: ["ReadProjectSummaryList"],
              controller: 'ProjectSummaryListCtrl'
          })
          //CreateProject
          .when('/CreateProject/:Type', {
              title: 'Create',
              setTitle: 'ProjectList',
              templateUrl: '/Admin/ManPower/CreateProject',
              caseInsensitiveMatch: true,
              permission: ["CreateProject"],
              controller: 'CreateOrUpdateProjectCtrl'
          })


          //EditProject
          .when('/Project/Edit/:Id', {
              title: 'Create',
              //setTitle: 'ProjectList',
              templateUrl: '/Admin/ManPower/CreateProject',
              caseInsensitiveMatch: true,
              permission: ["ReadProject"],
              controller: 'CreateOrUpdateProjectCtrl'
          })

          //MachineBreakedown
          .when('/MachineBreakedown', {
              title: 'MachineBreakedown',
              templateUrl: '/Admin/ManPower/BreakDownList',
              caseInsensitiveMatch: true,
              permission: ["ReadMachineBreakDown"],
              controller: 'MachineBreakedownListCtrl'
          })

          //CreateMachineBreakDown
          .when('/CreateMachineBreakDown', {
              title: 'Create',
              setTitle: 'MachineBreakedown',
              templateUrl: '/Admin/ManPower/CreateMachineBreakDown',
              caseInsensitiveMatch: true,
              permission: ["CreateMachineBreakDown"],
              controller: 'CreateOrUpdateMachineBreakDownCtrl'
          })

          .when('/MISExpenseSummary', {
              title: 'Create',
              setTitle: 'ProjectList',
              templateUrl: '/Admin/ManPower/MISExpenseSummary',
              caseInsensitiveMatch: true,
              permission: ["CreateProject"],
              controller: 'MISExpenseSummaryListCtrl'
          })

          //EditMachineBreakDown
          .when('/MachineBreakDown/Edit/:Id', {
              title: 'Edit',
              setTitle: 'MachineBreakedown',
              templateUrl: '/Admin/ManPower/CreateMachineBreakDown',
              caseInsensitiveMatch: true,
              permission: ["ReadMachineBreakDown"],
              controller: 'CreateOrUpdateMachineBreakDownCtrl'
          })

          //TimeSheet
          .when('/MonthlyTimeSheetList', {
              title: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/MonthlyTimeSheetList',
              caseInsensitiveMatch: true,
              controller: 'MonthlyTimeSheetListCtrl'
              
          })


          //TimeSheet
          .when('/TimeSheetList', {
              title: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/TimeSheetList',
              caseInsensitiveMatch: true,
              controller: 'TimeSheetListCtrl'
          })



          //CreateTimeSheet
          .when('/CreateTimeSheet1', {
              title: 'Create',
              setTitle: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/CreateTimeSheet1',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateTimeSheetCtrl'
          })


          //CreateTimeSheet
          .when('/CreateTimeSheet1New', {
              title: 'Create',
              setTitle: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/CreateTimeSheet1New',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateTimeSheetNew1Ctrl'
          })

          //CreateTimeSheet
          .when('/CreateInvoiceFromTimeSheet', {
              title: 'Create',
              setTitle: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/CreateInvoiceFromTimeSheet',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateInvoiceFromTimeSheetCtrl'
          })
          .when('/CreateMobilization', {
              title: 'Admin.Breadcrumb.CreateMobilization',
              setTitle: 'Admin.Breadcrumb.Mobilization',
              templateUrl: '/Admin/Manpower/CreateOrUpdateMobilization',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateMobilizationCtrl'
          })
          //.when('/CreateSupplierMobilization', {
          //    title: 'Admin.Breadcrumb.CreateSupplierMobilization',
          //    setTitle: 'Admin.Breadcrumb.SupplierMobilization',
          //    templateUrl: '/Admin/Manpower/CreateOrUpdateSupplierMobilization',
          //    caseInsensitiveMatch: true,
             
          //    controller: 'CreateOrUpdateSupplierMobilizationCtrl'
          //})

 

          .when('/Mobilization/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditMobilization',
              setTitle: 'Admin.Breadcrumb.Mobilization',
              templateUrl: '/Admin/Manpower/CreateOrUpdateMobilization',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateMobilizationCtrl'
          })
      

          // from here
          .when('/SupplierMobilization', {
              title: 'Admin.Breadcrumb.CreateSupplierDeMobilization',
              setTitle: 'Admin.Breadcrumb.SupplierMobilization',
              templateUrl: '/Admin/Manpower/CreateSupplierMobilization',
              caseInsensitiveMatch: true,
              caseInsensitiveMatch: true,

              controller: 'CreateSupplierMobilizationCtrl'
          })


          .when('/SupplierMobilization/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditSupplierMobilization',
              setTitle: 'Admin.Breadcrumb.SupplierMobilization',
              templateUrl: '/Admin/Manpower/CreateOrUpdateSupplierMobilization',
              caseInsensitiveMatch: true,
              controller: 'UpdateSupplierMobilizationCtrl'
          })


          .when('/SupplierDeMobilization', {
              title: 'Admin.Breadcrumb.CreateSupplierDeMobilization',
              setTitle: 'Admin.Breadcrumb.SupplierMobilization',
              templateUrl: '/Admin/Manpower/CreateSupplierDeMobilization',
              caseInsensitiveMatch: true,
              caseInsensitiveMatch: true,

              controller: 'CreateSupplierDeMobilizationCtrl'
          })


          .when('/SupplierDeMobilization/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditSupplierMobilization',
              setTitle: 'Admin.Breadcrumb.SupplierMobilization',
              templateUrl: '/Admin/Manpower/UpdateSupplierDeMobilization',
              caseInsensitiveMatch: true,
              controller: 'UpdateSupplierDeMobilizationCtrl'
          })

   
          ///till her
          .when('/MobilizationList', {
              title: 'Admin.Breadcrumb.MobilizationList',
              setTitle: 'Admin.Breadcrumb.MobilizationList',
              templateUrl: '/Admin/Manpower/MobilizationList',
              caseInsensitiveMatch: true,
              controller: 'MobilizationListCtrl'
          })
          .when('/SupplierMobilizationList', {
              title: 'Admin.Breadcrumb.SupplierMobilizationList',
              setTitle: 'Admin.Breadcrumb.MobilizationList',
              templateUrl: '/Admin/Manpower/SupplierMobilizationList',
              caseInsensitiveMatch: true,
              controller: 'SupplierMobilizationListCtrl'
          })
          //TimeSheetEdit
          .when('/TimeSheet/Edit/:Id', {
              title: 'Create',
              setTitle: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/EditTimeSheet',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateTimeSheetCtrl'
          })


          //LeadStarts

          //LeadAccount
          .when('/CreateLeadAccount', {
              title: 'Create',
              setTitle: 'LeadAccount',
              templateUrl: '/Admin/LeadAccount/Create',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateLeadAccountCtrl'
          })
          //LeadAccount
          .when('/LeadAccount', {
              title: 'LeadAccount',
              templateUrl: '/Admin/LeadAccount/List',
              caseInsensitiveMatch: true,
              controller: 'LeadAccountListCtrl'
          })
          .when('/LeadAccount/Edit/:Id', {
              title: 'Edit',
              setTitle: 'LeadAccount',
              templateUrl: '/Admin/LeadAccount/Create',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateLeadAccountCtrl'
          })

          .when('/LeadAccount/LeadAccountView/:Id', {
              title: 'LeadAccountView',
              setTitle: 'LeadAccount',
              templateUrl: '/Admin/LeadAccount/LeadAccountView',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateLeadAccountViewCtrl'
          })

          //Contacts
          .when('/CreateContacts', {
              title: 'Create',
              setTitle: 'Contacts',
              templateUrl: '/Admin/Contact/Create',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateContactsCtrl'
          })
          .when('/Contacts', {
              title: 'Contacts',
              templateUrl: '/Admin/Contact/List',
              caseInsensitiveMatch: true,
              controller: 'ContactsListCtrl'
          })
          .when('/Contacts/Edit/:Id', {
              title: 'Edit',
              setTitle: 'Contacts',
              templateUrl: '/Admin/Contact/Create',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateContactsCtrl'
          })

          .when('/Contact/ContactView/:Id', {
              title: 'ContactView',
              setTitle: 'Contacts',
              templateUrl: '/Admin/Contact/ContactView',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateContactViewCtrl'
          })

          //SalesForce Or Lead
          .when('/CreateLead', {
              title: 'Create',
              setTitle: 'Lead',
              templateUrl: '/Admin/SalesForce/Create',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateLeadCtrl'
          })

          .when('/Lead', {
              title: 'Lead',
              templateUrl: '/Admin/SalesForce/List',
              caseInsensitiveMatch: true,
              controller: 'LeadListCtrl'
          })

          .when('/Lead/Edit/:Id', {
              title: 'Edit',
              setTitle: 'Lead',
              templateUrl: '/Admin/SalesForce/Create',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateLeadCtrl'
          })


          .when('/AssignLeads', {
              title: 'Assign Leads',
              templateUrl: '/Admin/SalesForce/UnAssignedList',
              caseInsensitiveMatch: true,
              controller: 'AssignLeadsListCtrl'
          })



          .when('/AllLead', {
              title: 'All Lead',
              templateUrl: '/Admin/SalesForce/LeadList',
              caseInsensitiveMatch: true,
              permission: ["ReadAllLead"],
              controller: 'AllLeadListCtrl'
          })

          .when('/Lead/LeadView/:Id', {
              title: 'LeadView',
              setTitle: 'Lead',
              templateUrl: '/Admin/SalesForce/SalesForceView',
              caseInsensitiveMatch: true,
              controller: 'LeadViewCtrl'
          })

          //Activity
          .when('/Activity', {
              title: 'My Activity',
              templateUrl: '/Admin/Activity/ActivityList',
              caseInsensitiveMatch: true,
              permission: ["ReadActivity"],
              controller: 'ActivityListCtrl'
          })

          //AllActivity
          .when('/AllActivity', {
              title: 'All Activity',
              templateUrl: '/Admin/Activity/ActivityList',
              caseInsensitiveMatch: true,
              permission: ["ReadAllActivity"],
              controller: 'AllActivityListCtrl'
          })


          //Partners
          .when('/Partners', {
              title: 'Admin.Breadcrumb.Partners',
              templateUrl: '/Admin/Party/PartnersList',
              caseInsensitiveMatch: true,
              controller: 'PartnersCtrl'
          })


          //CreatePartners
          .when('/Partners/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.Partners',
              templateUrl: '/Admin/Party/CreateOrUpdatePartners',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdatePartnersCtrl'
          })

          //EditPartners
          .when('/Partners/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.Partners',
              templateUrl: '/Admin/Party/CreateOrUpdatePartners',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdatePartnersCtrl'



          })

          //PaymentCertification
          .when('/PaymentCertification', {
              title: 'Create',
              setTitle: 'PaymentCertification',
              templateUrl: '/Admin/Bill/PaymentCertification',
              caseInsensitiveMatch: true,
              permission: ["CreatePaymentCertification"],
              controller: 'PaymentCertificationCtrl'
          })

          //CustomTable1
          .when('/CustomTable1', {
              title: 'Admin.Breadcrumb.CustomTable1',
              templateUrl: '/Admin/Reports/CustomTable1List',
              caseInsensitiveMatch: true,
              controller: 'CustomTable1Ctrl'
          })


          //CreateCustomTable1
          .when('/CustomTable1/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.CustomTable1',
              templateUrl: '/Admin/Reports/CreateOrUpdateCustomTable1',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCustomTable1Ctrl'
          })

          //EditCustomTable1
          .when('/CustomTable1/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.CustomTable1',
              templateUrl: '/Admin/Reports/CreateOrUpdateCustomTable1',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCustomTable1Ctrl'
          })




          //CustomTable1Detail
          .when('/CustomTable1Detail', {
              title: 'Admin.Breadcrumb.CustomTable1Detail',
              templateUrl: '/Admin/Reports/CustomTable1DetailList',
              caseInsensitiveMatch: true,
              controller: 'CustomTable1DetailCtrl'
          })


          //CreateCustomTable1
          .when('/CustomTable1Detail/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.CustomTable1Detail',
              templateUrl: '/Admin/Reports/CreateOrUpdateCustomTable1Detail',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCustomTable1DetailCtrl'
          })

          //EditCustomTable1
          .when('/CustomTable1CustomTable1Detail/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.CustomTable1Detail',
              templateUrl: '/Admin/Reports/CreateOrUpdateCustomTable1Detail',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCustomTable1DetailCtrl'
          })



          //SalesTarget
          .when('/SalesTarget', {
              title: 'Admin.Breadcrumb.SalesTarget',
              templateUrl: '/Admin/Bill/SalesTargetList',
              caseInsensitiveMatch: true,
              controller: 'SalesTargetCtrl'
          })


          //CreateSalesTarget
          .when('/SalesTarget/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.SalesTarget',
              templateUrl: '/Admin/Bill/CreateOrUpdateSalesTarget',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateSalesTargetCtrl'
          })

          //EditSalesTarget
          .when('/SalesTarget/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.SalesTarget',
              templateUrl: '/Admin/Bill/CreateOrUpdateSalesTarget',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateSalesTargetCtrl'
          })




          //SalesTargetDetail
          .when('/SalesTargetReporting', {
              title: 'Admin.Breadcrumb.SalesTargetReporting',
              templateUrl: '/Admin/Bill/AllSalesReportingList',
              caseInsensitiveMatch: true,
              controller: 'SalesTargetReportingCtrl'
          })


          //Manmn
          .when('/ManPowerTransaction', {
              title: 'Admin.Breadcrumb.ManPowerTransaction',
              templateUrl: '/Admin/Account/ManPowerTransaction',
              caseInsensitiveMatch: true,
              controller: 'ManPowerTransactionCtrl'

          })


       //PaymentCertification
          .when('/PaymentCertification/Create', {
              title: 'Create',
              setTitle: 'PaymentCertification',
              templateUrl: '/Admin/Bill/CreateOrUpdatePaymentCertification',
              caseInsensitiveMatch: true,
              permission: ["CreatePaymentCertification"],
              controller: 'CreateOrUpdatePaymentCertificationCtrl'
             
          })

          //PaymentCertification
          .when('/PaymentCertification/Edit/:Id', {
              title: 'Create',
              setTitle: 'PaymentCertification',
              templateUrl: '/Admin/Bill/UpdatePaymentCertification',
              caseInsensitiveMatch: true,
              permission: ["ModifyPaymentCertification"],
              controller: 'CreateOrUpdatePaymentCertificationCtrl'
          })


          //SearchAccountLedger
          .when('/SearchSalesList/:AccountId', {
              title: 'Admin.Breadcrumb.Sales',
              templateUrl: '/Admin/Bill/SalesList',
              caseInsensitiveMatch: true,
              controller: 'SearchSalesListCtrl'

          })
          //SearchAccountLedger
          .when('/SearchPurchaseList/:AccountId', {
              title: 'Admin.Breadcrumb.Sales',
              templateUrl: '/Admin/Bill/PurchaseList',
              caseInsensitiveMatch: true,
              controller: 'SearchPurchaseListCtrl'

          })

          //ProjectList
          .when('/SalesCommissionReport', {
              title: 'ProjectDetailList',
              templateUrl: '/Admin/Bill/CommissionReportList',
              caseInsensitiveMatch: true,
              permission: ["ReadProjectDetailList"],
              controller: 'SalesCommissionReportCtrl'
          })

          .when('/HiredSalesCommissionReport', {
              title: 'ProjectDetailList',
              templateUrl: '/Admin/Bill/HiredSalesCommissionReport',
              caseInsensitiveMatch: true,
              permission: ["ReadProjectDetailList"],
              controller: 'ContractingSalesCommissionReportCtrl'
          })

          .when('/HiredCostAdjustment', {
              title: 'ProjectDetailList',
              templateUrl: '/Admin/Bill/HiredCostAdjustment',
              caseInsensitiveMatch: true,
              permission: ["ReadProjectDetailList"],
              controller: 'HiredCostCtrl'
          })
          //.when('/HiredSalesCommissionReport', {
          //    title: 'ProjectDetailList',
          //    templateUrl: '/Admin/Bill/HiredSalesCommissionReport',
          //    caseInsensitiveMatch: true,
          //    permission: ["ReadProjectDetailList"],
          //    controller: 'ContractingSalesCommissionReportCtrl'
          //})


          //PaymentRequestNew
          .when('/PaymentRequestNew', {
              title: 'Admin.Breadcrumb.PaymentRequestNew',
              setTitle: 'Admin.Breadcrumb.PaymentRequest',
              templateUrl: '/Admin/Bill/PaymentCertificationNew',
              caseInsensitiveMatch: true,
              controller: 'PaymentRequestNewCtrl'
          })

          //PaymentRequestNewCreate
          .when('/PaymentRequestnew/Create', {
              title: 'Admin.Breadcrumb.PaymentRequestCreate',
              setTitle: 'Admin.Breadcrumb.PaymentRequest',
              templateUrl: '/Admin/Bill/CreateOrUpdatePaymentRequestnew',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdatePaymentRequestNewCtrl',
          })

          .when('/PaymentRequestnew/Edit/:Id', {
              title: 'Admin.Breadcrumb.CreateSalesQuotation',
              setTitle: 'Admin.Breadcrumb.SalesQuotation',
              templateUrl: '/Admin/Bill/CreateOrUpdatePaymentRequestnew',
              caseInsensitiveMatch: true,
              controller: 'EditOrUpdatePaymentRequestNewCtrl',
          })

          //PaymentCertification
          .when('/PaymentRequest', {
              title: 'Create',
              setTitle: 'PaymentRequest',
              templateUrl: '/Admin/Bill/PaymentRequest',
              caseInsensitiveMatch: true,
              //permission: ["CreatePaymentCertification"],
              controller: 'PaymentRequestCertificationCtrl'
          })

          //PaymentCertification
          .when('/PaymentRequest/Create', {
              title: 'Create',
              setTitle: 'PaymentRequestCertification',
              templateUrl: '/Admin/Bill/CreateOrUpdatePaymentRequestCertification',
              caseInsensitiveMatch: true,
              //permission: ["CreatePaymentCertification"],
              controller: 'CreateOrUpdatePaymentRequestCertificationCtrl'
          })

          //PaymentCertification
          .when('/PaymentRequest/Edit/:Id', {
              title: 'Create',
              setTitle: 'PaymentRequestCertification',
              templateUrl: '/Admin/Bill/UpdatePaymentRequestCertification',
              caseInsensitiveMatch: true,
              //permission: ["ModifyPaymentCertification"],
              controller: 'CreateOrUpdatePaymentRequestCertificationCtrl1'
          })

          .when('/Activity/Appointment/Edit/:Id', {
              title: 'Activity',
              templateUrl: '/Admin/Activity/AppointmentEdit',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/Activity/GetActivitiesById/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.Activity = data;
                      });

                  $scope.Save = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $http({
                              method: 'POST',
                              url: '/Admin/Activity/UpdateActivity',
                              data: $scope.Activity
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $location.path('/' + data.Type + '/' + data.Type + 'View/' + data.Id);
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              })
                      }
                  };
              }
          })
          .when('/Activity/PhoneCall/Edit/:Id', {
              title: 'Activity',
              templateUrl: '/Admin/Activity/PhoneCallEdit',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/Activity/GetActivitiesById/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.Activity = data;
                      });

                  $scope.Save = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $http({
                              method: 'POST',
                              url: '/Admin/Activity/UpdateActivity',
                              data: $scope.Activity
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $location.path('/' + data.Type + '/' + data.Type + 'View/' + data.Id);
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              })
                      }
                  };
              }
          })
          .when('/Activity/Note/Edit/:Id', {
              title: 'Activity',
              templateUrl: '/Admin/Activity/NoteEdit',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/Activity/GetActivitiesById/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.Activity = data;
                      });

                  $scope.Save = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $http({
                              method: 'POST',
                              url: '/Admin/Activity/UpdateActivity',
                              data: $scope.Activity
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $location.path('/' + data.Type + '/' + data.Type + 'View/' + data.Id);
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              })
                      }
                  };
              }
          })

          //akr
          .when('/Activity/TaskEdit/:Id', {
              title: 'Activity',
              templateUrl: '/Admin/Activity/TaskDetailEdit',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/Activity/GetActivitiesById/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.Activity = data;
                          //$scope.Activity.DateTime = kendo.toString(kendo.parseDate(data.DateTime), "G");
                          $scope.Activity.RemainderDate = kendo.toString(kendo.parseDate(data.RemainderDate), "d");
                      });

                  $http({
                      method: "GET",
                      url: "/Admin/LeadAccount/GetAllCustomer",
                      cache: false
                  })
                      .success(function (data) {
                          //$scope.Activity.ModifyId = data[0].Id;
                          $scope.assignedToDataSource = data;
                      });

                  $scope.Save = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $http({
                              method: 'POST',
                              url: '/Admin/Activity/UpdateActivity',
                              data: $scope.Activity
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      //$location.path('/' + data.Type + '/' + data.Type + 'View/' + data.Id);
                                      //akr changed this
                                      if (data.Id == 0) {
                                          $location.path('/Activity');
                                      }
                                      else {
                                          $location.path('/Lead/Edit/' + data.Id);
                                      }
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              })
                      }
                  };
              }
          })






          //Opportunity
          .when('/CreateOpportunity', {
              title: 'Create',
              setTitle: 'Opportunity',
              templateUrl: '/Admin/Opportunity/CreateOpportunity',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/LeadAccount/GetAllCustomer",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.SalesForce.OwnerId = data[0].Id;
                          $scope.accountOwnerDataSource = data;
                      });
                  $http({
                      method: "GET",
                      url: "/Admin/LeadAccount/GetAllAccount",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.accountDataSource = data;
                      });
                  $http({
                      method: "GET",
                      url: "/Admin/Contact/GetAllContacts",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.contactDataSource = data;
                      });


    $http({
        method: "GET",
        url: "/Admin/Bill/GetAllCustomerList",
        cache: false
    })
        .success(function (data) {
            $scope.customerDataSource = data;
        });
                  $http({
                      method: "GET",
                      url: "/Admin/SalesForce/GetAllSalesForceDropDown",
                      cache: false
                  })
                      .success(function (data) {
                          //$scope.contactTypeDataSource = data.ContactType;
                          $scope.leadSourceDataSource = data.LeadSource;
                          $scope.industryDataSource = data.Industry;
                          $scope.ownershipDataSource = data.Ownership;
                          $scope.purchaseTimeFrameDataSource = data.PurchaseTimeframe;
                          $scope.purchaseProcessDataSource = data.PurchaseProcess;
                          //$scope.leadStatusDataSource = data.LeadStatus;
                          //$scope.accountTypeDataSource = data.AccountType;
                      });
                  $scope.Save = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $http({
                              method: 'POST',
                              url: '/Admin/SalesForce/InsertOpportunity',
                              data: $scope.SalesForce
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $scope.ClearMe();
                                      $scope.GotoNew(data.SalesForceId);
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                                  //dropdown refresh
                                  $http({
                                      method: "GET",
                                      url: "/Admin/LeadAccount/GetAllCustomer",
                                      cache: false
                                  })
                                      .success(function (data) {
                                          $scope.SalesForce.OwnerId = data[0].Id;
                                          $scope.accountOwnerDataSource = data;
                                      });
                              })
                      }
                  }
                  $scope.ClearMe = function () {
                      $scope.SalesForce.OwnerId = 0;
                      $scope.SalesForce.FirstName = "";
                      // $scope.LeadAccount.ContactType = 0;
                      $scope.SalesForce.MobileNumber = "";
                      $scope.SalesForce.PhoneNumber = "";
                      $scope.SalesForce.AlternativeNumber = "";
                      $scope.SalesForce.Fax = "";
                      $scope.SalesForce.Email = "";
                      $scope.SalesForce.SecondaryEmail = "";
                      $scope.SalesForce.Website = "";
                      $scope.SalesForce.Categories = "";
                      $scope.SalesForce.LeadSource = 0;
                      $scope.SalesForce.EstimatedBudget = "";
                      $scope.SalesForce.Description = "";
                      //$scope.SalesForce.ClosingDate = 0;

                      $scope.SalesForce.AccountType = 0;

                      $scope.SalesForce.Industry = 0;
                      $scope.SalesForce.Ownership = 0;
                      $scope.SalesForce.AnnualRevenue = "";
                      $scope.SalesForce.SICCode = "";

                      $scope.SalesForce.SkypeId = "";
                      $scope.SalesForce.Facebook = "";
                      $scope.SalesForce.LinkedIn = "";
                      $scope.SalesForce.WhatsApp = "";
                      $scope.SalesForce.Twitter = "";

                      $scope.SalesForce.LeadStatus = 0;
                      $scope.SalesForce.Currency = "";
                      $scope.SalesForce.PotentialAmount = "";
                      $scope.SalesForce.NumberOfEmployees = "";
                      $scope.SalesForce.PurchaseTimeFrame = "";
                      $scope.SalesForce.PurchaseProcess = "";
                      $scope.SalesForce.AccountId = 0;
                      $scope.SalesForce.ContactId = 0;
                      $scope.SalesForce.ClosedDate = "";
                      $scope.SalesForce.IdentifyDecisionMakesr = false;

                      //document.getElementById("BookId").focus();
                  };

                  $scope.GotoNew = function (Id) {
                      $location.path('/Opportunity/OpportunityView/' + Id);
                  };
              }
          })
          .when('/Opportunity', {
              title: 'Opportunity',
              templateUrl: '/Admin/Opportunity/ListOpportunity',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/SalesForce/GetAllSalesForceDropDown",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.leadSourceDataSource = data.LeadSource;
                          $scope.industryDataSource = data.Industry;
                          $scope.ownershipDataSource = data.Ownership;
                      });
                  $scope.gridData = new kendo.data.DataSource({
                      type: "json",
                      transport: {
                          read: function (e) {

                              $scope.SalesForce.page = e.data.page;
                              $scope.SalesForce.pageSize = e.data.pageSize;
                              $scope.SalesForce.take = e.data.take;
                              $scope.SalesForce.skip = e.data.skip;
                              $scope.SalesForce.sort = e.data.sort;
                              $scope.SalesForce.filter = e.data.filter;

                              $http({ method: 'POST', url: '/Admin/SalesForce/LoadOpportunity', data: $scope.SalesForce }).
                                  success(function (data, status, headers, config) {
                                      e.success(data);
                                  }).
                                  error(function (data, status, headers, config) {
                                      e.error(data);
                                  });
                          },
                          destroy: function (e) {
                              $http({
                                  method: 'POST',
                                  url: '/Admin/SalesForce/DeleteSalesForce/' + e.data.Id,
                              }).
                                  success(function (data, status, headers, config) {
                                      if (data.Status) {
                                          $rootScope.showSuccessNotification(data.Title, data.Message);
                                      }
                                      else {
                                          $rootScope.showErrorNotification(data.Title, data.Message);
                                      }
                                      e.success(data);
                                      $scope.gridData.read($scope.SalesForce);
                                  }).
                                  error(function (data, status, headers, config) {
                                      e.error(data);

                                  });
                          },
                          parameterMap: function (data, operation) {
                              if (operation != "read") {
                                  return data;
                              } else {
                                  //for some reasons only such "Filter" data be parsed
                                  return JSON.stringify(data);
                              }
                          }

                      },
                      schema: {
                          data: "Data",
                          total: "Total",
                          errors: "Errors",
                          model: {
                              id: "Id",
                              fields: {
                                  Name: { type: "string", validation: { required: true } },
                                  Code: { type: "string" },
                              }
                          }
                      },
                      error: function (e) {
                          display_kendoui_grid_error(e);
                          // Cancel the changes
                          this.cancelChanges();
                      },
                      pageSize: 10,
                      serverPaging: true,
                      serverFiltering: false,
                      serverSorting: true,
                  });
                  $scope.gridColumns = [{
                      field: "AccountName",
                      title: "Name",
                      width: 100,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                      {
                          field: "JobTitle",
                          title: "JobTitle",
                          width: 100,
                          filterable: {
                              cell: {
                                  showOperators: false,
                                  operator: "contains"
                              }
                          }
                      },
                  {
                      field: "MobileNumber",
                      title: "Sales Stage",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "AccountType",
                      title: "Type",
                      width: 100,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "Email",
                      title: "Proposed Solution",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "eq"
                          }
                      }
                  },
                  //{
                  //    field: "Type",
                  //    title: "Type",
                  //    width: 100,
                  //    filterable: {
                  //        cell: {
                  //            showOperators: false,
                  //            operator: "contains"
                  //        }
                  //    }
                  //},
                  //{
                  //    field: "Fax",
                  //    title: "Customer Need",
                  //    width: 150,
                  //    filterable: {
                  //        cell: {
                  //            showOperators: false,
                  //            operator: "contains"
                  //        }
                  //    }
                  //},
                  {
                      field: "AlternativeNumber",
                      title: "Current Situation",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  //{
                  //    field: "Categories",
                  //    title: "Categories",
                  //    width: 150,
                  //    filterable: {
                  //        cell: {
                  //            showOperators: false,
                  //            operator: "contains"
                  //        }
                  //    }
                  //},
                  {
                      field: "PurchaseProcess",
                      title: "Purchase Process",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "LeadSource",
                      title: "Lead Source",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      width: 160,
                      template: '<div class="ui-group-buttons"><a href="\\#/Opportunity/Edit/#=Id#" class="btn btn-inverse" data-rel="tooltip" tooltip-placement="left" tooltip="Edit" ><i class="fa fa-edit icon-only"></i></a><div class="or"></div><button class="btn btn-primary k-grid-delete" type="button"><i class="fa fa-trash-o icon-only"></i></button><div class="or"></div><a href="\\#/Opportunity/OpportunityView/#=Id#" class="btn btn-inverse" data-rel="tooltip" tooltip-placement="left" tooltip="OppornityProfileView" ><i class="fa fa-desktop"></i></a></div>',
                      attributes: { style: "text-align:center" }
                  }]
                  $scope.toggle = function (event) {
                      event.preventDefault();
                      var togle = $rootScope.toggleState;

                      if (togle) {
                          $rootScope.toggleState = false;
                      } else {
                          $rootScope.toggleState = true;
                      }
                  }
                  $scope.submit = function (event) {
                      event.preventDefault();
                      $scope.gridData.read($scope.SalesForce);
                  }
                  $scope.ClearMe = function () {
                      $scope.SalesForce.FirstName = "";
                      $scope.SalesForce.MobileNumber = "";
                      $scope.SalesForce.PhoneNumber = "";
                      $scope.SalesForce.Email = "";
                      $scope.SalesForce.Industry = 0;
                      $scope.SalesForce.Categories = "";
                      $scope.SalesForce.Ownership = 0;
                      $scope.SalesForce.LeadSource = 0;
                  }
              }
          })
          .when('/Opportunity/Edit/:Id', {
              title: 'Edit',
              setTitle: 'Opportunity',
              templateUrl: '/Admin/Opportunity/CreateOpportunity',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {
                  $http({
                      method: "GET",
                      url: "/Admin/SalesForce/GetSalesForcesById/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.SalesForce = data;
                          $scope.SalesForce.ShowInformation = true;
                          $scope.SalesForce.ShowBusinessInformation = true;
                          $scope.SalesForce.ShowSocialInformation = true;
                          $scope.SalesForce.ShowOtherDetails = true;
                      });
                  $http({
                      method: "GET",
                      url: "/Admin/LeadAccount/GetAllCustomer",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.SalesForce.OwnerId = data[0].Id;
                          $scope.accountOwnerDataSource = data;
                      });
                  $http({
                      method: "GET",
                      url: "/Admin/LeadAccount/GetAllAccount",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.accountDataSource = data;
                      });
                  $http({
                      method: "GET",
                      url: "/Admin/Contact/GetAllContacts",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.contactDataSource = data;
                      });
                  $http({
                      method: "GET",
                      url: "/Admin/SalesForce/GetAllSalesForceDropDown",
                      cache: false
                  })
                      .success(function (data) {
                          //$scope.contactTypeDataSource = data.ContactType;
                          $scope.leadSourceDataSource = data.LeadSource;
                          $scope.industryDataSource = data.Industry;
                          $scope.ownershipDataSource = data.Ownership;
                          $scope.purchaseTimeFrameDataSource = data.PurchaseTimeframe;
                          $scope.purchaseProcessDataSource = data.PurchaseProcess;
                          //$scope.leadStatusDataSource = data.LeadStatus;
                          //$scope.accountTypeDataSource = data.AccountType;
                      });
                  $scope.Save = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $http({
                              method: 'POST',
                              url: '/Admin/SalesForce/UpdateSalesForces',
                              data: $scope.SalesForce
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $scope.GotoList();
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              })
                      }
                  };
                  $scope.GotoList = function () {
                      $location.path('/Opportunity');
                  };
              }
          })
          .when('/Opportunity/OpportunityView/:Id', {
              title: 'OpportunityView',
              setTitle: 'Opportunity',
              templateUrl: '/Admin/Opportunity/OpportunityView',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope, myService) {
                  $scope.MaterialBudget = [];
                  $http({
                      method: "GET",
                      url: "/Admin/SalesForce/GetSalesForcesById/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.SalesForce = data;
                          $scope.Activity.SalesForceId = $scope.SalesForce.Id;
                          $scope.SalesForce.ShowInformation = true;
                      });


                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllService",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.ServiceDataSource = data;
                      });

                  $http({
                      method: "GET",
                      url: "/Admin/Manpower/GetAllCostServiceByLeadId/" + $routeParams.Id,
                      // params: {id:$routeParams.Id},
                      cache: false
                  })
                      .success(function (data) {
                          $scope.MaterialBudget = data.MaterialBudgetData;
                          $scope.MaterialBudget.SumTotal = data.MaterialBudgetTotal;
                      });

                  $scope.addRowMaterialBudget = function () {
                      $scope.MaterialBudget.push({
                          "LeadId": $routeParams.Id,
                          "ServiceId": 0,
                          "Quantity": 0,
                          "Rate": 0,
                          "Total": 0,
                          "Cost": 0,
                          "Comment": "",
                      });
                  };
                  $scope.QuantityChange1 = function (data) {
                      var quantity = parseFloat(data.Quantity);
                      var totalUnit = 1;
                      var rate = parseFloat(data.Rate);
                      var total = parseFloat(data.Total);
                      var prevtotal = parseFloat(data.Total);
                      var sumTotal = parseFloat($scope.MaterialBudget.SumTotal);


                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }

                      if (data.Rate == "" || data.Rate == undefined) {
                          rate = 0;
                      }
                      if (data.Total == "" || data.Total == undefined) {
                          total = 0;
                      }
                      data.Total = (quantity * totalUnit * rate).toFixed(2);
                      var Total1 = parseFloat(data.Total);

                          $scope.MaterialBudget.SumTotal = sumTotal - prevtotal + Total1;

                  }

                  $scope.SaveMaterialBudget = function (datas) {
                      $http({
                          method: "POST",
                          url: "Admin/ManPower/InsertCostService",
                          data: datas,
                          cache: false
                      })
                          .success(function (data) {
                              if (data.Status) {
                                  datas.Id = data.Id;
                                  $rootScope.showSuccessNotification(data.Title, data.Message);
                                  $scope.GotoNew();
                              }
                              else {
                                  $rootScope.showErrorNotification(data.Title, data.Message);
                              }
                              // $rootScope.showPopUp();
                              //$rootScope.showSuccessNotification()
                              $scope.IsDisabled = false;
                          });
                  }
                  $scope.addTask = function () {
                      $scope.addTask_window.pin();
                      $scope.addTask_window.center();
                      $scope.addTask_window.open();
                  }
                  $scope.addAppointment = function () {
                      $scope.addAppointment_window.pin();
                      $scope.addAppointment_window.center();
                      $scope.addAppointment_window.open();
                  }
                  $scope.addPhoneCall = function () {
                      $scope.addPhoneCall_window.pin();
                      $scope.addPhoneCall_window.center();
                      $scope.addPhoneCall_window.open();
                  }
                  $scope.addNote = function () {
                      $scope.addNote_window.pin();
                      $scope.addNote_window.center();
                      $scope.addNote_window.open();
                  }
                  $scope.SaveTask = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;
                          $http({
                              method: "POST",
                              url: "Admin/Activity/InsertTask",
                              data: $scope.Activity,
                              cache: false
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $scope.addTask_window.close();
                                      $scope.ReloadGrid();
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                      $scope.Activity.Subject = "";
                                      $scope.Activity.Description = "";
                                      $scope.Activity.DateTime = "";
                                      $scope.Activity.RemainderDate = "";
                                      //$scope.courseDataSource = data.data;
                                      $scope.Activity.Priority = "";
                                      $scope.Activity.Status = "";
                                      //$scope.semesterCountValidation = false;
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              });
                      }
                  }
                  $scope.Clear = function () {
                      $scope.Activity.Subject = "";
                      $scope.Activity.Description = "";
                      $scope.Activity.DateTime = "";
                      $scope.Activity.RemainderDate = "";
                      $scope.Activity.Priority = "";
                      $scope.Activity.Status = "";
                  }
                 
                  $scope.SaveAppointment = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;
                          $http({
                              method: "POST",
                              url: "Admin/Activity/InsertAppointment",
                              data: $scope.Activity,
                              cache: false
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $scope.addAppointment_window.close();
                                      $scope.ReloadGrid();
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                      $scope.Activity.Subject = "";
                                      $scope.Activity.Description = "";
                                      $scope.Activity.DateTime = "";
                                      $scope.Activity.Location = "";
                                      $scope.Activity.SendNotificationEmail = "";
                                      $scope.Activity.Status = 0;
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              });
                      }
                  }
                  $scope.ClearAppointment = function () {
                      $scope.Activity.Subject = "";
                      $scope.Activity.Description = "";
                      $scope.Activity.DateTime = "";
                      $scope.Activity.Location = "";
                      $scope.Activity.SendNotificationEmail = "";
                      $scope.Activity.Status = "";
                  }
                  $scope.SavePhoneCall = function (event) {
                      event.preventDefault();
                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;
                          $http({
                              method: "POST",
                              url: "Admin/Activity/InsertPhoneCall",
                              data: $scope.Activity,
                              cache: false
                          })
                              .success(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.Status) {
                                      $scope.addPhoneCall_window.close();
                                      $scope.ReloadGrid();
                                      $rootScope.showSuccessNotification(data.Title, data.Message);
                                      $scope.Activity.Subject = "";
                                      $scope.Activity.Description = "";
                                      $scope.Activity.DateTime = "";
                                      $scope.Activity.CallType = "";
                                      $scope.Activity.CallSummary = "";
                                      $scope.Activity.Status = "";
                                  }
                                  else {
                                      $rootScope.showErrorNotification(data.Title, data.Message);
                                  }
                              });
                      }
                  }
                  $scope.ClearPhoneCall = function () {
                      $scope.Activity.Subject = "";
                      $scope.Activity.Description = "";
                      $scope.Activity.DateTime = "";
                      $scope.Activity.CallType = "";
                      $scope.Activity.CallSummary = "";
                      $scope.Activity.Status = "";
                  }
                  $scope.SaveNote = function () {
                      $scope.IsDisabled = true;
                      $http({
                          method: "POST",
                          url: "Admin/Activity/InsertNote",
                          data: $scope.Activity,
                          cache: false
                      })
                          .success(function (data) {
                              $scope.IsDisabled = false;
                              if (data.Status) {
                                  $scope.addNote_window.close();
                                  $scope.ReloadGrid();
                                  $rootScope.showSuccessNotification(data.Title, data.Message);
                                  $scope.Activity.Description = "";
                              }
                              else {
                                  $rootScope.showErrorNotification(data.Title, data.Message);
                              }
                          });
                  }
                  $scope.ReloadGrid = function () {
                      $scope.gridClosedData.read();
                      $scope.gridData.read();
                  }
                  $scope.ClearNote = function () {
                      $scope.Activity.Description = "";
                  }
                  $scope.EditSalesForce = function () {

                      //    $location.path('/SalesForce/Edit/' + $routeParams.Id);
                      $location.path('/Opportunity/Edit/' + $routeParams.Id);
                  }
                  $scope.DeleteSalesForces = function () {
                      //var Id = $scope.SalesForce.Id;
                      $http({
                          method: "GET",
                          url: "Admin/SalesForce/DeleteSalesForce/" + $routeParams.Id,
                          cache: false
                      })
                          .success(function (data) {
                              if (data.Status) {
                                  $rootScope.showSuccessNotification(data.Title, data.Message);
                                  $scope.GotoList();
                              }
                              else {
                                  $rootScope.showErrorNotification(data.Title, data.Message);
                              }
                          })
                  }
                  $scope.GotoList = function () {
                      $location.path('/SalesForce');
                  };
                  $scope.gridData = new kendo.data.DataSource({
                      type: "json",
                      transport: {
                          read: {
                              url: "/Admin/Activity/LoadOpenActivitiesOfOpportunity/" + $routeParams.Id,
                              type: "POST",
                              dataType: "json",
                          },
                      },
                      schema: {
                          data: "Data",
                          total: "Total",
                          errors: "Errors",
                          model: {
                              id: "Id",
                              fields: {
                                  ReaminderDate: { type: "date" },
                              }
                          }
                      },
                      error: function (e) {
                          display_kendoui_grid_error(e);
                          // Cancel the changes
                          this.cancelChanges();
                      },
                      pageSize: 5,
                      serverPaging: false,
                      serverFiltering: false,
                      serverSorting: false,
                  });

                  $scope.gridColumns = [{
                      field: "CreatedBy",
                      title: "CreatedBy",
                      width: 200,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                      {
                          field: "StringDateTime",
                          title: "Date",
                          width: 200,
                          filterable: {
                              cell: {
                                  showOperators: false,
                                  operator: "contains"
                              }
                          }
                      },
                  {
                      field: "Subject",
                      title: "Subject",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "Description",
                      title: "Description",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "eq"
                          }
                      }
                  },
                  {
                      field: "ActivityType",
                      title: "Type",
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      },
                      width: 150
                  },
                  {
                      field: "Priority",
                      title: "Priority",
                      width: 130,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "Status",
                      title: "Status",
                      width: 130,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  //{
                  //    field: "CallType",
                  //    title: "CallType",
                  //    width: 150,
                  //    filterable: {
                  //        cell: {
                  //            showOperators: false,
                  //            operator: "contains"
                  //        }
                  //    }
                  //},
                  {
                      width: 110,
                      template: '<div class="ui-group-buttons"><a class="btn btn-inverse" data-rel="tooltip" tooltip-placement="Top" tooltip="EditActivity" href="\\#/Activity/#=ActivityType#/Edit/#=Id#"><i class="fa fa-edit icon-only"></i></a><div class="or"></div><button class="btn btn-primary" type="button" data-rel="tooltip" tooltip-placement="left" tooltip="CloseActivity" ng-click="CloseActivity(#=Id#)"><i class="fa fa-times-circle"></i></button></div>',
                      attributes: { style: "text-align:center" }
                  }]

                  $scope.CloseActivity = function (id) {
                      $http({
                          method: "GET",
                          url: "/Admin/Activity/UpdateActivityStatus/" + id,
                          cache: false
                      })
                          .success(function (data) {
                              $scope.gridClosedData.read();
                              $scope.gridData.read();
                          });
                  }

                  ///////////////////Closed Activity Griddata
                  $scope.gridClosedData = new kendo.data.DataSource({
                      type: "json",
                      transport: {
                          read: {
                              url: "/Admin/Activity/LoadClosedActivitiesOfOpportunity/" + $routeParams.Id,
                              type: "POST",
                              dataType: "json",
                          },
                          destroy: {
                              url: "/Admin/Activity/DeleteActivities",
                              type: "POST",
                              dataType: "json",
                          },
                      },
                      schema: {
                          data: "Data",
                          total: "Total",
                          errors: "Errors",
                          model: {
                              id: "Id",
                              fields: {
                                  ReaminderDate: { type: "date" },
                              }
                          }
                      },
                      error: function (e) {
                          display_kendoui_grid_error(e);
                          // Cancel the changes
                          this.cancelChanges();
                      },
                      pageSize: 5,
                      serverPaging: false,
                      serverFiltering: false,
                      serverSorting: false,
                  });

                  $scope.gridClosedColumns = [{
                      field: "CreatedBy",
                      title: "CreatedBy",
                      width: 200,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "Subject",
                      title: "Subject",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "Description",
                      title: "Description",
                      width: 150,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "eq"
                          }
                      }
                  },
                  {
                      field: "ActivityType",
                      title: "Type",
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      },
                      width: 150
                  },
                  {
                      field: "Priority",
                      title: "Priority",
                      width: 130,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  {
                      field: "Status",
                      title: "Status",
                      width: 130,
                      filterable: {
                          cell: {
                              showOperators: false,
                              operator: "contains"
                          }
                      }
                  },
                  //{
                  //    field: "CallType",
                  //    title: "CallType",
                  //    width: 150,
                  //    filterable: {
                  //        cell: {
                  //            showOperators: false,
                  //            operator: "contains"
                  //        }
                  //    }
                  //},
                  {
                      width: 110,
                      template: '<div class="ui-group-buttons"><a class="btn btn-inverse" data-rel="tooltip" tooltip-placement="Top" tooltip="EditActivity" href="\\#/Activity/#=ActivityType#/Edit/#=Id#"><i class="fa fa-edit icon-only"></i></a><div class="or"></div><button class="btn btn-primary k-grid-delete" type="button" data-rel="tooltip" tooltip-placement="left" tooltip="Delete"><i class="fa fa-trash-o icon-only"></i></button></div>',
                      attributes: { style: "text-align:center" }
                  }]

                  $scope.SearchQuotation = {};
                  $scope.gridQuotationData = new kendo.data.DataSource({
                      type: "json",
                      transport: {
                          read: function (e) {
                              $scope.SearchQuotation.SalesForceId = $routeParams.Id;
                              $scope.SearchQuotation.BillType = "SQ";

                              $http({ method: 'POST', url: '/Admin/Bill/LoadSalesBill', data: $scope.SearchQuotation }).
                                  success(function (data, status, headers, config) {
                                      e.success(data);
                                  }).
                                  error(function (data, status, headers, config) {
                                      e.error(data);
                                  });
                          },
                          parameterMap: function (data, operation) {
                              if (operation != "read") {
                                  return data;
                              } else {
                                  //for some reasons only such "Filter" data be parsed
                                  return JSON.stringify(data);
                              }
                          }

                      },
                      schema: {
                          data: "Data",
                          total: "Total",
                          errors: "Errors",
                          model: {
                              id: "Id",
                              fields: {
                                  Name: { type: "string", validation: { required: true } },
                                  BillDate: { type: "date", editable: false, visible: false, hidden: true, format: "{0:d}" },
                              }
                          }
                      },
                      requestEnd: function (e) {
                          if (e.type == "read") {
                              var response = e.response;
                              if (response) {
                                  //store extra data
                                  reportAggregates = e.response["ExtraData"];
                                  $scope.IsTaxEnabled = reportAggregates['IsTaxEnabled'];

                              }
                          }
                      },
                      error: function (e) {
                          display_kendoui_grid_error(e);
                          // Cancel the changes
                          this.cancelChanges();
                      },
                      pageSize: 10,
                      serverPaging: true,
                      serverFiltering: false,
                      serverSorting: false,
                  });
                  $scope.gridQuotationColumns = [{
                      field: "BillNumber",
                      title: myService.GetResource("Admin.Bill.BillNumber"),
                      width: 100
                  },
                  {
                      field: "StringDate",
                      title: myService.GetResource("Admin.Bill.BillDate"),
                      width: 100
                  },
                  {
                      field: "Customer",
                      title: myService.GetResource("Admin.Bill.CustomerId"),
                      footerTemplate: '<span class=\'gridAlignment\'>' + myService.GetResource("Admin.Total") + ' :</span>',
                      width: 150

                  },

                  {
                      field: "CreatedBy",
                      title: myService.GetResource("Admin.Bill.CreatedBy"),
                      width: 180,
                      hidden: true
                  },
                  {
                      field: "BillTotal",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillTotal-block\"></span></div>',
                      title: myService.GetResource("Admin.Bill.BillTotal"),
                      attributes: { style: "text-align:right" },
                      width: 150
                  },
                  {
                      field: "BillTax",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillTax-block\"></span></div>',
                      title: myService.GetResource("Admin.Bill.BillTax"),
                      attributes: { style: "text-align:right" },
                      width: 100
                  },
                  {
                      field: "Discount",
                      title: myService.GetResource("Admin.Bill.Discount"),
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumDiscount-block\"></span></div>',
                      attributes: { style: "text-align:right" },
                      width: 100
                  },
                  {
                      field: "BillGrandTotal",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillGrandTotal-block\"></span></div>',
                      title: myService.GetResource("Admin.Bill.BillGrandTotal"),
                      attributes: { style: "text-align:right" },
                      width: 150,
                      menu: false,
                  },
                  {
                      field: "Balance",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBalance-block\"></span></div>',
                      title: myService.GetResource("Admin.Bill.Balance"),
                      width: 100,
                      attributes: { style: "text-align:right" },
                      hidden: true

                  },
                  {
                      field: "BillStatus",
                      title: myService.GetResource("Admin.Bill.BillStatus"),
                      width: 100,
                      hidden: true,
                      template: '# if( BillStatus=="Paid") {#<span class="label label-paid  arrowed-in-right arrowed-in">#:BillStatus#</span># } else {#<span class="label label-pending  arrowed-in-right arrowed-in">#:BillStatus#</span>#} #'
                  },
                  {
                      template: '<div class="ui-group-buttons"><a title="Edit" href="\\#/SalesQuotation/Edit/#=Id#" class="btn btn-inverse"><i class="fa fa-edit icon-only" ></i></a><div class="or" ></div><button title="Delete" class="btn btn-primary k-grid-delete" type="button" ><i class="fa fa-trash-o icon-only"></i></button><div class="or" ></div><a title="Print" ng-click="billPrint(#=Id#,$event)" class="btn btn-info PrintWindow"><i class="fa fa-print"></i></a><div class="or"></div><a title="Send Email" ng-click="SendInvoice(#=Id#,$event)" class="btn btn-danger SendEmailWindow"><i class="fa fa-paper-plane"></i></a></div>',
                      width: 200,
                      attributes: { style: "text-align:center" }
                  }]

                  $scope.onDataBound = function (e) {
                      if (reportAggregates != "") {
                          for (var key in reportAggregates) {
                              $('#aggregator-sumBillGrandTotal-block').text(reportAggregates['SumBillGrandTotal']);
                              $('#aggregator-sumBillTax-block').text(reportAggregates['SumBillTax']);
                              $('#aggregator-sumBillTotal-block').text(reportAggregates['SumBillTotal']);
                              $('#aggregator-sumDiscount-block').text(reportAggregates['SumDiscount']);
                              $('#aggregator-sumBalance-block').text(reportAggregates['SumBalance']);

                          }
                          if (!reportAggregates['IsTaxEnabled']) {
                              $scope.BillGrid.hideColumn("BillTax");
                          }
                          // this.expandRow(this.tbody.find("tr.k-master-row").first());
                      }
                      $scope.BillGrid.expandRow($scope.BillGrid.tbody.find("tr:first"));

                      $scope.BillGrid.thead.find("[data-field=BillNumber]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=StringDate]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=Customer]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=CreatedBy]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=BillTotal]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=BillTax]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=Discount]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=Balance]>.k-header-column-menu").remove();
                      $scope.BillGrid.thead.find("[data-field=BillStatus]>.k-header-column-menu").remove();
                  }
                  $scope.CreateSalesQuotation = function (e) {
                      $location.path('/SalesQuotation/Create').search({ SALESFORCEID: $routeParams.Id });

                  }

              }
          })











          //StockTransfer
          .when('/StockTransfer', {
              title: 'Admin.Breadcrumb.StockTransfer',
              templateUrl: '/Admin/Bill/StockTransfer',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {


                  $scope.Search = {};
                  $scope.SendInvoiceEmail = {};
                  $scope.IsTaxEnabled = true;

                  $http({
                      method: "GET",
                      url: "/Admin/DTProductStock/GetAllWareHouse",
                      cache: false
                  })
                      .success(function (data) {
                          $scope.productWarehouseDataSource = data;
                      });

                  $scope.productDataSource = {
                      placeholder: "---Search By Products---",
                      dataTextField: "Name",
                      dataValueField: "Id",
                      //valuePrimitive: true,
                      autoBind: false,
                      dataSource: {
                          transport: {
                              read: {
                                  dataType: "json",
                                  url: "/Admin/Bill/GetAllProductList"
                              }
                          }
                      }
                  };



                  var reportAggregates = "";
                  $scope.toolbarTemplate = [{ template: "<a class='btn btn-success btn-line tooltip-success' data-rel='tooltip' tooltip-placement='right' tooltip='Add New Opening Stock' ng-click='CreateStockTransfer()'  style='padding:4px 8px 4px 12px;' ><i class='fa fa-plus'></i></a>" }]

                  $scope.gridData = new kendo.data.DataSource({
                      type: "json",
                      transport: {
                          read: function (e) {

                              $scope.Search.page = e.data.page;
                              $scope.Search.pageSize = e.data.pageSize;
                              $scope.Search.take = e.data.take;
                              $scope.Search.skip = e.data.skip;
                              $scope.Search.sort = e.data.sort;
                              $scope.Search.filter = e.data.filter;

                              $http({ method: 'POST', url: '/Admin/Bill/LoadSalesBill', data: $scope.Search }).
                                  then(function onSuccess(data, status, headers, config) {
                                      e.success(data.data);
                                  }).
                                  catch(function onError(data, status, headers, config) {
                                      e.error(data.data);
                                  });
                          },
                          destroy: function (e) {
                              $http({
                                  method: 'POST',
                                  url: '/Admin/Bill/DeleteBill/' + e.data.Id,
                              }).
                                  then(function onSuccess(data, status, headers, config) {
                                      if (data.data.Status) {
                                          $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      } else {
                                          $rootScope.showErrorNotification(data.data.Title, data.data.Message);

                                      }
                                      e.success(data.data);
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.gridData.read($scope.Search);

                                  }).
                                  catch(function onError(data, status, headers, config) {
                                      e.error(data.data);

                                  });

                          },
                          parameterMap: function (data, operation) {
                              if (operation != "read") {
                                  return data;
                              } else {
                                  //for some reasons only such "Filter" data be parsed
                                  return JSON.stringify(data);
                              }
                          }

                      },
                      schema: {
                          data: "Data",
                          total: "Total",
                          errors: "Errors",
                          model: {
                              id: "Id",
                              fields: {
                                  // Name: { type: "string", validation: { required: true } },
                                  BillDate: { type: "date", editable: false, visible: false, hidden: true, format: "{0:d}" },
                              }
                          }
                      },
                      requestEnd: function (e) {
                          if (e.type == "read") {
                              var response = e.response;
                              if (response) {
                                  //store extra data
                                  reportAggregates = e.response["ExtraData"];
                                  $scope.IsTaxEnabled = reportAggregates['IsTaxEnabled'];

                              }
                          }
                      },
                      error: function (e) {
                          display_kendoui_grid_error(e);
                          // Cancel the changes
                          this.cancelChanges();
                      },
                      pageSize: 10,
                      serverPaging: true,
                      serverFiltering: false,
                      serverSorting: false,
                  });
                  $scope.gridColumns = [{
                      field: "BillNumber",
                      title: "BILL.NO",
                      width: 100
                  },
                  {
                      field: "StringDate",
                      title: "DATE",
                      width: 100,
                      footerTemplate: '<span class=\'gridAlignment\'>Total :</span>',

                  },
                  {
                      field: "CreatedBy",
                      title: "CREATED BY",
                      width: 180,
                      hidden: true
                  },
                  {
                      field: "FromWareHouse",
                      title: "FromWareHouse",
                      width: 180,

                  },
                  {
                      field: "WareHouse",
                      title: "To Location",
                      width: 180,

                  },
                  {
                      field: "BillTotal",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillTotal-block\"></span></div>',
                      title: "TOTAL",
                      attributes: { style: "text-align:right" },
                      width: 120,
                      hidden: true
                  },
                  {
                      field: "BillTax",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillTax-block\"></span></div>',
                      title: "TAX",
                      attributes: { style: "text-align:right" },
                      width: 100,
                      hidden: true
                  },
                  {
                      field: "Discount",
                      title: "DISCOUNT",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumDiscount-block\"></span></div>',
                      attributes: { style: "text-align:right" },
                      width: 100,
                      hidden: true
                  },
                  {
                      field: "BillGrandTotal",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillGrandTotal-block\"></span></div>',
                      title: "G TOTAL",
                      attributes: { style: "text-align:right" },
                      width: 150,
                      hidden: true
                  },
                  {
                      template: '<div class="ui-group-buttons"><a title="Edit" href="\\#/StockTransfer/Edit/#=Id#" class="btn btn-inverse" ><i class="fa fa-edit icon-only"></i></a><div class="or"></div><button title="Delete" class="btn btn-primary k-grid-delete" type="button"><i class="fa fa-trash-o icon-only"></i></button><div class="or"></div><a title="Print" ng-click="billPrint(#=Id#,$event)" class="btn btn-info PrintWindow"><i class="fa fa-print"></i></a></div>',

                      //template: '<div class="ui-group-buttons"><a title="Edit" href="\\#/StockTransfer/Edit/#=Id#" class="btn btn-inverse" ><i class="fa fa-edit icon-only"></i></a><div class="or"></div><button title="Delete" class="btn btn-primary k-grid-delete" type="button"><i class="fa fa-trash-o icon-only"></i></button><div class="or"></div><a title="Print" ng-click="billPrint(#=Id#,$event)" class="btn btn-info PrintWindow"><i class="fa fa-print"></i></a><div class="or"></div><a title="Send Email" ng-click="SendInvoice(#=Id#,$event)" class="btn btn-danger SendEmailWindow"><i class="fa fa-paper-plane"></i></a></div>',
                      width: 200,
                      attributes: { style: "text-align:center" }
                  }
                  ]

                  $scope.onDataBound = function (e) {
                      if (reportAggregates != "") {
                          for (var key in reportAggregates) {
                              $('#aggregator-sumBillGrandTotal-block').text(reportAggregates['SumBillGrandTotal']);
                              $('#aggregator-sumBillTax-block').text(reportAggregates['SumBillTax']);
                              $('#aggregator-sumBillTotal-block').text(reportAggregates['SumBillTotal']);
                              $('#aggregator-sumDiscount-block').text(reportAggregates['SumDiscount']);
                              $('#aggregator-sumBalance-block').text(reportAggregates['SumBalance']);

                          }
                          if (!reportAggregates['IsTaxEnabled']) {
                              $scope.BillGrid.hideColumn("BillTax");
                          }
                          // this.expandRow(this.tbody.find("tr.k-master-row").first());
                      }
                      $scope.BillGrid.expandRow($scope.BillGrid.tbody.find("tr:first"));
                  }

                  $scope.CreateStockTransfer = function (e) {
                      $location.path('/CreateStockTransfer');
                  };

                  $scope.submit = function (event) {
                      event.preventDefault();
                      $scope.gridData.read($scope.Search);
                  }

                  $scope.ClearMe = function (event) {
                      event.preventDefault();
                      $scope.Search.BillNumber = "";
                      $scope.Search.FromDate = "";
                      $scope.Search.ToDate = "";
                      $scope.Search.ProductIds = null;
                      //$scope.multiselect.value().slice();
                      $scope.Search.BillGrandTotal = "";
                      $scope.Search.Narration = "";
                      document.getElementById("BillNumber").focus();
                  }

                  $scope.exportToExcel = function (event) {

                      var result = "";
                      if ($scope.Search.ProductIds != null || $scope.Search.ProductIds != undefined) {

                          for (var i = 0; i < $scope.Search.ProductIds.length; i++) {
                              result = result + "&productIds=" + $scope.Search.ProductIds[i];
                          }
                      }

                      var fromDate = kendo.toString(kendo.parseDate($scope.Search.FromDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');
                      var toDate = kendo.toString(kendo.parseDate($scope.Search.ToDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');

                      var serializeForm = "&BillTypeId=" + $scope.Search.BillTypeId + "&BillNumber=" + $scope.Search.BillNumber + "&FromDate=" + fromDate + "&ToDate=" + toDate + "&productIds[]=" + result + "&BillGrandTotal=" + $scope.Search.BillGrandTotal + "&Narration=" + $scope.Search.Narration;

                      window.location.href = '/Admin/Bill/ExportExcelOpeningStock?' + serializeForm;
                      event.preventDefault();
                  }

                  $scope.toPdf = function (event) {
                      event.preventDefault();

                      var result = "";
                      if ($scope.Search.ProductIds != null || $scope.Search.ProductIds != undefined) {

                          for (var i = 0; i < $scope.Search.ProductIds.length; i++) {
                              result = result + "&productIds=" + $scope.Search.ProductIds[i];
                          }
                      }

                      var fromDate = kendo.toString(kendo.parseDate($scope.Search.FromDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');
                      var toDate = kendo.toString(kendo.parseDate($scope.Search.ToDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');

                      var serializeForm = "&BillTypeId=" + $scope.Search.BillTypeId + "&BillNumber=" + $scope.Search.BillNumber + "&FromDate=" + fromDate + "&ToDate=" + toDate + "&productIds[]=" + result + "&BillGrandTotal=" + $scope.Search.BillGrandTotal + "&Narration=" + $scope.Search.Narration;

                      window.open('/Admin/Bill/DownloadInvoiceStockListAsPdf?' + serializeForm);
                  }

                  $scope.billPrint = function (id, event) {

                      if (id == "" || id == undefined) {
                          return;
                      }

                      window.open('/Admin/Bill/DownloadStockTransferAsPdf/' + id, '_blank');
                      event.preventDefault();
                  }

                  $scope.toPrint = function (event) {

                      var gridElement = $(".k-grid");
                      printableContent = '',
                          win = window.open('', '', 'width=800, height=500'),
                          doc = win.document.open();

                      var htmlStart =
                          '<!DOCTYPE html>' +
                          '<html>' +
                          '<head>' +
                          '<meta charset="utf-8" />' +
                          '<title>Opening Stock</title>' +
                          '<link href="http://cdn.kendostatic.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" /> ' +
                          '<style>' +
                          'html { font: 11pt sans-serif; }' +
                          '.k-grid { border-top-width: 0; }' +
                          '.k-grid, .k-grid-content { height: auto !important; }' +
                          '.k-grid-content { overflow: visible !important; }' +
                          'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                          '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                          '.k-grid-toolbar, .k-grid-pager, .k-grouping-header, .k-filter-row, .k-master-row .ui-group-buttons { display: none; }' +
                          '</style>' +
                          '</head>' +
                          '<body>';

                      var htmlEnd =
                          '</body>' +
                          '</html>';

                      var gridHeader = gridElement.children('.k-grid-header');
                      if (gridHeader[0]) {
                          var thead = gridHeader.find('thead').clone().addClass('k-grid-header');
                          printableContent = gridElement
                              .clone()
                              .children('.k-grid-header').remove()
                              .end()
                              .children('.k-grid-content')
                              .find('table')
                              .first()
                              .children('tbody').before(thead)
                              .end()
                              .end()
                              .end()
                              .end()[0].outerHTML;
                      } else {
                          printableContent = gridElement.clone()[0].outerHTML;
                      }

                      doc.write(htmlStart + printableContent + htmlEnd);
                      doc.close();
                      win.print();
                      win.close();
                  }



                  $scope.getIndexOf = function (arr, val, prop) {
                      var l = arr.length,
                          k = 0;
                      for (k = 0; k < l; k = k + 1) {
                          if (arr[k][prop] === val) {
                              return k;
                          }
                      }
                      return -1;
                  };

                  $scope.onError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };

                  $scope.SendInvoice = function (id, event) {
                      event.preventDefault();

                      if (id == "" || id == undefined) {
                          return;
                      }

                      $scope.sendEmail.refresh();
                      $scope.sendEmail.title("Send Email");
                      $scope.sendEmail.open();
                      $scope.sendEmail.center();

                      $scope.SendInvoiceEmail.AttachmentFile = [];

                      $(".k-upload-files").remove();
                      $(".k-upload-status").remove();
                      $(".k-upload.k-header").addClass("k-upload-empty");
                      $(".k-upload-button").removeClass("k-state-focused");

                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetEmailDetailsByBillId",
                          params: { billId: id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.SendInvoiceEmail = data.data;
                          });


                      $scope.SendEmail = function (event) {
                          event.preventDefault();

                          if (id == "" || id == undefined) {
                              return;
                          }

                          if ($scope.sendEmailValidator.validate()) {
                              $scope.IsSendDisabled = true;
                              //$scope.SendInvoiceEmail.AttachmentFile = $scope.files;
                              //var formData = new FormData(document.getElementById("attachMentForm"));
                              $http({
                                  method: "POST",
                                  url: "Admin/Bill/SendInvoice",
                                  data: { billId: id, model: $scope.SendInvoiceEmail },
                                  //data: formData,
                                  cache: false,
                              })
                                  .then(function (data) {
                                      if (data.Status) {
                                          $rootScope.showSuccessNotification(data.data.Title, data.Message);
                                          $scope.sendEmail.close();
                                          event.preventDefault();
                                      } else {
                                          $rootScope.showErrorNotification(data.data.Title, data.Message);
                                      }
                                      $scope.IsSendDisabled = false;
                                  });
                          }
                      };

                      $scope.CancelSend = function (event) {
                          event.preventDefault();
                          $scope.sendEmail.close();

                      };

                  };

                  $scope.getBillProduct = function (dataItem) {
                      return {
                          dataSource: {
                              type: "json",
                              transport: {
                                  read: {
                                      url: "/Admin/Bill/GetBilledProduct",
                                      type: "POST",
                                      dataType: "json",
                                      data: { id: dataItem.Id }
                                  },
                              },
                              schema: {
                                  data: "Data",
                                  errors: "Errors",
                                  model: {
                                      id: "Id",
                                      fields: {
                                          Product: { type: "string", validation: { required: true } },
                                      }
                                  }
                              },
                              error: function (e) {
                                  display_kendoui_grid_error(e);
                                  // Cancel the changes
                                  this.cancelChanges();
                              },
                              serverPaging: true,
                              serverSorting: false,
                              serverFiltering: false,
                              pageSize: 5,
                              aggregate: [{ field: "Quantity", aggregate: "sum" },
                              { field: "Amount", aggregate: "sum" },
                              { field: "TaxTotal", aggregate: "sum" },
                              { field: "TotalAmount", aggregate: "sum" }

                              ],
                              //  filter: { field: "EmployeeID", operator: "eq", value: dataItem.EmployeeID }
                          },
                          scrollable: false,
                          sortable: true,
                          pageable: true,
                          columns: [{
                              field: "Product",
                              width: 200,
                          },
                          //{
                          //    field: "WareHouse",
                          //    width: 200,
                          //    footerTemplate: '<div>Total :</div>',
                          //},
                          {
                              field: "MeasuringUnit",
                              title: "Unit",
                              width: 80,
                              footerTemplate: '<span class=\'gridAlignment\'>Total :</span>'
                          },
                          {
                              field: "Quantity",
                              title: "Qty",
                              aggregates: ["sum"],
                              footerTemplate: "<span class=\'gridAlignment\'>#=sum#</span>",
                              attributes: { style: "text-align:right" },
                              width: 80
                          },
                              //{
                              //    field: "MRP",
                              //    width: 100,
                              //    attributes: { style: "text-align:right" },
                              //},
                              //{
                              //    field: "Discount",
                              //    title: "Disc (%)",
                              //    width: 80,
                              //    attributes: { style: "text-align:center" },
                              //},
                              //{
                              //    field: "Tax",
                              //    title: "Tax",
                              //    width: 100,
                              //    hidden: $scope.IsTaxEnabled ? false : true
                              //},
                              //{
                              //    field: "TaxPrice",
                              //    title: "Tax Rate",
                              //    width: 80,
                              //    attributes: { style: "text-align:right" },
                              //    hidden: $scope.IsTaxEnabled ? false : true
                              //},
                              //{
                              //    field: "Amount",
                              //    aggregates: ["sum"],
                              //    // footerTemplate: " #= sum #",
                              //    footerTemplate: "<span class=\'gridAlignment\'>#= sum #</span>",
                              //    attributes: { style: "text-align:right" },
                              //    width: 100
                              //},
                              //{
                              //    field: "TaxTotal",
                              //    aggregates: ["sum"],
                              //    // footerTemplate: " #= sum #",
                              //    title: "Tax Total",
                              //    footerTemplate: "<span class=\'gridAlignment\'>#= sum #</span>",
                              //    attributes: { style: "text-align:right" },
                              //    width: 100,
                              //    hidden: $scope.IsTaxEnabled ? false : true

                              //},
                              //{
                              //    field: "TotalAmount",
                              //    aggregates: ["sum"],
                              //    //footerTemplate: " #= sum #",
                              //    footerTemplate: "<span class=\'gridAlignment\'>#= sum #</span>",
                              //    attributes: { style: "text-align:right" },
                              //    title: "Total Amount",
                              //    width: 120
                              //}
                          ]
                      };
                  };


              }
          })

          //CreateStockTransfer
          .when('/CreateStockTransfer', {
              title: 'Admin.Breadcrumb.StockTransfer',
              setTitle: 'Create',
              templateUrl: '/Admin/Bill/CreateOrUpdateStockTransfer',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope ,myService) {

                  $scope.MeasuringUnits = [];
                  $scope.Bill = {};
                 //$scope.SendInvoiceEmail = {};
                  $scope.IsTaxShow = true;
                  $scope.IsReadOnly = false;

                  $scope.Bill.CustomFieldMappingData = [];
                  $scope.Bill.BillDetailsModel = {};
                  //myService.GetCustomField("StockTransferDetails").then(function (data) {
                  //    $scope.Bill.CustomFieldMappingData = data;
                  //});

                  $scope.editRow = function (data) {
                      data.MakeReadOnly = true;
                  }
                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllWareHouse",
                      cache: false
                  })
                      .then(function (data) {
                          $scope.wareHouseDataSource = data.data;

                          $http({
                              method: "GET",
                              url: "/Admin/Bill/GetBillDetails",
                              params: { billTypeId: $scope.Bill.BillTypeId },
                              cache: false
                          })

                         
                              .then(function (data) {
                                  $scope.Bill = data.data;
   
                                  $scope.Bill.BillDate = kendo.toString(kendo.parseDate(data.data.StringDate), data.data.SystemDateFormat);
                                  if ($scope.Bill.BillNumber != null) {
                                      $scope.IsReadOnly = true;
                                  }

                                  myService.GetCustomField("StockTransfer").then(function (data) {
                                      $scope.Bill.CustomFieldMappingData = data;
                                  });
                                  for (var i = 0; i < 5; i++) {

                                      $scope.Bill.BillDetailsModel.push({
                                          "ProductId": 0,
                                          "MeasuringUnitId": 0,
                                          "Quantity": 0,
                                          "MRP": 0,
                                          "Discount": 0,
                                          "Price": 0,
                                          "PPrice": 0,
                                          "Amount": 0,
                                          "TaxPrice": 0,
                                          "TaxId": 0,
                                          "TaxTotal": 0,
                                          "TotalAmount": 0,
                                          "Description": "",
                                          "IsDeleted": false,
                                          "MakeReadOnly": true,
                                      });
                                  }

                                  $scope.customProductOptions = {
                                      // optionLabel: "--- Select Product ---",
                                      //dataSource: $scope.productDataSource,
                                      dataTextField: $scope.Bill.ProductFilterBy,
                                      dataValueField: "Id",
                                      // valuePrimitive: true,
                                      headerTemplate: '<div class="dropdown-headerCustomProduct">' +
                                          '<span><button type="button" class="btn btn-primary" ng-click="addProdct(data)" style="padding:1px 10px;height:19px;"><i class="fa fa-plus icon-only"></i></button></span>' +
                                          '<span class="k-widget k-header secondHeaderSpan">Name</span>' +
                                          '<span class="k-widget k-header">Code</span>' +
                                          '<span class="k-widget k-header">PurchasePrice</span>' +
                                          '<span class="k-widget k-header">Tax Rate</span>' +
                                          '</div>',
                                      //'<div>' +
                                      //'<button type="button" class="btn btn-primary" ng-click="addProdct(data)" style="width:353px">Add New Product</button>' +
                                      //'</div>',

                                      // using {{angular}} templates:
                                      valueTemplate: '<span>{{dataItem.Name}}</span>',
                                      template: '<div class="customProductSpan"><span></span><span class="k-state-default secondSpan">{{dataItem.Name}}</span>' + '<span class="k-state-default codeSpan">{{dataItem.Code}}</span>' +
                                          '<span class="k-state-default priceSpan">{{dataItem.PurchasePrice}}</span>' + '<span class="k-state-default salesAndTaxSpan">{{dataItem.TaxRate}}</span></div>'
                                  };
                              });

                      });

                 
                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllProduct",
                      cache: false
                  })
                      .then(function (data) {
                          $scope.AllMyProducts = data.data;
                      });


                  $scope.customUnitOptions = {

                      //placeholder: "Select Measuring Unit...",
                      dataTextField: "ShortName",
                      dataValueField: "MeasuringUnitId",
                      //select: MeasuringUnit_OnChange,
                      headerTemplate: '<div class="dropdown-headerUnit">' +
                          '<span class="k-widget k-header">Name </span>' +
                          '<span class="k-widget k-header">Purchase Price</span>' +
                          '</div>',
                      valueTemplate: '<span>{{dataItem.ShortName}}</span>',
                      template: '<div class="customUnitSpan"><span class="k-state-default">{{dataItem.MeasuringUnit}}</span><span class="k-state-default">{{dataItem.PurchasePrice}}</span></div>',

                  };





                  $scope.numberOnly = function (event) {
                      if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 110 || (!event.shiftKey && event.keyCode == 190) || (!event.shiftKey && event.keyCode == 173) || (!event.shiftKey && event.keyCode == 189) ||
                          event.keyCode == 27 || event.keyCode == 13 ||
                          (event.keyCode == 65 && event.ctrlKey === true) ||
                          (event.keyCode == 67 && event.ctrlKey === true) ||
                          (event.keyCode == 86 && event.ctrlKey === true) ||
                          (event.keyCode == 90 && event.ctrlKey === true) ||
                          (event.keyCode >= 35 && event.keyCode <= 39)) {
                          return;
                      } else {
                          // If it's not a number stop the keypress
                          if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                              event.preventDefault();
                          }
                      }
                  };

                  $scope.addProdct = function (data) {
                      //alert(data.Quantity);
                      //event.preventDefault();
                      $scope.Product = {};
                      $scope.Product.ProductMaterialsModel = [];

                      $scope.addProductWindow.refresh();
                      $scope.addProductWindow.title("Add New Product");
                      $scope.addProductWindow.open();
                      $scope.addProductWindow.center();


                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetMeasuringUnitStauts",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.Product.IsMeasuringUnitRequired = billData.data.IsMeasuringUnitRequired;
                              $scope.Product.PrimaryMeasuringUnitId = billData.data.PrimaryMeasuringUnitId;
                              $scope.Product.IsTaxEnabled = billData.data.IsTaxEnabled;

                              $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.categoryDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductTaxCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.taxDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllPrimaryMeasuringUnit",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.primaryMeasuringUnitDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllRawMaterials",
                          cache: false
                      })
                          .then(function (data) {
                              $scope.rawMaterialDataSource = data.data;
                          });

                      $scope.measuringUnitChange = function () {

                          if ($scope.Product.PrimaryMeasuringUnitId == 0 || $scope.Product.PrimaryMeasuringUnitId == "" || $scope.Product.PrimaryMeasuringUnitId == undefined) {
                              $scope.Product.MeasuringUnitPriceModel = null;
                              return;
                          }

                          $http({
                              method: "POST",
                              url: "/Admin/DTProduct/GetAllMeasuringUnitSiblings",
                              params: { productId: $scope.Product.Id, measuringUnitId: $scope.Product.PrimaryMeasuringUnitId },
                              cache: false
                          })
                              .then(function (billData) {
                                  var salesPrice = parseFloat($scope.Product.SalesPrice);
                                  var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                                  if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                                      salesPrice = 0;
                                  }

                                  if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                                      purchasePrice = 0;
                                  }

                                  for (var i = 0; i < billData.data.length; i++) {
                                      billData.data[i].SalesPrice = (salesPrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                      billData.data[i].PurchasePrice = (purchasePrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                  }
                                  $scope.Product.MeasuringUnitPriceModel = billData.data;

                              })

                      };

                      $scope.productPriceChange = function () {

                          var salesPrice = parseFloat($scope.Product.SalesPrice);
                          var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                          if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                              salesPrice = 0;
                          }

                          if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                              purchasePrice = 0;
                          }

                          if ($scope.Product.MeasuringUnitPriceModel != undefined) {
                              for (var i = 0; i < $scope.Product.MeasuringUnitPriceModel.length; i++) {
                                  $scope.Product.MeasuringUnitPriceModel[i].SalesPrice = (salesPrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                                  $scope.Product.MeasuringUnitPriceModel[i].PurchasePrice = (purchasePrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                              }
                          }
                      };

                      $scope.ClearProduct = function () {
                          //event.preventDefault();

                          $scope.Product.Name = "";
                          $scope.Product.Code = "";
                          $scope.Product.Description = "";
                          $scope.Product.ProductCategoryId = "";
                          $scope.Product.TaxCategoryId = "";
                          $scope.Product.ISTaxExempt = 0;
                          $scope.Product.SalesPrice = "";
                          $scope.Product.PurchasePrice = "";
                          $scope.Product.MinStockQuantity = "";
                          $scope.Product.MRP = "";
                          $scope.Product.MinSalesRate = "";
                          $scope.Product.IsActive = 0;
                          $scope.Product.LowStockNotification = 0;
                          $scope.Product.IsAllowBatch = 0;
                          $scope.Product.IsMultipleMeasuringUnitEnable = 0;
                          $scope.Product.PrimaryMeasuringUnitId = "";
                          $scope.Product.MeasuringUnitPriceModel = null;
                          $scope.Product.IsProduction = 0;

                          $scope.Product.ProductMaterialsModel = [{ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false }];


                          document.getElementById("Name").focus();
                      };

                      $scope.addMaterialRow = function () {
                          $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                      };

                      $scope.removeMaterialRow = function (data) {

                          var index = $scope.Product.ProductMaterialsModel.indexOf(data);
                          $scope.Product.ProductMaterialsModel.splice(index, 1);
                      };

                      $scope.SaveProduct = function (event) {
                          event.preventDefault();

                          // alert(data.ProductId);
                          if ($scope.Product.validator.validate()) {
                              $scope.IsProductDisabled = true;
                              $http({
                                  method: "POST",
                                  url: "Admin/DTProduct/InsertBillProductPopup",
                                  data: $scope.Product,
                                  cache: false
                              })
                                  .then(function (productData) {
                                      if (productData.Status) {
                                          $rootScope.showSuccessNotification(productData.Title, productData.Message);

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetAllProduct",
                                              cache: false
                                          })
                                              .then(function (billData) {
                                                  $scope.AllMyProducts = billData.data;
                                                  //data.AllMyProducts = $scope.AllMyBillProducts;
                                              });

                                          var index = $scope.Bill.BillDetailsModel.indexOf(data)
                                          //$scope.AllMyProducts.read();
                                          data.ProductId = productData.Id;
                                          //$scope.Bill.BillDetailsModel[index].ProductId = productData.ProductId;

                                          $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetMeasuringUnitByProductId",
                                              params: { productId: productData.Id },
                                              cache: false
                                          })
                                              .then(function (measureData) {
                                                  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = measureData.data;
                                              });

                                          //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                                          //if (currencyRate == "" || currencyRate == undefined || currencyRate == 0) {
                                          //    $scope.Bill.CurrencyRate = 0;
                                          //    currencyRate = 1;
                                          //}

                                          data.MeasuringUnitId = productData.PrimaryMeasuringUnitId;
                                          var taxPrice = parseFloat(productData.TaxRate);
                                          data.TaxPrice = taxPrice;

                                          var price = 0;
                                          var tax = 0;
                                          var rate = 0;

                                          rate = parseFloat(productData.PurchasePrice);

                                          // if (rate > 0) {

                                          // data.MRP = productData.PurchasePrice.toString();
                                          var convertedCurrencyRate = rate;
                                          data.PPrice = productData.PurchasePrice.toString();
                                          data.MRP = convertedCurrencyRate.toFixed(2);

                                          var quantity = parseFloat(data.Quantity);
                                          var discount = parseFloat(data.Discount);

                                          if (data.Quantity == "" || data.Quantity == undefined) {
                                              quantity = 0;
                                          }
                                          if (data.Discount == "" || data.Discount == undefined) {
                                              discount = 0;
                                          }
                                          // price = rate - ((rate * discount) / 100);
                                          price = convertedCurrencyRate - ((convertedCurrencyRate * discount) / 100);

                                          data.Price = price.toFixed(2);

                                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                                              tax = (price * quantity) * taxPrice / 100;
                                              data.TaxTotal = tax.toFixed(2);

                                              data.Tax = productData.TaxCategory;
                                              data.TaxId = productData.TaxCategoryId;
                                          } else {
                                              data.TaxPrice = 0;
                                              data.TaxTotal = 0;
                                          }
                                          data.Amount = (price * quantity).toFixed(2);
                                          data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                                          //}
                                          $scope.calculateGrandTotal();

                                      } else {
                                          $rootScope.showErrorNotification(productData.Title, productData.Message);
                                      }
                                      $scope.IsProductDisabled = false;
                                      //$scope.ClearProduct();
                                      $scope.addProductWindow.close();

                                  });
                          }
                      };

                      $scope.CancelProduct = function (event) {
                          event.preventDefault();
                          $scope.addProductWindow.close();

                      };

                  };

                  $scope.calculateGrandTotal = function () {

                      var amount = 0;
                      var taxTotal = 0;
                      var totalBillTax = 0;

                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          amount = amount + parseFloat($scope.Bill.BillDetailsModel[i].Amount);
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxTotal = taxTotal + parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal)
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount)
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (amount * billTax) / 100;

                      $scope.Bill.BillTotal = amount.toFixed(2);
                      $scope.Bill.BillTax = (taxTotal + totalBillTax).toFixed(2);


                      if (((amount + taxTotal + totalBillTax + freight + transportation) - discount) == 0) {
                          $scope.Bill.BillGrandTotal = 0;
                          return;
                      }

                      if (discount > (amount + taxTotal + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (amount + taxTotal + totalBillTax + freight + transportation).toFixed(2);
                          return;
                      }

                      $scope.Bill.BillGrandTotal = ((amount + taxTotal + totalBillTax + freight + transportation) - discount).toFixed(2);

                  }

                  $scope.productChange = function (e, data, index) {

                      var selectedCmb = e.sender.dataItem();
                      data.IsProductService = false;
                      $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                      data.MakeReadOnly = false;
                      data.Product = selectedCmb.Name;
                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      if (selectedCmb.Id == "0" || selectedCmb.Id == "") {
                          data.Quantity = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.PPrice = 0;
                          data.Price = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }


                      if (selectedCmb.IsService) {
                          //  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                          var taxPrice = 0;
                          data.IsProductService = true;
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxPrice = parseFloat(selectedCmb.TaxRate);
                              data.Tax = selectedCmb.TaxCategory;
                              data.TaxId = selectedCmb.TaxCategoryId;
                          }

                          data.TaxPrice = taxPrice;
                          data.TaxTotal = 0;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                          $scope.calculateGrandTotal();
                          return;
                      }





                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetMeasuringUnitByProductId",
                          params: { productId: selectedCmb.Id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = data.data;
                          });

                      data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(selectedCmb.TaxRate);
                      data.TaxPrice = taxPrice;

                      var price = 0;
                      var tax = 0;
                      var rate = 0;

                      rate = parseFloat(selectedCmb.PurchasePrice);

                      //if (rate > 0) {

                      // data.Price = selectedCmb.PurchasePrice.toString();
                      // data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      // price = rate - ((rate * discount) / 100);
                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);

                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  }

                  $scope.measuringChange = function (e, data) {

                      var selectedCmb = e.sender.dataItem();
                      if (selectedCmb.MeasuringUnitId == "0" || selectedCmb.MeasuringUnitId == "") {
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }

                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      // data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      // data.TaxPrice = taxPrice;
                      //data.Tax = data.TaxCategory;
                      // data.TaxId = data.TaxCategoryId;
                      var price = 0;
                      var tax = 0;
                      var rate = 0;
                      rate = parseFloat(selectedCmb.PurchasePrice);

                      // if (rate > 0) {

                      //data.Price = selectedCmb.PurchasePrice.toString();
                      //data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }
                      // price = rate - ((rate * discount) / 100);

                      price = rate - ((rate * discount) / 100);

                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);
                          //  data.TaxTotal = 0;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  };

                  $scope.quantityChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.billDiscountChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.priceChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.discountChange = function () {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var totalAmount = 0;
                      var totalBillTax = 0;
                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          var amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                          if (!isNaN(amount)) {
                              totalAmount = totalAmount + amount;
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount);
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (totalAmount * billTax) / 100;

                      if (discount > (totalAmount + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (totalAmount + totalBillTax + freight + transportation).toFixed(2);
                      } else {
                          $scope.Bill.BillGrandTotal = ((totalAmount + totalBillTax + freight + transportation) - discount).toFixed(2);
                      }

                  }

                  $scope.taxChange = function () {
                      if ($scope.Bill.StringTaxId == "0") {

                          $scope.IsTaxShow = true;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {

                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);

                              totalAmount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount) + taxPrice;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = taxPrice.toFixed(2);
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }
                      } else {
                          $scope.IsTaxShow = false;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);
                              $scope.Bill.BillDetailsModel[i].TaxPrice = 0;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = 0;

                              var Amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                              var totalAmount = Amount - taxPrice;
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }

                      }
                      $scope.calculateGrandTotal();
                  };

                  $scope.addRow = function () {
                      myService.GetCustomField("StockTransferDetails").then(function (data1) {
                          $scope.CustomFieldBillDetailsMappingData = data1;
                          $scope.Bill.BillDetailsModel.push({
                              "ProductId": 0,
                              "MeasuringUnitId": 0,
                              "Quantity": 0,
                              "MRP": 0,
                              "Discount": 0,
                              "PPrice": 0,
                              "Price": 0,
                              "Amount": 0,
                              "TaxPrice": 0,
                              "TaxId": 0,
                              "TaxTotal": 0,
                              "TotalAmount": 0,
                              "Description": "",
                              "IsDeleted": false,
                              "MakeReadOnly": true,
                              "CustomFieldMappingData": angular.copy(data1)

                          });
                      });
                  };
                  $scope.ClearMe = function () {

                      $scope.Bill.BillNumber = "";
                      $scope.Bill.BillDate = "";
                      $scope.Bill.Narration = "";
                      $scope.Bill.BillTotal = 0;
                      $scope.Bill.OtherDetails = "";
                      $scope.Bill.BillTax = 0;
                      $scope.Bill.TermsAndConditions = "";
                      $scope.Bill.Discount = 0;
                      $scope.Bill.BillGrandTotal = 0;
                      $scope.Bill.WareHouseId = "";
                      $scope.IsReadOnly = false;

                      $scope.Bill.BillDetailsModel = [{ "ProductId": 0, "MeasuringUnitId": 0, "Description": "", "Quantity": 0, "MRP": 0, "Price": 0, "PPrice": 0, "Discount": 0, "Amount": 0, "TaxId": 0, "TaxPrice": 0, "TaxTotal": 0, "TotalAmount": 0, "IsDeleted": false }]

                      document.getElementById("BillNumber").focus();
                  };

                  $scope.removeRow = function (data) {
                      var index = $scope.Bill.BillDetailsModel.indexOf(data);
                      $scope.Bill.BillDetailsModel.splice(index, 1);
                      $scope.calculateGrandTotal();
                  };

                  $scope.GotoNew = function () {
                      $location.path('/StockTransfer');
                  };



                  $scope.getIndexOf = function (arr, val, prop) {
                      var l = arr.length,
                          k = 0;
                      for (k = 0; k < l; k = k + 1) {
                          if (arr[k][prop] === val) {
                              return k;
                          }
                      }
                      return -1;
                  };


                  //save
                  $scope.Save = function (event) {
                      event.preventDefault();

                      //if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                      //    return;
                      //}

                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;
                          $http({
                              method: "POST",
                              url: "Admin/Bill/InsertStockTransfer",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);

                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                                  $scope.IsDisabled = false;
                              });
                      }
                  };

                  $scope.SaveAndPrint = function (event) {
                      event.preventDefault();

                      //if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                      //    return;
                      //}
                      if ($scope.validator.validate()) {
                          $http({
                              method: "POST",
                              url: "Admin/Bill/InsertOpeningStock",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      window.open('/Admin/Bill/DownloadInvoiceAsPdf/' + data.data.BillId, '_blank');
                                      event.preventDefault();

                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                              });
                      }
                  };


              }
          })
          //EditStockTransfer
          .when('/StockTransfer/Edit/:Id', {
              title: 'StockTransfer',
              setTitle: 'Edit',
              templateUrl: '/Admin/Bill/CreateOrUpdateStockTransfer',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {

                  $scope.MeasuringUnits = [];
                  $scope.Bill = {};
                  $scope.SendInvoiceEmail = {};
                  $scope.LastAttachedCount = 0;
                  $scope.editRow = function (data) {
                      data.MakeReadOnly = true;
                  }


                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllWareHouse",
                      cache: false
                  })
                      .then(function (data) {
                          $scope.wareHouseDataSource = data.data;
                      });

                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetStockTransferById/" + $routeParams.Id,
                      cache: false
                  })
                      .then(function (data) {

                          $scope.Bill = data.data;
                          myService.GetCustomField("StockTransfer").then(function (data1) {
                              $scope.CustomFieldBillDetailsMappingData = data1;
                          })
                          $scope.LastAttachedCount = data.data.AttachmentFile.length;
                          $scope.IsTaxShow = true;
                          $scope.IsTaxDisabled = true;
                          $scope.IsReadOnly = true;
                          $scope.Bill.BillDate = kendo.toString(kendo.parseDate(data.data.StringDate), data.data.SystemDateFormat);
                          $scope.Bill.MakeReadOnly = true;

                          if ($scope.Bill.BillTax == 0) {

                              $scope.IsTaxShow = false;
                              $scope.Bill.StringTaxId = 1;
                          }

                          $scope.customProductOptions = {
                              // optionLabel: "--- Select Product ---",
                              //dataSource: $scope.productDataSource,
                              dataTextField: $scope.Bill.ProductFilterBy,
                              dataValueField: "Id",
                              headerTemplate: '<div class="dropdown-headerCustomProduct">' +
                                  '<span><button type="button" class="btn btn-primary" ng-click="addProdct(data)" style="padding:1px 10px;height:19px;"><i class="fa fa-plus icon-only"></i></button></span>' +
                                  '<span class="k-widget k-header secondHeaderSpan">Name</span>' +
                                  '<span class="k-widget k-header">Code</span>' +
                                  '<span class="k-widget k-header">PurchasePrice</span>' +
                                  '<span class="k-widget k-header">Tax Rate</span>' +
                                  '</div>',
                              //'<div>' +
                              //'<button type="button" class="btn btn-primary" ng-click="addProdct(data)" style="width:353px">Add New Product</button>' +
                              //'</div>',

                              // using {{angular}} templates:
                              valueTemplate: '<span>{{dataItem.Name}}</span>',
                              template: '<div class="customProductSpan"><span></span><span class="k-state-default secondSpan">{{dataItem.Name}}</span>' + '<span class="k-state-default codeSpan">{{dataItem.Code}}</span>' +
                                  '<span class="k-state-default priceSpan">{{dataItem.PurchasePrice}}</span>' + '<span class="k-state-default salesAndTaxSpan">{{dataItem.TaxRate}}</span></div>'
                          };

        


                      });



                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllProduct",
                      cache: false
                  })
                      .then(function (data) {
                          $scope.AllMyProducts = data.data;
                      });

                  $scope.customUnitOptions = {

                      //placeholder: "Select Measuring Unit...",
                      dataTextField: "ShortName",
                      dataValueField: "MeasuringUnitId",
                      //select: MeasuringUnit_OnChange,
                      headerTemplate: '<div class="dropdown-headerUnit">' +
                          '<span class="k-widget k-header">Name </span>' +
                          '<span class="k-widget k-header">Purchase Price</span>' +
                          '</div>',
                      valueTemplate: '<span>{{dataItem.ShortName}}</span>',
                      template: '<div class="customUnitSpan"><span class="k-state-default">{{dataItem.MeasuringUnit}}</span><span class="k-state-default">{{dataItem.PurchasePrice}}</span></div>',

                  };

                  $scope.numberOnly = function (event) {
                      if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 110 || (!event.shiftKey && event.keyCode == 190) || (!event.shiftKey && event.keyCode == 173) || (!event.shiftKey && event.keyCode == 189) ||
                          event.keyCode == 27 || event.keyCode == 13 ||
                          (event.keyCode == 65 && event.ctrlKey === true) ||
                          (event.keyCode == 67 && event.ctrlKey === true) ||
                          (event.keyCode == 86 && event.ctrlKey === true) ||
                          (event.keyCode == 90 && event.ctrlKey === true) ||
                          (event.keyCode >= 35 && event.keyCode <= 39)) {
                          return;
                      } else {
                          // If it's not a number stop the keypress
                          if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                              event.preventDefault();
                          }
                      }
                  };

                  $scope.addProdct = function (data) {
                      //alert(data.Quantity);
                      //event.preventDefault();
                      $scope.Product = {};
                      $scope.Product.ProductMaterialsModel = [];

                      $scope.addProductWindow.refresh();
                      $scope.addProductWindow.title("Add New Product");
                      $scope.addProductWindow.open();
                      $scope.addProductWindow.center();


                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetMeasuringUnitStauts",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.Product.IsMeasuringUnitRequired = billData.data.IsMeasuringUnitRequired;
                              $scope.Product.PrimaryMeasuringUnitId = billData.data.PrimaryMeasuringUnitId;
                              $scope.Product.IsTaxEnabled = billData.data.IsTaxEnabled;

                              $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.categoryDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductTaxCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.taxDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllPrimaryMeasuringUnit",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.primaryMeasuringUnitDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllRawMaterials",
                          cache: false
                      })
                          .then(function (data) {
                              $scope.rawMaterialDataSource = data.data;
                          });

                      $scope.measuringUnitChange = function () {

                          if ($scope.Product.PrimaryMeasuringUnitId == 0 || $scope.Product.PrimaryMeasuringUnitId == "" || $scope.Product.PrimaryMeasuringUnitId == undefined) {
                              $scope.Product.MeasuringUnitPriceModel = null;
                              return;
                          }

                          $http({
                              method: "POST",
                              url: "/Admin/DTProduct/GetAllMeasuringUnitSiblings",
                              params: { productId: $scope.Product.Id, measuringUnitId: $scope.Product.PrimaryMeasuringUnitId },
                              cache: false
                          })
                              .then(function (billData) {
                                  var salesPrice = parseFloat($scope.Product.SalesPrice);
                                  var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                                  if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                                      salesPrice = 0;
                                  }

                                  if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                                      purchasePrice = 0;
                                  }

                                  for (var i = 0; i < billData.length; i++) {
                                      billData.data[i].SalesPrice = (salesPrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                      billData.data[i].PurchasePrice = (purchasePrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                  }
                                  $scope.Product.MeasuringUnitPriceModel = billData.data;

                              })

                      };

                      $scope.productPriceChange = function () {

                          var salesPrice = parseFloat($scope.Product.SalesPrice);
                          var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                          if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                              salesPrice = 0;
                          }

                          if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                              purchasePrice = 0;
                          }

                          if ($scope.Product.MeasuringUnitPriceModel != undefined) {
                              for (var i = 0; i < $scope.Product.MeasuringUnitPriceModel.length; i++) {
                                  $scope.Product.MeasuringUnitPriceModel[i].SalesPrice = (salesPrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                                  $scope.Product.MeasuringUnitPriceModel[i].PurchasePrice = (purchasePrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                              }
                          }
                      };

                      $scope.ClearProduct = function () {
                          //event.preventDefault();

                          $scope.Product.Name = "";
                          $scope.Product.Code = "";
                          $scope.Product.Description = "";
                          $scope.Product.ProductCategoryId = "";
                          $scope.Product.TaxCategoryId = "";
                          $scope.Product.ISTaxExempt = 0;
                          $scope.Product.SalesPrice = "";
                          $scope.Product.PurchasePrice = "";
                          $scope.Product.MinStockQuantity = "";
                          $scope.Product.MRP = "";
                          $scope.Product.MinSalesRate = "";
                          $scope.Product.IsActive = 0;
                          $scope.Product.LowStockNotification = 0;
                          $scope.Product.IsAllowBatch = 0;
                          $scope.Product.IsMultipleMeasuringUnitEnable = 0;
                          $scope.Product.PrimaryMeasuringUnitId = "";
                          $scope.Product.MeasuringUnitPriceModel = null;
                          $scope.Product.IsProduction = 0;

                          $scope.Product.ProductMaterialsModel = [{ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false }];

                          document.getElementById("Name").focus();
                      };

                      $scope.addMaterialRow = function () {
                          $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                      };

                      $scope.removeMaterialRow = function (data) {

                          var index = $scope.Product.ProductMaterialsModel.indexOf(data);
                          $scope.Product.ProductMaterialsModel.splice(index, 1);
                      };

                      $scope.SaveProduct = function (event) {
                          event.preventDefault();

                          // alert(data.ProductId);
                          if ($scope.Product.validator.validate()) {
                              $scope.IsProductDisabled = true;
                              $http({
                                  method: "POST",
                                  url: "Admin/DTProduct/InsertBillProductPopup",
                                  data: $scope.Product,
                                  cache: false
                              })
                                  .then(function (productData) {
                                      if (productData.data.Status) {
                                          $rootScope.showSuccessNotification(productData.data.Title, productData.data.Message);

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetAllProduct",
                                              cache: false
                                          })
                                              .success(function (billData) {
                                                  $scope.AllMyProducts = billData.data;
                                                  //data.AllMyProducts = $scope.AllMyBillProducts;
                                              });

                                          var index = $scope.Bill.BillDetailsModel.indexOf(data.data)
                                          //$scope.AllMyProducts.read();
                                          data.ProductId = productData.data.Id;
                                          //$scope.Bill.BillDetailsModel[index].ProductId = productData.ProductId;

                                          $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetMeasuringUnitByProductId",
                                              params: { productId: productData.data.Id },
                                              cache: false
                                          })
                                              .success(function (measureData) {
                                                  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = measureData;
                                              });

                                          //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                                          //if (currencyRate == "" || currencyRate == undefined || currencyRate == 0) {
                                          //    $scope.Bill.CurrencyRate = 0;
                                          //    currencyRate = 1;
                                          //}

                                          data.MeasuringUnitId = productData.data.PrimaryMeasuringUnitId;
                                          var taxPrice = parseFloat(productData.data.TaxRate);
                                          data.TaxPrice = taxPrice;

                                          var price = 0;
                                          var tax = 0;
                                          var rate = 0;

                                          rate = parseFloat(productData.data.PurchasePrice);

                                          // if (rate > 0) {

                                          // data.MRP = productData.PurchasePrice.toString();
                                          var convertedCurrencyRate = rate;
                                          data.PPrice = productData.PurchasePrice.toString();
                                          data.MRP = convertedCurrencyRate.toFixed(2);

                                          var quantity = parseFloat(data.Quantity);
                                          var discount = parseFloat(data.Discount);

                                          if (data.Quantity == "" || data.Quantity == undefined) {
                                              quantity = 0;
                                          }
                                          if (data.Discount == "" || data.Discount == undefined) {
                                              discount = 0;
                                          }
                                          // price = rate - ((rate * discount) / 100);
                                          price = convertedCurrencyRate - ((convertedCurrencyRate * discount) / 100);

                                          data.Price = price.toFixed(2);

                                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                                              tax = (price * quantity) * taxPrice / 100;
                                              data.TaxTotal = tax.toFixed(2);

                                              data.Tax = productData.data.TaxCategory;
                                              data.TaxId = productData.data.TaxCategoryId;
                                          } else {
                                              data.TaxPrice = 0;
                                              data.TaxTotal = 0;
                                          }
                                          data.Amount = (price * quantity).toFixed(2);
                                          data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                                          //}
                                          $scope.calculateGrandTotal();

                                      } else {
                                          $rootScope.showErrorNotification(productData.data.Title, productData.data.Message);
                                      }
                                      $scope.IsProductDisabled = false;
                                      //$scope.ClearProduct();
                                      $scope.addProductWindow.close();

                                  });
                          }
                      };

                      $scope.CancelProduct = function (event) {
                          event.preventDefault();
                          $scope.addProductWindow.close();

                      };

                  };

                  $scope.calculateGrandTotal = function () {

                      var amount = 0;
                      var taxTotal = 0;
                      var totalBillTax = 0;

                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          amount = amount + parseFloat($scope.Bill.BillDetailsModel[i].Amount);
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxTotal = taxTotal + parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal)
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount)
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (amount * billTax) / 100;

                      $scope.Bill.BillTotal = amount.toFixed(2);
                      $scope.Bill.BillTax = (taxTotal + totalBillTax).toFixed(2);


                      if (((amount + taxTotal + totalBillTax + freight + transportation) - discount) == 0) {
                          $scope.Bill.BillGrandTotal = 0;
                          return;
                      }

                      if (discount > (amount + taxTotal + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (amount + taxTotal + totalBillTax + freight + transportation).toFixed(2);
                          return;
                      }

                      $scope.Bill.BillGrandTotal = ((amount + taxTotal + totalBillTax + freight + transportation) - discount).toFixed(2);

                  }

                  $scope.productChange = function (e, data, index) {

                      var selectedCmb = e.sender.dataItem();
                      data.IsProductService = false;
                      $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                      data.MakeReadOnly = false;
                      data.Product = selectedCmb.Name;
                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      if (selectedCmb.Id == "0" || selectedCmb.Id == "") {
                          data.Quantity = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.PPrice = 0;
                          data.Price = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }


                      if (selectedCmb.IsService) {
                          //  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                          var taxPrice = 0;
                          data.IsProductService = true;
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxPrice = parseFloat(selectedCmb.TaxRate);
                              data.Tax = selectedCmb.TaxCategory;
                              data.TaxId = selectedCmb.TaxCategoryId;
                          }

                          data.TaxPrice = taxPrice;
                          data.TaxTotal = 0;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                          $scope.calculateGrandTotal();
                          return;
                      }





                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetMeasuringUnitByProductId",
                          params: { productId: selectedCmb.Id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = data.data;
                          });

                      data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(selectedCmb.TaxRate);
                      data.TaxPrice = taxPrice;

                      var price = 0;
                      var tax = 0;
                      var rate = 0;

                      rate = parseFloat(selectedCmb.PurchasePrice);

                      //if (rate > 0) {

                      // data.Price = selectedCmb.PurchasePrice.toString();
                      // data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      // price = rate - ((rate * discount) / 100);
                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);

                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  }

                  $scope.measuringChange = function (e, data) {

                      var selectedCmb = e.sender.dataItem();
                      if (selectedCmb.MeasuringUnitId == "0" || selectedCmb.MeasuringUnitId == "") {
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }

                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      // data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      // data.TaxPrice = taxPrice;
                      //data.Tax = data.TaxCategory;
                      // data.TaxId = data.TaxCategoryId;
                      var price = 0;
                      var tax = 0;
                      var rate = 0;
                      rate = parseFloat(selectedCmb.PurchasePrice);

                      // if (rate > 0) {

                      //data.Price = selectedCmb.PurchasePrice.toString();
                      //data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }
                      // price = rate - ((rate * discount) / 100);

                      price = rate - ((rate * discount) / 100);

                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);
                          //  data.TaxTotal = 0;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  };

                  $scope.quantityChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.billDiscountChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.priceChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.discountChange = function () {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var totalAmount = 0;
                      var totalBillTax = 0;
                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          var amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                          if (!isNaN(amount)) {
                              totalAmount = totalAmount + amount;
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount);
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (totalAmount * billTax) / 100;

                      if (discount > (totalAmount + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (totalAmount + totalBillTax + freight + transportation).toFixed(2);
                      } else {
                          $scope.Bill.BillGrandTotal = ((totalAmount + totalBillTax + freight + transportation) - discount).toFixed(2);
                      }

                  }

                  $scope.taxChange = function () {
                      if ($scope.Bill.StringTaxId == "0") {

                          $scope.IsTaxShow = true;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {

                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);

                              totalAmount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount) + taxPrice;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = taxPrice.toFixed(2);
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }
                      } else {
                          $scope.IsTaxShow = false;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);
                              $scope.Bill.BillDetailsModel[i].TaxPrice = 0;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = 0;

                              var Amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                              var totalAmount = Amount - taxPrice;
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }

                      }
                      $scope.calculateGrandTotal();
                  };

                  $scope.addRow = function () {
                      $scope.Bill.BillDetailsModel.push({
                          "ProductId": 0,
                          "MeasuringUnitId": 0,
                          "Quantity": 0,
                          "MRP": 0,
                          "Discount": 0,
                          "PPrice": 0,
                          "Price": 0,
                          "Amount": 0,
                          "TaxPrice": 0,
                          "TaxId": 0,
                          "TaxTotal": 0,
                          "TotalAmount": 0,
                          "Description": "",
                          "IsDeleted": false,
                          "MakeReadOnly": true,

                      });
                  };

                  $scope.ClearMe = function () {

                      $scope.Bill.BillNumber = "";
                      $scope.Bill.BillDate = "";
                      $scope.Bill.Narration = "";
                      $scope.Bill.BillTotal = 0;
                      $scope.Bill.OtherDetails = "";
                      $scope.Bill.BillTax = 0;
                      $scope.Bill.TermsAndConditions = "";
                      $scope.Bill.Discount = 0;
                      $scope.Bill.BillGrandTotal = 0;
                      $scope.Bill.WareHouseId = "";
                      $scope.IsReadOnly = false;
                      $scope.Bill.BillDetailsModel = [{ "ProductId": 0, "MeasuringUnitId": 0, "Description": "", "Quantity": 0, "MRP": 0, "Discount": 0, "PPrice": 0, "Price": 0, "Amount": 0, "TaxId": 0, "TaxPrice": 0, "TaxTotal": 0, "TotalAmount": 0, "IsDeleted": false }]

                      document.getElementById("BillNumber").focus();
                  };

                  $scope.removeRow = function (data) {

                      var index = $scope.Bill.BillDetailsModel.indexOf(data);
                      //if (data.Id == undefined || data.Id == 0) {
                      //    $scope.Bill.BillDetailsModel.splice(index, 1);
                      //} else {
                      //    data.Quantity = 0;
                      //    data.TaxTotal = 0;
                      //    data.MRP = 0;
                      //    data.Discount = 0;
                      //    data.Amount = 0;
                      //    data.TaxPrice = 0;
                      //    data.TaxId = 0;
                      //    data.Tax = "";
                      //    data.Price = 0;
                      //    data.PPrice = 0;
                      //    data.TotalAmount = 0;
                      //    data.description = "";
                      //    data.ProductId = 0;
                      //    data.MeasuringUnitId = 0;
                      //    data.Product = "";
                      //    data.IsDeleted = true;
                      //}
                      if (data.Id == 0 || data.Id == undefined) {
                          data.ProductId = 0; data.Product = ""; data.MeasuringUnitId = 0; data.Description = ""; data.Quantity = 0; data.MRP = 0; data.Discount = 0; data.Price = 0; data.PPrice = 0; data.Amount = 0; data.TaxId = 0; data.TaxPrice = 0; data.TaxTotal = 0; data.TotalAmount = 0; data.IsDeleted = true;
                      }
                      else {
                          data.ProductId = 0; data.Product = ""; data.MeasuringUnitId = 0; data.Description = ""; data.Quantity = 0; data.MRP = 0; data.Discount = 0; data.Price = 0; data.PPrice = 0; data.Amount = 0; data.TaxId = 0; data.TaxPrice = 0; data.TaxTotal = 0; data.TotalAmount = 0; data.IsDeleted = true;
                      }

                      $scope.calculateGrandTotal();
                  };

                  $scope.GotoNew = function () {
                      $location.path('/StockTransfer');
                  };

                  $scope.BillPrint = function (event) {

                      if ($scope.Bill.Id == "" || $scope.Bill.Id == undefined) {
                          return;
                      }

                      window.open('/Admin/Bill/DownloadInvoiceAsPdf/' + $scope.Bill.Id, '_blank');
                      event.preventDefault();
                  };




                  $scope.getIndexOf = function (arr, val, prop) {
                      var l = arr.length,
                          k = 0;
                      for (k = 0; k < l; k = k + 1) {
                          if (arr[k][prop] === val) {
                              return k;
                          }
                      }
                      return -1;
                  };

                  $scope.onError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };


                  //save
                  $scope.Save = function (event) {
                      event.preventDefault();

                      //if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                      //    return;
                      //}
                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;


                          $http({
                              method: "POST",
                              url: "Admin/Bill/UpdateStockTransfer",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  //$scope.IsDisabled = false;
                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);

                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                                  $scope.IsDisabled = false;
                              });


                          //$.ajax({
                          //    url: "Admin/Bill/UpdateStockTransfer",
                          //    data: $scope.Bill,
                          //    type: 'POST',
                          //    success: function (data) {
                          //        $scope.IsDisabled = false;
                          //        if (data.Status) {
                          //            $rootScope.RefreshLowStockNotification();
                          //            $scope.GotoNew();
                          //            $rootScope.showSuccessNotification(data.Title, data.Message);
                          //        } else {
                          //            $rootScope.showErrorNotification(data.Title, data.Message);
                          //        }
                          //    }
                          //});
                      }
                  };





              }
          })








          //WastageManagement
          .when('/WastageManagement', {
              title: 'Admin.Breadcrumb.WastageManagement',
              templateUrl: '/Admin/Bill/WastageManagement',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {


                  $scope.Search = {};
                  $scope.SendInvoiceEmail = {};
                  $scope.IsTaxEnabled = true;

                  $scope.productDataSource = {
                      placeholder: "---Search By Products---",
                      dataTextField: "Name",
                      dataValueField: "Id",
                      //valuePrimitive: true,
                      autoBind: false,
                      dataSource: {
                          transport: {
                              read: {
                                  dataType: "json",
                                  url: "/Admin/Bill/GetAllProductList"
                                  //url: "/Admin/Bill/GetAllProductAndRawMaterialList"
                              }
                          }
                      }
                  };



                  var reportAggregates = "";
                  $scope.toolbarTemplate = [{ template: "<a class='btn btn-success btn-line tooltip-success' data-rel='tooltip' tooltip-placement='right' tooltip='Add New' ng-click='CreateWastageManagement()'  style='padding:4px 8px 4px 12px;' ><i class='fa fa-plus'></i></a>" }]

                  $scope.gridData = new kendo.data.DataSource({
                      type: "json",
                      transport: {
                          read: function (e) {

                              $scope.Search.page = e.data.page;
                              $scope.Search.pageSize = e.data.pageSize;
                              $scope.Search.take = e.data.take;
                              $scope.Search.skip = e.data.skip;
                              $scope.Search.sort = e.data.sort;
                              $scope.Search.filter = e.data.filter;

                              $http({ method: 'POST', url: '/Admin/Bill/LoadSalesBill', data: $scope.Search }).
                                  then(function onSuccess(data, status, headers, config) {
                                      e.success(data.data);
                                  }).
                                  catch(function onError(data, status, headers, config) {
                                      e.error(data.data);
                                  });
                          },
                          destroy: function (e) {
                              $http({
                                  method: 'POST',
                                  url: '/Admin/Bill/DeleteBill/' + e.data.Id,
                              }).
                                  then(function onSuccess(data, status, headers, config) {
                                      if (data.data.Status) {
                                          $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      } else {
                                          $rootScope.showErrorNotification(data.data.Title, data.data.Message);

                                      }
                                      e.success(data.data);
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.gridData.read($scope.Search);

                                  }).
                                  catch(function onError(data, status, headers, config) {
                                      e.error(data.data);

                                  });

                          },
                          parameterMap: function (data, operation) {
                              if (operation != "read") {
                                  return data;
                              } else {
                                  //for some reasons only such "Filter" data be parsed
                                  return JSON.stringify(data);
                              }
                          }

                      },
                      schema: {
                          data: "Data",
                          total: "Total",
                          errors: "Errors",
                          model: {
                              id: "Id",
                              fields: {
                                  // Name: { type: "string", validation: { required: true } },
                                  BillDate: { type: "date", editable: false, visible: false, hidden: true, format: "{0:d}" },
                              }
                          }
                      },
                      requestEnd: function (e) {
                          if (e.type == "read") {
                              var response = e.response;
                              if (response) {
                                  //store extra data
                                  reportAggregates = e.response["ExtraData"];
                                  $scope.IsTaxEnabled = reportAggregates['IsTaxEnabled'];

                              }
                          }
                      },
                      error: function (e) {
                          display_kendoui_grid_error(e);
                          // Cancel the changes
                          this.cancelChanges();
                      },
                      pageSize: 10,
                      serverPaging: true,
                      serverFiltering: false,
                      serverSorting: false,
                  });
                  $scope.gridColumns = [{
                      field: "BillNumber",
                      title: "BILL.NO",
                      width: 100
                  },
                  {
                      field: "StringDate",
                      title: "DATE",
                      width: 100,
                      footerTemplate: '<span class=\'gridAlignment\'>Total :</span>',

                  },
                  {
                      field: "CreatedBy",
                      title: "CREATED BY",
                      width: 180,
                      hidden: true
                  },
                  {
                      field: "BillTotal",
                      template: '{{(#=BillTotal#).toLocaleString("en-IN",{minimumFractionDigits: 2})}}',
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillTotal-block\"></span></div>',
                      title: "TOTAL",
                      attributes: { style: "text-align:right" },
                      width: 120
                  },
                  {
                      field: "BillTax",
                      template: '{{(#=BillTax#).toLocaleString("en-IN",{minimumFractionDigits: 2})}}',
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillTax-block\"></span></div>',
                      title: "TAX",
                      attributes: { style: "text-align:right" },
                      width: 100
                  },
                  {
                      field: "Discount",
                      template: '{{(#=Discount#).toLocaleString("en-IN",{minimumFractionDigits: 2})}}',
                      title: "DISCOUNT",
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumDiscount-block\"></span></div>',
                      attributes: { style: "text-align:right" },
                      width: 100
                  },
                  {
                      field: "BillGrandTotal",
                      template: '{{(#=BillGrandTotal#).toLocaleString("en-IN",{minimumFractionDigits: 2})}}',
                      footerTemplate: '<div><span class=\'gridAlignment\' id=\"aggregator-sumBillGrandTotal-block\"></span></div>',
                      title: "G TOTAL",
                      attributes: { style: "text-align:right" },
                      width: 150,
                  },
                  {
                      template: '<div class="ui-group-buttons"><a title="Edit" href="\\#/WastageManagement/Edit/#=Id#" class="btn btn-inverse" ><i class="fa fa-edit icon-only"></i></a><div class="or"></div><button title="Delete" class="btn btn-primary k-grid-delete" type="button"><i class="fa fa-trash-o icon-only"></i></button><div class="or"></div><a title="Print" ng-click="billPrint(#=Id#,$event)" class="btn btn-info PrintWindow"><i class="fa fa-print"></i></a><div class="or"></div><a title="Send Email" ng-click="SendInvoice(#=Id#,$event)" class="btn btn-danger SendEmailWindow"><i class="fa fa-paper-plane"></i></a></div>',
                      width: 200,
                      attributes: { style: "text-align:center" }
                  }
                  ]

                  $scope.onDataBound = function (e) {
                      if (reportAggregates != "") {
                          for (var key in reportAggregates) {
                              $('#aggregator-sumBillGrandTotal-block').text(reportAggregates['SumBillGrandTotal']);
                              $('#aggregator-sumBillTax-block').text(reportAggregates['SumBillTax']);
                              $('#aggregator-sumBillTotal-block').text(reportAggregates['SumBillTotal']);
                              $('#aggregator-sumDiscount-block').text(reportAggregates['SumDiscount']);
                              $('#aggregator-sumBalance-block').text(reportAggregates['SumBalance']);

                          }
                          if (!reportAggregates['IsTaxEnabled']) {
                              $scope.BillGrid.hideColumn("BillTax");
                          }
                          // this.expandRow(this.tbody.find("tr.k-master-row").first());
                      }
                      $scope.BillGrid.expandRow($scope.BillGrid.tbody.find("tr:first"));
                  }

                  $scope.CreateWastageManagement = function (e) {
                      $location.path('/CreateWastageManagement');
                  };

                  $scope.submit = function (event) {
                      event.preventDefault();
                      $scope.gridData.read($scope.Search);
                  }

                  $scope.ClearMe = function (event) {
                      event.preventDefault();
                      $scope.Search.BillNumber = "";
                      $scope.Search.FromDate = "";
                      $scope.Search.ToDate = "";
                      $scope.Search.ProductIds = null;
                      //$scope.multiselect.value().slice();
                      $scope.Search.BillGrandTotal = "";
                      $scope.Search.Narration = "";
                      document.getElementById("BillNumber").focus();
                  }

                  $scope.exportToExcel = function (event) {

                      var result = "";
                      if ($scope.Search.ProductIds != null || $scope.Search.ProductIds != undefined) {

                          for (var i = 0; i < $scope.Search.ProductIds.length; i++) {
                              result = result + "&productIds=" + $scope.Search.ProductIds[i];
                          }
                      }

                      var fromDate = kendo.toString(kendo.parseDate($scope.Search.FromDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');
                      var toDate = kendo.toString(kendo.parseDate($scope.Search.ToDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');

                      var serializeForm = "&BillTypeId=" + $scope.Search.BillTypeId + "&BillNumber=" + $scope.Search.BillNumber + "&FromDate=" + fromDate + "&ToDate=" + toDate + "&productIds[]=" + result + "&BillGrandTotal=" + $scope.Search.BillGrandTotal + "&Narration=" + $scope.Search.Narration;

                      window.location.href = '/Admin/Bill/ExportExcelStockEntry?' + serializeForm;
                      //window.location.href = '/Admin/Bill/ExportExcelWastageManagement?' + serializeForm;
                      event.preventDefault();
                  }

                  $scope.toPdf = function (event) {
                      event.preventDefault();

                      var result = "";
                      if ($scope.Search.ProductIds != null || $scope.Search.ProductIds != undefined) {

                          for (var i = 0; i < $scope.Search.ProductIds.length; i++) {
                              result = result + "&productIds=" + $scope.Search.ProductIds[i];
                          }
                      }

                      var fromDate = kendo.toString(kendo.parseDate($scope.Search.FromDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');
                      var toDate = kendo.toString(kendo.parseDate($scope.Search.ToDate, 'dd/MM/yyyy'), 'MM/dd/yyyy');

                      var serializeForm = "&BillTypeId=" + $scope.Search.BillTypeId + "&BillNumber=" + $scope.Search.BillNumber + "&FromDate=" + fromDate + "&ToDate=" + toDate + "&productIds[]=" + result + "&BillGrandTotal=" + $scope.Search.BillGrandTotal + "&Narration=" + $scope.Search.Narration;

                      window.open('/Admin/Bill/DownloadInvoiceStockListAsPdf?' + serializeForm);
                  }

                  $scope.billPrint = function (id, event) {

                      if (id == "" || id == undefined) {
                          return;
                      }

                      window.open('/Admin/Bill/DownloadInvoiceAsPdf/' + id, '_blank');
                      event.preventDefault();
                  }



                  //emailAttach
                  $scope.onSuccess = function (e) {

                      if (e.operation == "upload") {
                          for (var i = 0; i < e.files.length; i++) {

                              $scope.SendInvoiceEmail.AttachmentFile.push({ RandomName: e.response.fileNames[i], OriginalName: e.files[i].name });
                              e.files[i].name = e.response.fileNames[i];

                          }
                      } else if (e.operation == "remove") {
                          for (var i = 0; i < e.files.length; i++) {

                              var index = $scope.getIndexOf($scope.SendInvoiceEmail.AttachmentFile, e.files[i].name, "RandomName");

                              if (index != -1) {
                                  $scope.SendInvoiceEmail.AttachmentFile.splice(index, 1);
                              }
                          }
                      }

                  };

                  $scope.getIndexOf = function (arr, val, prop) {
                      var l = arr.length,
                          k = 0;
                      for (k = 0; k < l; k = k + 1) {
                          if (arr[k][prop] === val) {
                              return k;
                          }
                      }
                      return -1;
                  };

                  $scope.onError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };

                  $scope.SendInvoice = function (id, event) {
                      event.preventDefault();

                      if (id == "" || id == undefined) {
                          return;
                      }

                      $scope.sendEmail.refresh();
                      $scope.sendEmail.title("Send Email");
                      $scope.sendEmail.open();
                      $scope.sendEmail.center();

                      $scope.SendInvoiceEmail.AttachmentFile = [];

                      $(".k-upload-files").remove();
                      $(".k-upload-status").remove();
                      $(".k-upload.k-header").addClass("k-upload-empty");
                      $(".k-upload-button").removeClass("k-state-focused");

                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetEmailDetailsByBillId",
                          params: { billId: id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.SendInvoiceEmail = data;
                          });


                      $scope.SendEmail = function (event) {
                          event.preventDefault();

                          if (id == "" || id == undefined) {
                              return;
                          }

                          if ($scope.sendEmailValidator.validate()) {
                              $scope.IsSendDisabled = true;
                              //$scope.SendInvoiceEmail.AttachmentFile = $scope.files;
                              //var formData = new FormData(document.getElementById("attachMentForm"));
                              $http({
                                  method: "POST",
                                  url: "Admin/Bill/SendInvoice",
                                  data: { billId: id, model: $scope.SendInvoiceEmail },
                                  //data: formData,
                                  cache: false,
                              })
                                  .then(function (data) {
                                      if (data.data.Status) {
                                          $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                          $scope.sendEmail.close();
                                          event.preventDefault();
                                      } else {
                                          $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                      }
                                      $scope.IsSendDisabled = false;
                                  });
                          }
                      };

                      $scope.CancelSend = function (event) {
                          event.preventDefault();
                          $scope.sendEmail.close();

                      };

                  };

                  $scope.getBillProduct = function (dataItem) {
                      return {
                          dataSource: {
                              type: "json",
                              transport: {
                                  read: {
                                      url: "/Admin/Bill/GetBilledProduct",
                                      type: "POST",
                                      dataType: "json",
                                      data: { id: dataItem.Id }
                                  },
                              },
                              schema: {
                                  data: "Data",
                                  errors: "Errors",
                                  model: {
                                      id: "Id",
                                      fields: {
                                          Product: { type: "string", validation: { required: true } },
                                      }
                                  }
                              },
                              error: function (e) {
                                  display_kendoui_grid_error(e);
                                  // Cancel the changes
                                  this.cancelChanges();
                              },
                              serverPaging: true,
                              serverSorting: false,
                              serverFiltering: false,
                              pageSize: 5,
                              aggregate: [{ field: "Quantity", aggregate: "sum" },
                              { field: "Amount", aggregate: "sum" },
                              { field: "TaxTotal", aggregate: "sum" },
                              { field: "TotalAmount", aggregate: "sum" }

                              ],
                              //  filter: { field: "EmployeeID", operator: "eq", value: dataItem.EmployeeID }
                          },
                          scrollable: false,
                          sortable: true,
                          pageable: true,
                          columns: [{
                              field: "Product",
                              width: 200,
                          },
                          //{
                          //    field: "WareHouse",
                          //    width: 200,
                          //    footerTemplate: '<div>Total :</div>',
                          //},
                          {
                              field: "MeasuringUnit",
                              title: "Unit",
                              width: 80,
                              footerTemplate: '<span class=\'gridAlignment\'>Total :</span>'
                          },
                          {
                              field: "Quantity",
                              title: "Qty",
                              aggregates: ["sum"],
                              footerTemplate: "<span class=\'gridAlignment\'>#=sum#</span>",
                              attributes: { style: "text-align:right" },
                              width: 80
                          },
                          {
                              field: "MRP",
                              width: 100,
                              attributes: { style: "text-align:right" },
                          },
                          //{
                          //    field: "Discount",
                          //    title: "Disc (%)",
                          //    width: 80,
                          //    attributes: { style: "text-align:center" },
                          //},
                          {
                              field: "Tax",
                              title: "Tax",
                              width: 100,
                              hidden: $scope.IsTaxEnabled ? false : true
                          },
                          {
                              field: "TaxPrice",
                              title: "Tax Rate",
                              width: 80,
                              attributes: { style: "text-align:right" },
                              hidden: $scope.IsTaxEnabled ? false : true
                          },
                          {
                              field: "Amount",
                              aggregates: ["sum"],
                              // footerTemplate: " #= sum #",
                              footerTemplate: "<span class=\'gridAlignment\'>#= sum #</span>",
                              attributes: { style: "text-align:right" },
                              width: 100
                          },
                          {
                              field: "TaxTotal",
                              aggregates: ["sum"],
                              // footerTemplate: " #= sum #",
                              title: "Tax Total",
                              footerTemplate: "<span class=\'gridAlignment\'>#= sum #</span>",
                              attributes: { style: "text-align:right" },
                              width: 100,
                              hidden: $scope.IsTaxEnabled ? false : true

                          },
                          {
                              field: "TotalAmount",
                              aggregates: ["sum"],
                              //footerTemplate: " #= sum #",
                              footerTemplate: "<span class=\'gridAlignment\'>#= sum #</span>",
                              attributes: { style: "text-align:right" },
                              title: "Total Amount",
                              width: 120
                          }
                          ]
                      };
                  };


              }
          })

          //CreateWastageManagement
          .when('/CreateWastageManagement', {
              title: 'Admin.Breadcrumb.CreateWastageManagement',
              setTitle: 'Admin.Breadcrumb.WastageManagement',
              templateUrl: '/Admin/Bill/CreateOrUpdateWastageManagement',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {

                  $scope.MeasuringUnits = [];
                  $scope.Bill = {};
                  $scope.SendInvoiceEmail = {};
                  $scope.IsTaxShow = true;
                  $scope.IsReadOnly = false;
                  $scope.editRow = function (data) {
                      data.MakeReadOnly = true;
                  }

                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllWareHouse",
                      cache: false
                  })
                      .then(function (data) {
                          $scope.wareHouseDataSource = data.data;

                          $http({
                              method: "GET",
                              url: "/Admin/Bill/GetBillDetails",
                              params: { billTypeId: $scope.Bill.BillTypeId },
                              cache: false
                          })
                              .then(function (data) {
                                  $scope.Bill = data.data;
                                  $scope.Bill.BillDate = kendo.toString(kendo.parseDate(data.data.StringDate), data.SystemDateFormat);
                                  if ($scope.Bill.BillNumber != null) {
                                      $scope.IsReadOnly = true;
                                  }
                                  for (var i = 0; i < 5; i++) {

                                      $scope.Bill.BillDetailsModel.push({
                                          "ProductId": 0,
                                          "MeasuringUnitId": 0,
                                          "Quantity": 0,
                                          "MRP": 0,
                                          "Discount": 0,
                                          "Price": 0,
                                          "PPrice": 0,
                                          "Amount": 0,
                                          "TaxPrice": 0,
                                          "TaxId": 0,
                                          "TaxTotal": 0,
                                          "TotalAmount": 0,
                                          "Description": "",
                                          "IsDeleted": false,
                                          "MakeReadOnly": true,

                                      });
                                  }

                                  $scope.customProductOptions = {
                                      // optionLabel: "--- Select Product ---",
                                      //dataSource: $scope.productDataSource,
                                      dataTextField: $scope.Bill.ProductFilterBy,
                                      dataValueField: "Id",
                                      // valuePrimitive: true,
                                      headerTemplate: '<div class="dropdown-headerCustomProduct">' +
                                          '<span><button type="button" class="btn btn-primary" ng-click="addProdct(data.data)" style="padding:1px 10px;height:19px;"><i class="fa fa-plus icon-only"></i></button></span>' +
                                          '<span class="k-widget k-header secondHeaderSpan">Name</span>' +
                                          '<span class="k-widget k-header">Code</span>' +
                                          '<span class="k-widget k-header">PurchasePrice</span>' +
                                          '<span class="k-widget k-header">Tax Rate</span>' +
                                          '</div>',
                                      //'<div>' +
                                      //'<button type="button" class="btn btn-primary" ng-click="addProdct(data.data)" style="width:353px">Add New Product</button>' +
                                      //'</div>',

                                      // using {{angular}} templates:
                                      valueTemplate: '<span>{{dataItem.Name}}</span>',
                                      template: '<div class="customProductSpan"><span></span><span class="k-state-default secondSpan">{{dataItem.Name}}</span>' + '<span class="k-state-default codeSpan">{{dataItem.Code}}</span>' +
                                          '<span class="k-state-default priceSpan">{{dataItem.PurchasePrice}}</span>' + '<span class="k-state-default salesAndTaxSpan">{{dataItem.TaxRate}}</span></div>'
                                  };
                              });

                      });

                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetAllProduct",
                      cache: false
                  })
                      .then(function (data) {
                          $scope.AllMyProducts = data.data;
                      });


                  $scope.customUnitOptions = {

                      //placeholder: "Select Measuring Unit...",
                      dataTextField: "ShortName",
                      dataValueField: "MeasuringUnitId",
                      //select: MeasuringUnit_OnChange,
                      headerTemplate: '<div class="dropdown-headerUnit">' +
                          '<span class="k-widget k-header">Name </span>' +
                          '<span class="k-widget k-header">Purchase Price</span>' +
                          '</div>',
                      valueTemplate: '<span>{{dataItem.ShortName}}</span>',
                      template: '<div class="customUnitSpan"><span class="k-state-default">{{dataItem.MeasuringUnit}}</span><span class="k-state-default">{{dataItem.PurchasePrice}}</span></div>',

                  };

                  $scope.numberOnly = function (event) {
                      if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 110 || (!event.shiftKey && event.keyCode == 190) || (!event.shiftKey && event.keyCode == 173) || (!event.shiftKey && event.keyCode == 189) ||
                          event.keyCode == 27 || event.keyCode == 13 ||
                          (event.keyCode == 65 && event.ctrlKey === true) ||
                          (event.keyCode == 67 && event.ctrlKey === true) ||
                          (event.keyCode == 86 && event.ctrlKey === true) ||
                          (event.keyCode == 90 && event.ctrlKey === true) ||
                          (event.keyCode >= 35 && event.keyCode <= 39)) {
                          return;
                      } else {
                          // If it's not a number stop the keypress
                          if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                              event.preventDefault();
                          }
                      }
                  };

                  $scope.addProdct = function (data) {
                      //alert(data.data.Quantity);
                      //event.preventDefault();
                      $scope.Product = {};
                      $scope.Product.ProductMaterialsModel = [];

                      $scope.addProductWindow.refresh();
                      $scope.addProductWindow.title("Add New Product");
                      $scope.addProductWindow.open();
                      $scope.addProductWindow.center();


                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetMeasuringUnitStauts",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.Product.IsMeasuringUnitRequired = billData.data.IsMeasuringUnitRequired;
                              $scope.Product.PrimaryMeasuringUnitId = billData.data.PrimaryMeasuringUnitId;
                              $scope.Product.IsTaxEnabled = billData.data.IsTaxEnabled;

                              $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.categoryDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductTaxCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.taxDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllPrimaryMeasuringUnit",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.primaryMeasuringUnitDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllRawMaterials",
                          cache: false
                      })
                          .then(function (data) {
                              $scope.rawMaterialDataSource = data.data.data;
                          });

                      $scope.measuringUnitChange = function () {

                          if ($scope.Product.PrimaryMeasuringUnitId == 0 || $scope.Product.PrimaryMeasuringUnitId == "" || $scope.Product.PrimaryMeasuringUnitId == undefined) {
                              $scope.Product.MeasuringUnitPriceModel = null;
                              return;
                          }

                          $http({
                              method: "POST",
                              url: "/Admin/DTProduct/GetAllMeasuringUnitSiblings",
                              params: { productId: $scope.Product.Id, measuringUnitId: $scope.Product.PrimaryMeasuringUnitId },
                              cache: false
                          })
                              .then(function (billData) {
                                  var salesPrice = parseFloat($scope.Product.SalesPrice);
                                  var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                                  if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                                      salesPrice = 0;
                                  }

                                  if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                                      purchasePrice = 0;
                                  }

                                  for (var i = 0; i < billData.data.length; i++) {
                                      billData.data[i].SalesPrice = (salesPrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                      billData.data[i].PurchasePrice = (purchasePrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                  }
                                  $scope.Product.MeasuringUnitPriceModel = billData.data;

                              })

                      };

                      $scope.productPriceChange = function () {

                          var salesPrice = parseFloat($scope.Product.SalesPrice);
                          var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                          if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                              salesPrice = 0;
                          }

                          if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                              purchasePrice = 0;
                          }

                          if ($scope.Product.MeasuringUnitPriceModel != undefined) {
                              for (var i = 0; i < $scope.Product.MeasuringUnitPriceModel.length; i++) {
                                  $scope.Product.MeasuringUnitPriceModel[i].SalesPrice = (salesPrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                                  $scope.Product.MeasuringUnitPriceModel[i].PurchasePrice = (purchasePrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                              }
                          }
                      };

                      $scope.ClearProduct = function () {
                          //event.preventDefault();

                          $scope.Product.Name = "";
                          $scope.Product.Code = "";
                          $scope.Product.Description = "";
                          $scope.Product.ProductCategoryId = "";
                          $scope.Product.TaxCategoryId = "";
                          $scope.Product.ISTaxExempt = 0;
                          $scope.Product.SalesPrice = "";
                          $scope.Product.PurchasePrice = "";
                          $scope.Product.MinStockQuantity = "";
                          $scope.Product.MRP = "";
                          $scope.Product.MinSalesRate = "";
                          $scope.Product.IsActive = 0;
                          $scope.Product.LowStockNotification = 0;
                          $scope.Product.IsAllowBatch = 0;
                          $scope.Product.IsMultipleMeasuringUnitEnable = 0;
                          $scope.Product.PrimaryMeasuringUnitId = "";
                          $scope.Product.MeasuringUnitPriceModel = null;
                          $scope.Product.IsProduction = 0;

                          $scope.Product.ProductMaterialsModel = [{ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false }];


                          document.getElementById("Name").focus();
                      };

                      $scope.addMaterialRow = function () {
                          $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                      };

                      $scope.removeMaterialRow = function (data) {

                          var index = $scope.Product.ProductMaterialsModel.indexOf(data.data);
                          $scope.Product.ProductMaterialsModel.splice(index, 1);
                      };

                      $scope.SaveProduct = function (event) {
                          event.preventDefault();

                          // alert(data.data.ProductId);
                          if ($scope.Product.validator.validate()) {
                              $scope.IsProductDisabled = true;
                              $http({
                                  method: "POST",
                                  url: "Admin/DTProduct/InsertBillProductPopup",
                                  data: $scope.Product,
                                  cache: false
                              })
                                  .then(function (productData) {
                                      if (productData.data.Status) {
                                          $rootScope.showSuccessNotification(productData.data.Title, productData.data.Message);

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetAllProduct",
                                              cache: false
                                          })
                                              .then(function (billData) {
                                                  $scope.AllMyProducts = billData.data;
                                                  //data.AllMyProducts = $scope.AllMyBillProducts;
                                              });

                                          var index = $scope.Bill.BillDetailsModel.indexOf(data.data)
                                          //$scope.AllMyProducts.read();
                                          data.ProductId = productData.Id;
                                          //$scope.Bill.BillDetailsModel[index].ProductId = productData.ProductId;

                                          $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetMeasuringUnitByProductId",
                                              params: { productId: productData.Id },
                                              cache: false
                                          })
                                              .then(function (measureData) {
                                                  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = measureData;
                                              });

                                          //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                                          //if (currencyRate == "" || currencyRate == undefined || currencyRate == 0) {
                                          //    $scope.Bill.CurrencyRate = 0;
                                          //    currencyRate = 1;
                                          //}

                                          data.MeasuringUnitId = productData.PrimaryMeasuringUnitId;
                                          var taxPrice = parseFloat(productData.TaxRate);
                                          data.TaxPrice = taxPrice;

                                          var price = 0;
                                          var tax = 0;
                                          var rate = 0;

                                          rate = parseFloat(productData.data.PurchasePrice);

                                          // if (rate > 0) {

                                          // data.MRP = productData.PurchasePrice.toString();
                                          var convertedCurrencyRate = rate;
                                          data.PPrice = productData.data.PurchasePrice.toString();
                                          data.MRP = convertedCurrencyRate.toFixed(2);

                                          var quantity = parseFloat(data.data.Quantity);
                                          var discount = parseFloat(data.data.Discount);

                                          if (data.data.Quantity == "" || data.Quantity == undefined) {
                                              quantity = 0;
                                          }
                                          if (data.data.Discount == "" || data.Discount == undefined) {
                                              discount = 0;
                                          }
                                          // price = rate - ((rate * discount) / 100);
                                          price = convertedCurrencyRate - ((convertedCurrencyRate * discount) / 100);

                                          data.Price = price.toFixed(2);

                                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                                              tax = (price * quantity) * taxPrice / 100;
                                              data.TaxTotal = tax.toFixed(2);

                                              data.Tax = productData.data.TaxCategory;
                                              data.TaxId = productData.data.TaxCategoryId;
                                          } else {
                                              data.TaxPrice = 0;
                                              data.TaxTotal = 0;
                                          }
                                          data.Amount = (price * quantity).toFixed(2);
                                          data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                                          //}
                                          $scope.calculateGrandTotal();

                                      } else {
                                          $rootScope.showErrorNotification(productData.data.Title, productData.data.Message);
                                      }
                                      $scope.IsProductDisabled = false;
                                      //$scope.ClearProduct();
                                      $scope.addProductWindow.close();

                                  });
                          }
                      };

                      $scope.CancelProduct = function (event) {
                          event.preventDefault();
                          $scope.addProductWindow.close();

                      };

                  };

                  $scope.calculateGrandTotal = function () {

                      var amount = 0;
                      var taxTotal = 0;
                      var totalBillTax = 0;

                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          amount = amount + parseFloat($scope.Bill.BillDetailsModel[i].Amount);
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxTotal = taxTotal + parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal)
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount)
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (amount * billTax) / 100;

                      $scope.Bill.BillTotal = amount.toFixed(2);
                      $scope.Bill.BillTax = (taxTotal + totalBillTax).toFixed(2);


                      if (((amount + taxTotal + totalBillTax + freight + transportation) - discount) == 0) {
                          $scope.Bill.BillGrandTotal = 0;
                          return;
                      }

                      if (discount > (amount + taxTotal + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (amount + taxTotal + totalBillTax + freight + transportation).toFixed(2);
                          return;
                      }

                      $scope.Bill.BillGrandTotal = ((amount + taxTotal + totalBillTax + freight + transportation) - discount).toFixed(2);

                  }

                  $scope.productChange = function (e, data, index) {

                      var selectedCmb = e.sender.dataItem();
                      data.IsProductService = false;
                      $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                      data.MakeReadOnly = false;
                      data.Product = selectedCmb.Name;
                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      if (selectedCmb.Id == "0" || selectedCmb.Id == "") {
                          data.Quantity = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.PPrice = 0;
                          data.Price = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }


                      if (selectedCmb.IsService) {
                          //  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                          var taxPrice = 0;
                          data.IsProductService = true;
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxPrice = parseFloat(selectedCmb.TaxRate);
                              data.Tax = selectedCmb.TaxCategory;
                              data.TaxId = selectedCmb.TaxCategoryId;
                          }

                          data.TaxPrice = taxPrice;
                          data.TaxTotal = 0;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                          $scope.calculateGrandTotal();
                          return;
                      }





                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetMeasuringUnitByProductId",
                          params: { productId: selectedCmb.Id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = data.data;
                          });

                      data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(selectedCmb.TaxRate);
                      data.TaxPrice = taxPrice;

                      var price = 0;
                      var tax = 0;
                      var rate = 0;

                      rate = parseFloat(selectedCmb.PurchasePrice);

                      //if (rate > 0) {

                      // data.Price = selectedCmb.PurchasePrice.toString();
                      // data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      // price = rate - ((rate * discount) / 100);
                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);

                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  }

                  $scope.measuringChange = function (e, data) {

                      var selectedCmb = e.sender.dataItem();
                      if (selectedCmb.MeasuringUnitId == "0" || selectedCmb.MeasuringUnitId == "") {
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }

                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      // data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      // data.TaxPrice = taxPrice;
                      //data.Tax = data.TaxCategory;
                      // data.TaxId = data.TaxCategoryId;
                      var price = 0;
                      var tax = 0;
                      var rate = 0;
                      rate = parseFloat(selectedCmb.PurchasePrice);

                      // if (rate > 0) {

                      //data.Price = selectedCmb.PurchasePrice.toString();
                      //data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }
                      // price = rate - ((rate * discount) / 100);

                      price = rate - ((rate * discount) / 100);

                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);
                          //  data.TaxTotal = 0;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  };

                  $scope.quantityChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.billDiscountChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.priceChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.discountChange = function () {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var totalAmount = 0;
                      var totalBillTax = 0;
                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          var amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                          if (!isNaN(amount)) {
                              totalAmount = totalAmount + amount;
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount);
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (totalAmount * billTax) / 100;

                      if (discount > (totalAmount + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (totalAmount + totalBillTax + freight + transportation).toFixed(2);
                      } else {
                          $scope.Bill.BillGrandTotal = ((totalAmount + totalBillTax + freight + transportation) - discount).toFixed(2);
                      }

                  }

                  $scope.taxChange = function () {
                      if ($scope.Bill.StringTaxId == "0") {

                          $scope.IsTaxShow = true;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {

                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);

                              totalAmount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount) + taxPrice;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = taxPrice.toFixed(2);
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }
                      } else {
                          $scope.IsTaxShow = false;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);
                              $scope.Bill.BillDetailsModel[i].TaxPrice = 0;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = 0;

                              var Amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                              var totalAmount = Amount - taxPrice;
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }

                      }
                      $scope.calculateGrandTotal();
                  };

                  $scope.addRow = function () {
                      $scope.Bill.BillDetailsModel.push({
                          "ProductId": 0,
                          "MeasuringUnitId": 0,
                          "Quantity": 0,
                          "MRP": 0,
                          "Discount": 0,
                          "PPrice": 0,
                          "Price": 0,
                          "Amount": 0,
                          "TaxPrice": 0,
                          "TaxId": 0,
                          "TaxTotal": 0,
                          "TotalAmount": 0,
                          "Description": "",
                          "IsDeleted": false,
                          "MakeReadOnly": true,
                      });
                  };

                  $scope.ClearMe = function () {

                      $scope.Bill.BillNumber = "";
                      $scope.Bill.BillDate = "";
                      $scope.Bill.Narration = "";
                      $scope.Bill.BillTotal = 0;
                      $scope.Bill.OtherDetails = "";
                      $scope.Bill.BillTax = 0;
                      $scope.Bill.TermsAndConditions = "";
                      $scope.Bill.Discount = 0;
                      $scope.Bill.BillGrandTotal = 0;
                      $scope.Bill.WareHouseId = "";
                      $scope.IsReadOnly = false;

                      $scope.Bill.BillDetailsModel = [{ "ProductId": 0, "MeasuringUnitId": 0, "Description": "", "Quantity": 0, "MRP": 0, "Price": 0, "PPrice": 0, "Discount": 0, "Amount": 0, "TaxId": 0, "TaxPrice": 0, "TaxTotal": 0, "TotalAmount": 0, "IsDeleted": false }]

                      document.getElementById("BillNumber").focus();
                  };

                  $scope.removeRow = function (data) {
                      var index = $scope.Bill.BillDetailsModel.indexOf(data);
                      $scope.Bill.BillDetailsModel.splice(index, 1);
                      $scope.calculateGrandTotal();
                  };

                  $scope.GotoNew = function () {
                      $location.path('/WastageManagement');
                  };

                  //billAttach
                  $scope.onBillAttachSuccess = function (e) {

                      if (e.operation == "upload") {
                          for (var i = 0; i < e.files.length; i++) {
                              $scope.Bill.AttachmentFile.push({ RandomName: e.response.fileNames[i], OriginalName: e.files[i].name });
                              e.files[i].name = e.response.fileNames[i];
                          }
                      } else if (e.operation == "remove") {
                          for (var i = 0; i < e.files.length; i++) {

                              var index = $scope.getIndexOf($scope.Bill.AttachmentFile, e.files[i].name, "RandomName");

                              if (index != -1) {
                                  $scope.Bill.AttachmentFile.splice(index, 1);
                              }

                          }
                      }

                  };

                  $scope.onBillAttachError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };

                  //emailAttach
                  $scope.onSuccess = function (e) {

                      if (e.operation == "upload") {
                          for (var i = 0; i < e.files.length; i++) {

                              $scope.SendInvoiceEmail.AttachmentFile.push({ RandomName: e.response.fileNames[i], OriginalName: e.files[i].name });
                              e.files[i].name = e.response.fileNames[i];
                          }
                      } else if (e.operation == "remove") {
                          for (var i = 0; i < e.files.length; i++) {

                              var index = $scope.getIndexOf($scope.SendInvoiceEmail.AttachmentFile, e.files[i].name, "RandomName");
                              if (index != -1) {
                                  $scope.SendInvoiceEmail.AttachmentFile.splice(index, 1);
                              }
                          }
                      }
                  };

                  $scope.getIndexOf = function (arr, val, prop) {
                      var l = arr.length,
                          k = 0;
                      for (k = 0; k < l; k = k + 1) {
                          if (arr[k][prop] === val) {
                              return k;
                          }
                      }
                      return -1;
                  };

                  $scope.onError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };

                  //save
                  $scope.Save = function (event) {
                      event.preventDefault();

                      if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                          return;
                      }

                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;
                          $http({
                              method: "POST",
                              url: "Admin/Bill/InsertWastageManagement",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);

                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                                  $scope.IsDisabled = false;
                              });
                      }
                  };

                  $scope.SaveAndPrint = function (event) {
                      event.preventDefault();

                      if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                          return;
                      }
                      if ($scope.validator.validate()) {
                          $http({
                              method: "POST",
                              url: "Admin/Bill/InsertWastageManagement",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      window.open('/Admin/Bill/DownloadInvoiceAsPdf/' + data.data.BillId, '_blank');
                                      event.preventDefault();

                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                              });
                      }
                  };

                  $scope.SaveAndSend = function (event) {
                      event.preventDefault();

                      if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                          return;
                      }
                      if ($scope.validator.validate()) {
                          $http({
                              method: "POST",
                              url: "Admin/Bill/InsertWastageManagement",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  if (data.data.Status) {
                                      //$scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      $rootScope.RefreshLowStockNotification();

                                      //send email
                                      $scope.sendEmail.refresh();
                                      $scope.sendEmail.title("Send Email");
                                      $scope.sendEmail.open();
                                      $scope.sendEmail.center();

                                      $http({
                                          method: "GET",
                                          url: "/Admin/Bill/GetEmailDetailsByBillId",
                                          params: { billId: data.data.BillId },
                                          cache: false
                                      })
                                          .then(function (data) {
                                              $scope.SendInvoiceEmail = data.data;
                                          });

                                      $scope.SendEmail = function (event) {
                                          event.preventDefault();

                                          if (data.data.BillId == "" || data.data.BillId == undefined) {
                                              return;
                                          }

                                          if ($scope.sendEmailValidator.validate()) {
                                              $scope.IsSendDisabled = true;
                                              $http({
                                                  method: "POST",
                                                  url: "Admin/Bill/SendInvoice",
                                                  data: { billId: data.data.BillId, model: $scope.SendInvoiceEmail },
                                                  cache: false
                                              })
                                                  .then(function (data) {
                                                      if (data.data.Status) {
                                                          $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                                          $scope.sendEmail.close();
                                                          $scope.GotoNew();
                                                          event.preventDefault();
                                                      } else {
                                                          $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                                      }
                                                      $scope.IsSendDisabled = false;
                                                  });
                                          }
                                      };

                                      $scope.CancelSend = function (event) {
                                          event.preventDefault();
                                          $scope.sendEmail.close();
                                          $scope.GotoNew();

                                      };

                                      event.preventDefault();
                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                              });
                      }
                  };

              }
          })

          //EditWastageManagement
          .when('/WastageManagement/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditWastageManagement',
              setTitle: 'Admin.Breadcrumb.WastageManagement',
              templateUrl: '/Admin/Bill/CreateOrUpdateWastageManagement',
              caseInsensitiveMatch: true,
              controller: function ($scope, $http, $timeout, $routeParams, $location, $rootScope) {

                  $scope.MeasuringUnits = [];
                  $scope.Bill = {};
                  $scope.SendInvoiceEmail = {};
                  $scope.LastAttachedCount = 0;
                  $scope.editRow = function (data) {
                      data.MakeReadOnly = true;
                  }


                  $http({
                      method: "GET",
                      url: "/Admin/Bill/GetWastageManagementById/" + $routeParams.Id,
                      cache: false
                  })
                      .then(function (data) {

                          $scope.Bill = data.data;
                          $scope.LastAttachedCount = data.data.AttachmentFile.length;
                          $scope.IsTaxShow = true;
                          $scope.IsTaxDisabled = true;
                          $scope.IsReadOnly = true;
                          $scope.Bill.BillDate = kendo.toString(kendo.parseDate(data.data.StringDate), data.data.SystemDateFormat);

                          if ($scope.Bill.BillTax == 0) {

                              $scope.IsTaxShow = false;
                              $scope.Bill.StringTaxId = 1;
                          }

                          $scope.customProductOptions = {
                              // optionLabel: "--- Select Product ---",
                              //dataSource: $scope.productDataSource,
                              dataTextField: $scope.Bill.ProductFilterBy,
                              dataValueField: "Id",
                              headerTemplate: '<div class="dropdown-headerCustomProduct">' +
                                  '<span><button type="button" class="btn btn-primary" ng-click="addProdct(data.data)" style="padding:1px 10px;height:19px;"><i class="fa fa-plus icon-only"></i></button></span>' +
                                  '<span class="k-widget k-header secondHeaderSpan">Name</span>' +
                                  '<span class="k-widget k-header">Code</span>' +
                                  '<span class="k-widget k-header">PurchasePrice</span>' +
                                  '<span class="k-widget k-header">Tax Rate</span>' +
                                  '</div>',
                              //'<div>' +
                              //'<button type="button" class="btn btn-primary" ng-click="addProdct(data.data)" style="width:353px">Add New Product</button>' +
                              //'</div>',

                              // using {{angular}} templates:
                              valueTemplate: '<span>{{dataItem.Name}}</span>',
                              template: '<div class="customProductSpan"><span></span><span class="k-state-default secondSpan">{{dataItem.Name}}</span>' + '<span class="k-state-default codeSpan">{{dataItem.Code}}</span>' +
                                  '<span class="k-state-default priceSpan">{{dataItem.PurchasePrice}}</span>' + '<span class="k-state-default salesAndTaxSpan">{{dataItem.TaxRate}}</span></div>'
                          };

                          $scope.customUnitOptions = {

                              //placeholder: "Select Measuring Unit...",
                              dataTextField: "ShortName",
                              dataValueField: "MeasuringUnitId",
                              //select: MeasuringUnit_OnChange,
                              headerTemplate: '<div class="dropdown-headerUnit">' +
                                  '<span class="k-widget k-header">Name </span>' +
                                  '<span class="k-widget k-header">Purchase Price</span>' +
                                  '</div>',
                              valueTemplate: '<span>{{dataItem.ShortName}}</span>',
                              template: '<div class="customUnitSpan"><span class="k-state-default">{{dataItem.MeasuringUnit}}</span><span class="k-state-default">{{dataItem.PurchasePrice}}</span></div>',

                          };

                          $http({
                              method: "GET",
                              url: "/Admin/Bill/GetAllWareHouse",
                              cache: false
                          })
                              .then(function (data) {
                                  $scope.wareHouseDataSource = data.data;
                              });

                          $http({
                              method: "GET",
                              url: "/Admin/Bill/GetAllProduct",
                              cache: false
                          })
                              .then(function (data) {
                                  $scope.AllMyProducts = data.data;
                              });

                      });

                  $scope.numberOnly = function (event) {
                      if (event.keyCode == 46 || event.keyCode == 8 || event.keyCode == 9 || event.keyCode == 110 || (!event.shiftKey && event.keyCode == 190) || (!event.shiftKey && event.keyCode == 173) || (!event.shiftKey && event.keyCode == 189) ||
                          event.keyCode == 27 || event.keyCode == 13 ||
                          (event.keyCode == 65 && event.ctrlKey === true) ||
                          (event.keyCode == 67 && event.ctrlKey === true) ||
                          (event.keyCode == 86 && event.ctrlKey === true) ||
                          (event.keyCode == 90 && event.ctrlKey === true) ||
                          (event.keyCode >= 35 && event.keyCode <= 39)) {
                          return;
                      } else {
                          // If it's not a number stop the keypress
                          if (event.shiftKey || (event.keyCode < 48 || event.keyCode > 57) && (event.keyCode < 96 || event.keyCode > 105)) {
                              event.preventDefault();
                          }
                      }
                  };

                  $scope.addProdct = function (data) {
                      //alert(data.data.Quantity);
                      //event.preventDefault();
                      $scope.Product = {};
                      $scope.Product.ProductMaterialsModel = [];

                      $scope.addProductWindow.refresh();
                      $scope.addProductWindow.title("Add New Product");
                      $scope.addProductWindow.open();
                      $scope.addProductWindow.center();


                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetMeasuringUnitStauts",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.Product.IsMeasuringUnitRequired = billData.data.IsMeasuringUnitRequired;
                              $scope.Product.PrimaryMeasuringUnitId = billData.data.PrimaryMeasuringUnitId;
                              $scope.Product.IsTaxEnabled = billData.data.IsTaxEnabled;

                              $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.categoryDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllProductTaxCategory",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.taxDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllPrimaryMeasuringUnit",
                          cache: false
                      })
                          .then(function (billData) {
                              $scope.primaryMeasuringUnitDataSource = billData.data;
                          });

                      $http({
                          method: "GET",
                          url: "/Admin/DTProduct/GetAllRawMaterials",
                          cache: false
                      })
                          .then(function (data) {
                              $scope.rawMaterialDataSource = data.data;
                          });

                      $scope.measuringUnitChange = function () {

                          if ($scope.Product.PrimaryMeasuringUnitId == 0 || $scope.Product.PrimaryMeasuringUnitId == "" || $scope.Product.PrimaryMeasuringUnitId == undefined) {
                              $scope.Product.MeasuringUnitPriceModel = null;
                              return;
                          }

                          $http({
                              method: "POST",
                              url: "/Admin/DTProduct/GetAllMeasuringUnitSiblings",
                              params: { productId: $scope.Product.Id, measuringUnitId: $scope.Product.PrimaryMeasuringUnitId },
                              cache: false
                          })
                              .then(function (billData) {
                                  var salesPrice = parseFloat($scope.Product.SalesPrice);
                                  var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                                  if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                                      salesPrice = 0;
                                  }

                                  if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                                      purchasePrice = 0;
                                  }

                                  for (var i = 0; i < billData.data.length; i++) {
                                      billData.data[i].SalesPrice = (salesPrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                      billData.data[i].PurchasePrice = (purchasePrice * billData.data[i].PrimaryUnitConversion).toFixed(2);
                                  }
                                  $scope.Product.MeasuringUnitPriceModel = billData.data;

                              })

                      };

                      $scope.productPriceChange = function () {

                          var salesPrice = parseFloat($scope.Product.SalesPrice);
                          var purchasePrice = parseFloat($scope.Product.PurchasePrice);

                          if ($scope.Product.SalesPrice == "" || $scope.Product.SalesPrice == undefined) {
                              salesPrice = 0;
                          }

                          if ($scope.Product.PurchasePrice == "" || $scope.Product.PurchasePrice == undefined) {
                              purchasePrice = 0;
                          }

                          if ($scope.Product.MeasuringUnitPriceModel != undefined) {
                              for (var i = 0; i < $scope.Product.MeasuringUnitPriceModel.length; i++) {
                                  $scope.Product.MeasuringUnitPriceModel[i].SalesPrice = (salesPrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                                  $scope.Product.MeasuringUnitPriceModel[i].PurchasePrice = (purchasePrice * $scope.Product.MeasuringUnitPriceModel[i].PrimaryUnitConversion).toFixed(2);
                              }
                          }
                      };

                      $scope.ClearProduct = function () {
                          //event.preventDefault();

                          $scope.Product.Name = "";
                          $scope.Product.Code = "";
                          $scope.Product.Description = "";
                          $scope.Product.ProductCategoryId = "";
                          $scope.Product.TaxCategoryId = "";
                          $scope.Product.ISTaxExempt = 0;
                          $scope.Product.SalesPrice = "";
                          $scope.Product.PurchasePrice = "";
                          $scope.Product.MinStockQuantity = "";
                          $scope.Product.MRP = "";
                          $scope.Product.MinSalesRate = "";
                          $scope.Product.IsActive = 0;
                          $scope.Product.LowStockNotification = 0;
                          $scope.Product.IsAllowBatch = 0;
                          $scope.Product.IsMultipleMeasuringUnitEnable = 0;
                          $scope.Product.PrimaryMeasuringUnitId = "";
                          $scope.Product.MeasuringUnitPriceModel = null;
                          $scope.Product.IsProduction = 0;

                          $scope.Product.ProductMaterialsModel = [{ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false }];

                          document.getElementById("Name").focus();
                      };

                      $scope.addMaterialRow = function () {
                          $scope.Product.ProductMaterialsModel.push({ "RawMaterialId": 0, "Quantity": 0, "IsDeleted": false });
                      };

                      $scope.removeMaterialRow = function (data) {

                          var index = $scope.Product.ProductMaterialsModel.indexOf(data);
                          $scope.Product.ProductMaterialsModel.splice(index, 1);
                      };

                      $scope.SaveProduct = function (event) {
                          event.preventDefault();

                          // alert(data.data.ProductId);
                          if ($scope.Product.validator.validate()) {
                              $scope.IsProductDisabled = true;
                              $http({
                                  method: "POST",
                                  url: "Admin/DTProduct/InsertBillProductPopup",
                                  data: $scope.Product,
                                  cache: false
                              })
                                  .then(function (productData) {
                                      if (productData.data.Status) {
                                          $rootScope.showSuccessNotification(productData.data.Title, productData.data.Message);

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetAllProduct",
                                              cache: false
                                          })
                                              .then(function (billData) {
                                                  $scope.AllMyProducts = billData;
                                                  //data.AllMyProducts = $scope.AllMyBillProducts;
                                              });

                                          var index = $scope.Bill.BillDetailsModel.indexOf(data)
                                          //$scope.AllMyProducts.read();
                                          data.ProductId = productData.data.Id;
                                          //$scope.Bill.BillDetailsModel[index].ProductId = productData.ProductId;

                                          $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;

                                          $http({
                                              method: "GET",
                                              url: "/Admin/Bill/GetMeasuringUnitByProductId",
                                              params: { productId: productData.data.Id },
                                              cache: false
                                          })
                                              .then(function (measureData) {
                                                  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = measureData.data;
                                              });

                                          //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                                          //if (currencyRate == "" || currencyRate == undefined || currencyRate == 0) {
                                          //    $scope.Bill.CurrencyRate = 0;
                                          //    currencyRate = 1;
                                          //}

                                          data.MeasuringUnitId = productData.data.PrimaryMeasuringUnitId;
                                          var taxPrice = parseFloat(productData.data.TaxRate);
                                          data.TaxPrice = taxPrice;

                                          var price = 0;
                                          var tax = 0;
                                          var rate = 0;

                                          rate = parseFloat(productData.data.PurchasePrice);

                                          // if (rate > 0) {

                                          // data.MRP = productData.PurchasePrice.toString();
                                          var convertedCurrencyRate = rate;
                                          data.PPrice = productData.data.PurchasePrice.toString();
                                          data.MRP = convertedCurrencyRate.toFixed(2);

                                          var quantity = parseFloat(data.Quantity);
                                          var discount = parseFloat(data.Discount);

                                          if (data.Quantity == "" || data.Quantity == undefined) {
                                              quantity = 0;
                                          }
                                          if (data.Discount == "" || data.Discount == undefined) {
                                              discount = 0;
                                          }
                                          // price = rate - ((rate * discount) / 100);
                                          price = convertedCurrencyRate - ((convertedCurrencyRate * discount) / 100);

                                          data.Price = price.toFixed(2);

                                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                                              tax = (price * quantity) * taxPrice / 100;
                                              data.TaxTotal = tax.toFixed(2);

                                              data.Tax = productData.data.TaxCategory;
                                              data.TaxId = productData.data.TaxCategoryId;
                                          } else {
                                              data.TaxPrice = 0;
                                              data.TaxTotal = 0;
                                          }
                                          data.Amount = (price * quantity).toFixed(2);
                                          data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                                          //}
                                          $scope.calculateGrandTotal();

                                      } else {
                                          $rootScope.showErrorNotification(productData.data.Title, productData.data.Message);
                                      }
                                      $scope.IsProductDisabled = false;
                                      //$scope.ClearProduct();
                                      $scope.addProductWindow.close();

                                  });
                          }
                      };

                      $scope.CancelProduct = function (event) {
                          event.preventDefault();
                          $scope.addProductWindow.close();

                      };

                  };

                  $scope.calculateGrandTotal = function () {

                      var amount = 0;
                      var taxTotal = 0;
                      var totalBillTax = 0;

                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          amount = amount + parseFloat($scope.Bill.BillDetailsModel[i].Amount);
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxTotal = taxTotal + parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal)
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount)
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (amount * billTax) / 100;

                      $scope.Bill.BillTotal = amount.toFixed(2);
                      $scope.Bill.BillTax = (taxTotal + totalBillTax).toFixed(2);


                      if (((amount + taxTotal + totalBillTax + freight + transportation) - discount) == 0) {
                          $scope.Bill.BillGrandTotal = 0;
                          return;
                      }

                      if (discount > (amount + taxTotal + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (amount + taxTotal + totalBillTax + freight + transportation).toFixed(2);
                          return;
                      }

                      $scope.Bill.BillGrandTotal = ((amount + taxTotal + totalBillTax + freight + transportation) - discount).toFixed(2);

                  }

                  $scope.productChange = function (e, data, index) {

                      var selectedCmb = e.sender.dataItem();
                      data.IsProductService = false;
                      $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                      data.MakeReadOnly = false;
                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      data.Product = selectedCmb.Name;

                      if (selectedCmb.Id == "0" || selectedCmb.Id == "") {
                          data.Quantity = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.PPrice = 0;
                          data.Price = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }


                      if (selectedCmb.IsService) {
                          //  $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = null;
                          var taxPrice = 0;
                          data.IsProductService = true;
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                              taxPrice = parseFloat(selectedCmb.TaxRate);
                              data.Tax = selectedCmb.TaxCategory;
                              data.TaxId = selectedCmb.TaxCategoryId;
                          }

                          data.TaxPrice = taxPrice;
                          data.TaxTotal = 0;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                          $scope.calculateGrandTotal();
                          return;
                      }





                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetMeasuringUnitByProductId",
                          params: { productId: selectedCmb.Id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.Bill.BillDetailsModel[index].MeasuringUnitModels = data.data;
                          });

                      data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(selectedCmb.TaxRate);
                      data.TaxPrice = taxPrice;

                      var price = 0;
                      var tax = 0;
                      var rate = 0;

                      rate = parseFloat(selectedCmb.PurchasePrice);

                      //if (rate > 0) {

                      // data.Price = selectedCmb.PurchasePrice.toString();
                      // data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      // price = rate - ((rate * discount) / 100);
                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);

                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  }

                  $scope.measuringChange = function (e, data) {

                      var selectedCmb = e.sender.dataItem();
                      if (selectedCmb.MeasuringUnitId == "0" || selectedCmb.MeasuringUnitId == "") {
                          data.Quantity = 0;
                          data.Price = 0;
                          data.PPrice = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.TaxPrice = 0;
                          data.Tax = selectedCmb.TaxCategory;
                          data.TaxId = selectedCmb.TaxCategoryId;
                          data.Amount = 0;
                          data.TotalAmount = 0;
                          data.TaxTotal = 0;
                          data.Description = "";
                          $scope.calculateGrandTotal();
                          return;
                      }

                      //var currencyRate = parseFloat($scope.Bill.CurrencyRate);
                      //if ($scope.Bill.CurrencyRate == "" || $scope.Bill.CurrencyRate == undefined) {
                      //    $scope.Bill.CurrencyRate = 0;
                      //    currencyRate = 1;
                      //}

                      // data.MeasuringUnitId = selectedCmb.PrimaryMeasuringUnitId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      // data.TaxPrice = taxPrice;
                      //data.Tax = data.TaxCategory;
                      // data.TaxId = data.TaxCategoryId;
                      var price = 0;
                      var tax = 0;
                      var rate = 0;
                      rate = parseFloat(selectedCmb.PurchasePrice);

                      // if (rate > 0) {

                      //data.Price = selectedCmb.PurchasePrice.toString();
                      //data.MRP = selectedCmb.PurchasePrice.toString();

                      //var convertedCurrencyRate = rate * currencyRate;
                      data.PPrice = selectedCmb.PurchasePrice.toString();
                      data.MRP = rate.toFixed(2);

                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }
                      // price = rate - ((rate * discount) / 100);

                      price = rate - ((rate * discount) / 100);

                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                          data.TaxTotal = tax.toFixed(2);
                          //  data.TaxTotal = 0;
                      } else {
                          data.TaxPrice = 0;
                          data.TaxTotal = 0;
                      }
                      data.Amount = (price * quantity).toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);
                      //}
                      $scope.calculateGrandTotal();
                  };

                  $scope.quantityChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.billDiscountChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.priceChange = function (data) {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var taxPrice = parseFloat(data.TaxPrice);
                      var rate = parseFloat(data.MRP);
                      var quantity = parseFloat(data.Quantity);
                      var discount = parseFloat(data.Discount);
                      var price = parseFloat(data.Price);

                      var tax = 0;

                      if (data.Quantity == "" || data.Quantity == undefined) {
                          quantity = 0;
                      }
                      if (data.MRP == "" || data.MRP == undefined) {
                          rate = 0;
                      }
                      if (data.Discount == "" || data.Discount == undefined) {
                          discount = 0;
                      }

                      price = rate - ((rate * discount) / 100);
                      data.Price = price.toFixed(2);

                      if ($scope.Bill.IsTaxEnabled && $scope.IsTaxShow) {
                          tax = (price * quantity) * taxPrice / 100;
                      }

                      data.Amount = (price * quantity).toFixed(2);
                      data.TaxTotal = tax.toFixed(2);
                      data.TotalAmount = ((price * quantity) + tax).toFixed(2);

                      $scope.calculateGrandTotal();
                  };

                  $scope.discountChange = function () {

                      //var stringTaxId = $scope.Bill.StringTaxId;
                      var totalAmount = 0;
                      var totalBillTax = 0;
                      for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                          var amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                          if (!isNaN(amount)) {
                              totalAmount = totalAmount + amount;
                          }
                      }
                      var discount = parseFloat($scope.Bill.Discount);
                      if ($scope.Bill.Discount == "" || $scope.Bill.Discount == undefined) {
                          discount = 0;
                      }

                      var freight = parseFloat($scope.Bill.Frieght)
                      if ($scope.Bill.Frieght == "" || $scope.Bill.Frieght == undefined) {
                          freight = 0;
                      }

                      var transportation = parseFloat($scope.Bill.Transportation)
                      if ($scope.Bill.Transportation == "" || $scope.Bill.Transportation == undefined) {
                          transportation = 0;
                      }

                      var billTax = parseFloat($scope.Bill.BillTaxRate)
                      if ($scope.Bill.BillTaxRate == "" || $scope.Bill.BillTaxRate == undefined) {
                          billTax = 0;
                      }
                      totalBillTax = (totalAmount * billTax) / 100;

                      if (discount > (totalAmount + totalBillTax + freight + transportation)) {
                          $rootScope.showWarningNotification("", "Discount should not greater than grand total");
                          $scope.Bill.Discount = 0;
                          $scope.Bill.BillGrandTotal = (totalAmount + totalBillTax + freight + transportation).toFixed(2);
                      } else {
                          $scope.Bill.BillGrandTotal = ((totalAmount + totalBillTax + freight + transportation) - discount).toFixed(2);
                      }

                  }

                  $scope.taxChange = function () {
                      if ($scope.Bill.StringTaxId == "0") {

                          $scope.IsTaxShow = true;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {

                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);

                              totalAmount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount) + taxPrice;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = taxPrice.toFixed(2);
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }
                      } else {
                          $scope.IsTaxShow = false;
                          var taxTotal = 0;
                          for (var i = 0; i < $scope.Bill.BillDetailsModel.length; i++) {
                              var taxPrice = parseFloat($scope.Bill.BillDetailsModel[i].TaxTotal);
                              $scope.Bill.BillDetailsModel[i].TaxPrice = 0;
                              $scope.Bill.BillDetailsModel[i].TaxTotal = 0;

                              var Amount = parseFloat($scope.Bill.BillDetailsModel[i].TotalAmount);
                              var totalAmount = Amount - taxPrice;
                              $scope.Bill.BillDetailsModel[i].TotalAmount = totalAmount.toFixed(2);
                          }

                      }
                      $scope.calculateGrandTotal();
                  };

                  $scope.addRow = function () {
                      $scope.Bill.BillDetailsModel.push({
                          "ProductId": 0,
                          "MeasuringUnitId": 0,
                          "Quantity": 0,
                          "MRP": 0,
                          "Discount": 0,
                          "PPrice": 0,
                          "Price": 0,
                          "Amount": 0,
                          "TaxPrice": 0,
                          "TaxId": 0,
                          "TaxTotal": 0,
                          "TotalAmount": 0,
                          "Description": "",
                          "IsDeleted": false,
                          "MakeReadOnly": true,
                      });
                  };

                  $scope.ClearMe = function () {

                      $scope.Bill.BillNumber = "";
                      $scope.Bill.BillDate = "";
                      $scope.Bill.Narration = "";
                      $scope.Bill.BillTotal = 0;
                      $scope.Bill.OtherDetails = "";
                      $scope.Bill.BillTax = 0;
                      $scope.Bill.TermsAndConditions = "";
                      $scope.Bill.Discount = 0;
                      $scope.Bill.BillGrandTotal = 0;
                      $scope.Bill.WareHouseId = "";
                      $scope.IsReadOnly = false;
                      $scope.Bill.BillDetailsModel = [{ "ProductId": 0, "MeasuringUnitId": 0, "Description": "", "Quantity": 0, "MRP": 0, "Discount": 0, "PPrice": 0, "Price": 0, "Amount": 0, "TaxId": 0, "TaxPrice": 0, "TaxTotal": 0, "TotalAmount": 0, "IsDeleted": false }]

                      document.getElementById("BillNumber").focus();
                  };

                  $scope.removeRow = function (data) {

                      var index = $scope.Bill.BillDetailsModel.indexOf(data);
                      if (data.Id == undefined || data.Id == 0) {
                          $scope.Bill.BillDetailsModel.splice(index, 1);
                      } else {
                          data.Quantity = 0;
                          data.TaxTotal = 0;
                          data.MRP = 0;
                          data.Discount = 0;
                          data.Amount = 0;
                          data.TaxPrice = 0;
                          data.TaxId = 0;
                          data.Tax = "";
                          data.Price = 0;
                          data.PPrice = 0;
                          data.TotalAmount = 0;
                          data.description = "";
                          data.ProductId = 0;
                          data.MeasuringUnitId = 0;
                          data.Product = "";
                          data.IsDeleted = true;
                      }

                      $scope.calculateGrandTotal();
                  };

                  $scope.GotoNew = function () {
                      $location.path('/WastageManagement');
                  };

                  $scope.BillPrint = function (event) {

                      if ($scope.Bill.Id == "" || $scope.Bill.Id == undefined) {
                          return;
                      }

                      window.open('/Admin/Bill/DownloadInvoiceAsPdf/' + $scope.Bill.Id, '_blank');
                      event.preventDefault();
                  };

                  //billAttach
                  $scope.onBillAttachSuccess = function (e) {

                      if (e.operation == "upload") {
                          for (var i = 0; i < e.files.length; i++) {
                              $scope.Bill.AttachmentFile.push({ RandomName: e.response.fileNames[i], OriginalName: e.files[i].name });
                              e.files[i].name = e.response.fileNames[i];
                          }
                      } else if (e.operation == "remove") {
                          for (var i = 0; i < e.files.length; i++) {

                              var index = $scope.getIndexOf($scope.Bill.AttachmentFile, e.files[i].name, "RandomName");

                              if (index != -1) {
                                  $scope.Bill.AttachmentFile.splice(index, 1);
                              }

                          }
                      }

                  };

                  $scope.onBillAttachError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };

                  $scope.onBillAttachRemove = function (Attach) {

                      $http({
                          method: "POST",
                          url: "Admin/Bill/RemoveBillAttach",
                          params: { fileName: Attach.RandomName },
                          cache: false
                      })
                          .then(function (data) {

                              if (data.data.Status) {
                                  var index = $scope.getIndexOf($scope.Bill.AttachmentFile, Attach.RandomName, "RandomName");

                                  if (index != -1) {
                                      $scope.Bill.AttachmentFile.splice(index, 1);
                                      if ($scope.LastAttachedCount >= 0)
                                          $scope.LastAttachedCount = $scope.LastAttachedCount - 1;
                                  }
                              } else {
                                  $rootScope.showErrorNotification("", data.data.Message + Attach.OriginalName);
                              }
                          });
                  };

                  $scope.onBillAttachOpen = function (Attach, event) {

                      if (Attach.RandomName == "" || Attach.RandomName == undefined) {
                          $rootScope.showWarningNotification("", "File Not Found...");
                          return;
                      }

                      window.open('/Admin/Bill/ViewAttachFiles?fileName=' + Attach.RandomName + '&oFileName=' + Attach.OriginalName, '_blank');
                      event.preventDefault();

                  };

                  //emailAttach
                  $scope.onSuccess = function (e) {

                      if (e.operation == "upload") {
                          for (var i = 0; i < e.files.length; i++) {

                              $scope.SendInvoiceEmail.AttachmentFile.push({ RandomName: e.response.fileNames[i], OriginalName: e.files[i].name });
                              e.files[i].name = e.response.fileNames[i];
                          }
                      } else if (e.operation == "remove") {
                          for (var i = 0; i < e.files.length; i++) {

                              var index = $scope.getIndexOf($scope.SendInvoiceEmail.AttachmentFile, e.files[i].name, "RandomName");
                              if (index != -1) {
                                  $scope.SendInvoiceEmail.AttachmentFile.splice(index, 1);
                              }
                          }
                      }
                  };

                  $scope.getIndexOf = function (arr, val, prop) {
                      var l = arr.length,
                          k = 0;
                      for (k = 0; k < l; k = k + 1) {
                          if (arr[k][prop] === val) {
                              return k;
                          }
                      }
                      return -1;
                  };

                  $scope.onError = function (e) {

                      var files = e.files;
                      //var fileLength = $scope.files.length;
                      if (e.operation == "upload") {
                          $rootScope.showErrorNotification("", "Failed to upload " + files.length + " files");
                      } else if (e.operation == "remove") {
                          $rootScope.showErrorNotification("", "Failed to remove " + files.length + " files");
                      }
                  };

                  $scope.SendInvoice = function (event, IsGotoList) {
                      event.preventDefault();

                      $scope.sendEmail.refresh();
                      $scope.sendEmail.title("Send Email");
                      $scope.sendEmail.open();
                      $scope.sendEmail.center();

                      $scope.SendInvoiceEmail.AttachmentFile = [];
                      $(".k-upload-files").remove();
                      $(".k-upload-status").remove();
                      $(".k-upload.k-header").addClass("k-upload-empty");
                      $(".k-upload-button").removeClass("k-state-focused");

                      $http({
                          method: "GET",
                          url: "/Admin/Bill/GetEmailDetailsByBillId",
                          params: { billId: $scope.Bill.Id },
                          cache: false
                      })
                          .then(function (data) {
                              $scope.SendInvoiceEmail = data.data;
                          });

                      $scope.SendEmail = function (event) {
                          event.preventDefault();

                          if ($scope.Bill.Id == "" || $scope.Bill.Id == undefined) {
                              return;
                          }

                          if ($scope.sendEmailValidator.validate()) {
                              $scope.IsSendDisabled = true;
                              $http({
                                  method: "POST",
                                  url: "Admin/Bill/SendInvoice",
                                  data: { billId: $scope.Bill.Id, model: $scope.SendInvoiceEmail },
                                  cache: false
                              })
                                  .then(function (data) {
                                      if (data.data.Status) {
                                          $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                          $scope.sendEmail.close();
                                          if (IsGotoList) {
                                              $scope.GotoNew();
                                          }
                                          event.preventDefault();
                                      } else {
                                          $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                      }
                                      $scope.IsSendDisabled = false;
                                  });
                          }
                      };

                      $scope.CancelSend = function (event) {
                          event.preventDefault();
                          $scope.sendEmail.close();
                          if (IsGotoList) {
                              $scope.GotoNew();
                          }

                      };

                  };

                  //save
                  $scope.Save = function (event, dats) {
                      event.preventDefault();

                      if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                          return;
                      }
                      if ($scope.validator.validate()) {
                          $scope.IsDisabled = true;
                          //$.ajax({
                          //    url: "Admin/Bill/UpdateWastageManagement",
                          //    data: $scope.Bill,
                          //    type: 'POST',
                          //    success: function (data ) {
                          //        $scope.IsDisabled = false;
                          //        if (data.data.Status) {
                          //            $rootScope.RefreshLowStockNotification();
                          //            $scope.GotoNew();
                          //            $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                          //        } else {
                          //            $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                          //        }
                          //    }
                          //});



                          $http({
                              method: "POST",
                              url: "Admin/Bill/UpdateWastageManagement",
                              data: $scope.Bill,
                              cache: false
                          })
                              .then(function (data) {
                                  $scope.IsDisabled = false;
                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                              });






                      }
                  };

                  $scope.SaveAndPrint = function (event) {
                      event.preventDefault();

                      if ($scope.Bill.Id == "" || $scope.Bill.Id == undefined) {
                          return;
                      }

                      if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                          return;
                      }

                      if ($scope.validator.validate()) {
                          $.ajax({
                              url: "Admin/Bill/UpdateWastageManagement",
                              data: $scope.Bill,
                              type: 'POST',
                              success: function (data) {

                                  if (data.data.Status) {
                                      $rootScope.RefreshLowStockNotification();
                                      $scope.GotoNew();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      window.open('/Admin/Bill/DownloadInvoiceAsPdf/' + $scope.Bill.Id, '_blank');
                                      event.preventDefault();
                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                              }
                          });
                      }
                  };

                  $scope.SaveAndSend = function (event) {
                      event.preventDefault();

                      if ($scope.Bill.BillTotal == 0 || $scope.Bill.BillTotal == "" || $scope.Bill.BillTotal == undefined || $scope.Bill.BillGrandTotal == 0 || $scope.Bill.BillGrandTotal == "" || $scope.Bill.BillGrandTotal == undefined) {
                          return;
                      }
                      if ($scope.validator.validate()) {
                          $.ajax({
                              url: "Admin/Bill/UpdateWastageManagement",
                              data: $scope.Bill,
                              type: 'POST',
                              success: function (data) {
                                  if (data.data.Status) {
                                      //$scope.GotoNew();
                                      $rootScope.RefreshLowStockNotification();
                                      $rootScope.showSuccessNotification(data.data.Title, data.data.Message);
                                      $scope.SendInvoice(event, true);
                                      event.preventDefault();
                                  } else {
                                      $rootScope.showErrorNotification(data.data.Title, data.data.Message);
                                  }
                              }
                          });
                      }
                  };

              }
          })











          //Employee
          .when('/EmployeeFormat', {
              title: 'Admin.Breadcrumb.Employee',
              templateUrl: '/Admin/EmployeeDetail/EmployeeFormatList',
              caseInsensitiveMatch: true,
              permission: ["ReadManpowerEnquiry"],
              controller: 'EmployeeFormatCtrl'

          })

          

          .when('/BankReconciliation', {
              title: 'Admin.Breadcrumb.BankReconciliation',
              templateUrl: '/Admin/Account/BankReconciliation',
              caseInsensitiveMatch: true,
              controller: 'BankReconciliationCtrl'

          })

          .when('/VatReport', {
              title: 'Admin.Breadcrumb.VatReport',
              templateUrl: '/Admin/Account/VatReport',
              caseInsensitiveMatch: true,
              controller: 'VatReportCtrl'

          })

          //Tenent
          .when('/Partner', {
              title: 'Admin.Breadcrumb.Partner',
              templateUrl: '/Admin/Party/PartnerList',
              caseInsensitiveMatch: true,
              controller: 'TenentCtrl'

          })


          //CreateCustomer
          .when('/Partner/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.Partner',
              templateUrl: '/Admin/Party/CreateOrUpdatePartner',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCustomerCtrl'
          })




          ////FinancialYearBalance
          //.when('/FinancialYearBalance', {
          //    title: 'Admin.Breadcrumb.FinancialYearBalance',
          //    templateUrl: '/Admin/Account/FinancialYearBalanceList',
          //    caseInsensitiveMatch: true,
          //    controller: 'FinancialYearBalanceCtrl'

          //})
          //FinancialYearBalance
          .when('/FinancialYearBalance', {
              title: 'Admin.Breadcrumb.FinancialYearBalanceAdjust',
              templateUrl: '/Admin/Account/FinancialYearBalanceAdjustList',
              caseInsensitiveMatch: true,
              controller: 'FinancialYearBalanceAdjustCtrl'

          })



          //uniform

          //RequestFormList
          .when('/RequestForm', {
              title: 'Admin.Breadcrumb.RequestForm',
              templateUrl: '/Admin/Bill/RequestFormList',
              caseInsensitiveMatch: true,
              permission: ["ReadRequestForm"],
              controller: 'RequestFormCtrl'
          })

          //CreateRequestForm
          .when('/RequestForm/Create', {
              title: 'Admin.Breadcrumb.CreateRequestForm',
              setTitle: 'Admin.Breadcrumb.RequestForm',
              templateUrl: '/Admin/Bill/CreateOrUpdateRequestForm',
              caseInsensitiveMatch: true,
              permission: ["CreateRequestForm"],
              controller: 'CreateOrUpdateRequestFormCtrl'
          })

          //EditRequestForm
          .when('/RequestForm/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditRequestForm',
              setTitle: 'Admin.Breadcrumb.RequestForm',
              templateUrl: '/Admin/Bill/CreateOrUpdateRequestForm',
              caseInsensitiveMatch: true,
              permission: ["ReadRequestForm"],
              controller: 'CreateOrUpdateRequestFormCtrl'
          })

          //PurchaseGoodsReceipt
          .when('/PurchaseGoodsReceipt', {
              title: 'Admin.Breadcrumb.PurchaseGoodsReceipt',
              templateUrl: '/Admin/Bill/PurchaseGoodsReceipt',
              caseInsensitiveMatch: true,
              permission: ["ReadPurchaseGoodsReceipt"],
              controller: 'PurchaseGoodsReceiptCtrl'
          })

          //CreatePurchaseGoodsReceipt
          .when('/PurchaseGoodsReceipt/Create', {
              title: 'Admin.Breadcrumb.CreatePurchaseGoodsReceipt',
              setTitle: 'Admin.Breadcrumb.PurchaseGoodsReceipt',
              templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseGoodsReceipt',
              caseInsensitiveMatch: true,
              permission: ["CreatePurchaseGoodsReceipt"],
              controller: 'CreateOrUpdatePurchaseGoodsReceiptCtrl'
          })

          //EditPurchaseGoodsReceipt
          .when('/PurchaseGoodsReceipt/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditPurchaseGoodsReceipt',
              setTitle: 'Admin.Breadcrumb.PurchaseGoodsReceipt',
              templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseGoodsReceipt',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdatePurchaseGoodsReceiptCtrl'
          })

          //JobCard
          .when('/JobCard', {
              title: 'Admin.Breadcrumb.JobCard',
              templateUrl: '/Admin/Manpower/JobCardList',
              caseInsensitiveMatch: true,
              controller: 'JobCardCtrl'
          })


          //CreateJobCard
          .when('/JobCard/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.JobCard',
              templateUrl: '/Admin/Manpower/CreateOrUpdateJobCard',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateJobCardCtrl'
          })

          //EditJobCard
          .when('/JobCard/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.JobCard',
              templateUrl: '/Admin/Manpower/CreateOrUpdateJobCard',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateJobCardCtrl'
          })
          //ProjectList
          .when('/EquipmentActivity', {
              title: 'ProjectDetailList',
              templateUrl: '/Admin/EmployeeDetail/EquipmentActivityFormList',
              caseInsensitiveMatch: true,
              controller: 'EquipmentActivityListCtrl'
          })


          //SalesQuotationRegistry
          .when('/SalesQuotationRegistry', {
              title: 'Admin.Breadcrumb.SalesQuotationRegistry',
              templateUrl: '/Admin/Bill/SalesQuotationRegistry',
              caseInsensitiveMatch: true,
              permission: ["ManageSalesQuotationRegistry"],
              controller: 'SalesInvoiceRegistryCtrl'
          })


          //DeliveryNoteRegistry
          .when('/DeliveryNoteRegistry', {
              title: 'Admin.Breadcrumb.DeliveryNoteRegistry',
              templateUrl: '/Admin/Bill/DeliveryNoteRegistry',
              caseInsensitiveMatch: true,
              permission: ["ManageDeliveryNoteRegistry"],
              controller: 'SalesInvoiceRegistryCtrl'
          })

          //RequestFormRegistry
          .when('/RequestFormRegistry', {
              title: 'Admin.Breadcrumb.RequestFormRegistry',
              templateUrl: '/Admin/Bill/RequestFormRegistry',
              caseInsensitiveMatch: true,
              permission: ["ManageRequestFormRegistry"],
              controller: 'SalesInvoiceRegistryCtrl'
          })


          //DeliveryNoteRegistry
          .when('/RFQRegistry', {
              title: 'Admin.Breadcrumb.RFQRegistry',
              templateUrl: '/Admin/Bill/RFQRegistry',
              caseInsensitiveMatch: true,
              permission: ["ManageRFQRegistry"],
              controller: 'SalesInvoiceRegistryCtrl'
          })

          //PurchaseOrderRegistry
          .when('/PurchaseOrderRegistry', {
              title: 'Admin.Breadcrumb.PurchaseOrderRegistry',
              templateUrl: '/Admin/Bill/PurchaseOrderRegistry',
              caseInsensitiveMatch: true,
              /*permission: ["ManagePurchaseOrderRegistry"],*/
              controller: 'SalesInvoiceRegistryCtrl'
          })

          //StockRegistry
          .when('/OpeningStockRegistry', {
              title: 'Admin.Breadcrumb.OpeningStockRegistry',
              templateUrl: '/Admin/Bill/OpeningStockRegistry',
              caseInsensitiveMatch: true,
              //permission: ["ManageOpeningStockRegistry"],
              controller: 'StockRegistryCtrl'
          })


          //StockEntryReceiptRegistry
          .when('/StockEntryRegistry', {
              title: 'Admin.Breadcrumb.StockEntrykRegistry',
              templateUrl: '/Admin/Bill/StockEntryRegistry',
              caseInsensitiveMatch: true,
              //permission: ["ManageStockEntryRegistry"],
              controller: 'StockRegistryCtrl'
          })

          //StockEntryReceiptRegistry
          .when('/StockTransferRegistry', {
              title: 'Admin.Breadcrumb.StockTransferkRegistry',
              templateUrl: '/Admin/Bill/StockTransferRegistry',
              caseInsensitiveMatch: true,
              //permission: ["ManageStockTransferRegistry"],
              controller: 'StockRegistryCtrl'
          })


          //StockEntryReceiptRegistry
          .when('/WastageManagementRegistry', {
              title: 'Admin.Breadcrumb.WastageManagementkRegistry',
              templateUrl: '/Admin/Bill/WastageManagementRegistry',
              caseInsensitiveMatch: true,
             // permission: ["ManageWastageManagementRegistry"],
              controller: 'StockRegistryCtrl'
          })



          //JobCard
          .when('/ManpowerSalary', {
              title: 'Admin.Breadcrumb.ManpowerSalary',
              templateUrl: '/Admin/Manpower/ManpowerSalaryList',
              caseInsensitiveMatch: true,
              controller: 'ManpowerSalaryListCtrl'
          })


          //AllEmployeeList

          .when('/AllEmployeeList', {
              setTitle: 'Employee',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/AllEmployeeList',
              caseInsensitiveMatch: true,
              controller: 'AllEmployeeListCtrl'
          })
          
          .when('/AllEmployeePayHeadList', {
              setTitle: 'Employee',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/AllEmployeePayHeadList',
              caseInsensitiveMatch: true,
              controller: 'AllEmployeePayHeadListCtrl'
          })

          .when('/AllEmployeePayHeadListNew', {
              setTitle: 'Employee',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/AllEmployeePayHeadListNew',
              caseInsensitiveMatch: true,
              controller: 'AllEmployeePayHeadListNewCtrl1'
          })


          //DynamicDocumentType
          .when('/DynamicDocumentType/:Type', {
              title: 'Admin.Breadcrumb.DynamicDocumentType',
              templateUrl: '/Admin/EmployeeDetail/DynamicDocumentTypeList',
              caseInsensitiveMatch: true,
              controller: 'DynamicDocumentTypeCtrl'
          })


          //DynamicDocumentType
          .when('/DynamicDocumentType/Create/:Type', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.DynamicDocumentType',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateDynamicDocumentType',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDynamicDocumentTypeCtrl'
          })

          //EditJobCard
          .when('/DynamicDocumentType/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.DynamicDocumentType',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateDynamicDocumentType',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDynamicDocumentTypeCtrl'
          })


          //DynamicDocument
          .when('/DynamicDocument/:Type', {
              title: 'Admin.Breadcrumb.DynamicDocument',
              templateUrl: '/Admin/EmployeeDetail/DynamicDocumentList',
              caseInsensitiveMatch: true,
              controller: 'DynamicDocumentCtrl'
          })


          //DynamicDocument
          .when('/DynamicDocument/Create/:Type', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.DynamicDocument',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateDynamicDocument',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDynamicDocumentCtrl'
          })

          //EditJobCard
          .when('/DynamicDocument/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.DynamicDocument',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateDynamicDocument',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDynamicDocumentCtrl'
          })
          //equipmentForm
          .when('/GenerateDepreciationLedger', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.DepreciationLedger',
              templateUrl: '/Admin/EmployeeDetail/DepreciationLedgerGen',
              caseInsensitiveMatch: true,
              permission: ["CreateProject"],
              controller: 'GenerateDepreciationLedgerCtrl'
          })

          .when('/DepreciationLedgerReport', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.DepreciationLedger',
              templateUrl: '/Admin/EmployeeDetail/DepreciationLedgerReport',
              caseInsensitiveMatch: true,
              permission: ["CreateProject"],
              controller: 'DepreciationLedgerReportCtrl'
          })



          //ProjectList
          .when('/AllMobilizationDetailList', {
              title: 'AllMobilizationDetailList',
              templateUrl: '/Admin/ManPower/AllMobilizationDetailList',
              caseInsensitiveMatch: true,

              controller: 'AllMobilizationDetailListCtrl'
          })

          //DynamicDocument
          .when('/GlobalBalanceAdjust', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.GlobalBalanceAdjust',
              templateUrl: '/Admin/Voucher/GlobalBalanceAdjust',
              caseInsensitiveMatch: true,
              controller: 'GlobalBalanceAdjustCtrl'
          })
          .when('/AccessDenied', {
              title: 'AccessDenied',
              setTitle: 'AccessDenied',
              templateUrl: '/Admin/Security/AccessDenied',
              caseInsensitiveMatch: true
          })

          //Resource
          .when('/Permission', {
              title: 'Permission',
              setTitle: 'Admin.Breadcrumb.Permission',
              templateUrl: '/Admin/Security/PermissionList',
              caseInsensitiveMatch: true,
              controller: 'PermissionListCtrl'

          })

          //DTCategory
          .when('/ApprovalForm/:Type', {
              title: 'Admin.Breadcrumb.Category',
              templateUrl: '/Admin/Bill/ApprovalFormList',
              caseInsensitiveMatch: true,
              //permission: ["ReadApprovalForm"],
              controller: 'ApprovalFormCtrl'

          })

          //ProjectList
          .when('/MobilizationDetailList', {
              title: 'ProjectDetailList',
              templateUrl: '/Admin/ManPower/MobilizationDetailsListView',
              caseInsensitiveMatch: true,
              permission: ["ReadProjectDetailList"],
              controller: 'MobilizationsCtrl'
          })

        
          //ClientBalance
          .when('/ClientBalance', {
              title: 'Admin.Breadcrumb.ClientBalance',
              templateUrl: '/Admin/Party/ClientBalanceView',
              caseInsensitiveMatch: true,
              controller: 'ClientBalanceCtrl'
          })


          //ClientBalance
          
              .when('/ClientSupplierBalanceNew', {
              title: 'Admin.Breadcrumb.ClientBalance',
              templateUrl: '/Admin/Party/ClientBalanceNewView',
              caseInsensitiveMatch: true,
              controller: 'ClientBalanceNewCtrl'
          })

          .when('/SupplierBalance', {
              title: 'Admin.Breadcrumb.SupplierBalance',
              templateUrl: '/Admin/Party/SupplierBalanceView',
              caseInsensitiveMatch: true,
              controller: 'SupplierBalanceCtrl'
          })
          //.when('/SupplierBalanceNew', {
          //    title: 'Admin.Breadcrumb.SupplierBalance',
          //    templateUrl: '/Admin/Party/SupplierBalanceNewView',
          //    caseInsensitiveMatch: true,
          //    controller: 'SupplierBalanceNewCtrl'
          //})

          .when('/WarrantyProductDetails', {
              title: 'Admin.Breadcrumb.WarrantyProduct',
              templateUrl: '/Admin/DTProduct/WarrantyProductList',
              caseInsensitiveMatch: true,
              controller: 'WarrantyProductCtrl'

          })


               
          //CreateTimeSheet
          .when('/CreateInvoiceReportFromTimeSheet', {
              title: 'Create',
              setTitle: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/CreateInvoiceReportFromTimeSheetNew',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateInvoiceSummaryFromTimeSheetCtrl'
          })

          //CreateTimeSheetNew
          .when('/CreateInvoiceReportFromTimeSheetNew', {
              title: 'Create',
              setTitle: 'TimeSheetList',
              templateUrl: '/Admin/ManPower/CreateInvoiceReportFromTimeSheetNew',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateInvoiceSummaryFromTimeSheetNewCtrl'
          })
          //BalanceSheet
          .when('/BalanceSheetParent', {
              title: 'Admin.Breadcrumb.BalanceSheetParent',
              templateUrl: '/Admin/Voucher/BalanceSheetParent',
              caseInsensitiveMatch: true,
              controller: 'BalanceSheetParentCtrl'

          })






          //CostingTemplate
          .when('/CostingTemplateList/:Type', {
              title: 'Admin.Breadcrumb.CostingTemplate',
              templateUrl: '/Admin/Manpower/CostingTemplate',
              caseInsensitiveMatch: true,
              controller: 'CostingTemplateCtrl'

          })

             //CreateCostingTemplate
          .when('/CostingTemplate/Create', {
              title: 'Admin.Breadcrumb.CreateCostingTemplate',
              templateUrl: '/Admin/Manpower/CreateCostingTemplate',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCostingTemplateCtrl'

          })

          //EditCostingTemplate
          .when('/CostingTemplate/Edit/:Id', {
              title: 'Admin.Breadcrumb.CreateCostingTemplate',
              templateUrl: '/Admin/Manpower/CreateCostingTemplate',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCostingTemplateCtrl'
          })
     
          //CreateProjectTemplate
          .when('/CreateProjectTemplate/:Type', {
              title: 'Create',
              setTitle: 'ProjectList',
              templateUrl: '/Admin/ManPower/CreateProjectTemplate',
              caseInsensitiveMatch: true,
              permission: ["CreateProject"],
              controller: 'CreateOrUpdateProjectTemplateCtrl'
          })


          //EditProject
          .when('/ProjectTemplate/Edit/:Id', {
              title: 'Edit',
              setTitle: 'ProjectList',
              templateUrl: '/Admin/ManPower/CreateProjectTemplate',
              caseInsensitiveMatch: true,
              permission: ["CreateProject"],
              controller: 'CreateOrUpdateProjectTemplateCtrl'
          })     

          //CreateDPR
          .when('/DPR/Create', {
              title: 'Admin.Breadcrumb.CreateDPR',
              templateUrl: '/Admin/Manpower/CreateDPR',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDPRCtrl'

          })
           //CreateDPR
          .when('/DPRReport/Create', {
              title: 'Admin.Breadcrumb.CreateDPRReport',
              templateUrl: '/Admin/Manpower/CreateDPRReport',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDPRReportCtrl'

          })

          .when('/AllManPowerForm', {
              title: 'ManPower',
              templateUrl: '/Admin/ManPower/OwnManPowerList',
              caseInsensitiveMatch: true,
             
              controller: 'EmployeeOwnManPowerCtrl'
          })
          //MonthlyAttendanceDPR//
          .when('/MonthlyAttendanceDPR', {
              title: 'Admin.List',
              setTitle: 'Admin.Breadcrumb.MonthlyAttendanceDPR',
              templateUrl: '/Admin/AttendanceDetail/MonthlyAttendanceDPRList',
              caseInsensitiveMatch: true,
              controller: 'MonthlyAttendanceDPRCtrl'
          })

          //FinancialStatement
          //NewBalanceSheet
          .when('/FinancialStatement/BalanceSheet', {
              title: 'Admin.Breadcrumb.BalanceSheet',
              templateUrl: '/Admin/Voucher/NewBalanceSheetView',
              caseInsensitiveMatch: true,
              controller: 'NewBalanceSheetCtrl'

          })

        

          //ProfitAndLoss
          .when('/FinancialStatement/ProfitAndLoss', {
              title: 'Admin.Breadcrumb.ProfitAndLoss',
              templateUrl: '/Admin/Voucher/NewProfitAndLossView',
              caseInsensitiveMatch: true,
              permission: ["ManageProfitAndLoss"],
              controller: 'NewProfitAndLossCtrl'

          })

          //TrialBalance
          .when('/FinancialStatement/TrialBalance', {
              title: 'Admin.Breadcrumb.TrialBalance',
              templateUrl: '/Admin/Voucher/NewTrialBalanceView',
              caseInsensitiveMatch: true,
              permission: ["ManageTrialBalance"],
              controller: 'NewTrialBalanceCtrl'

          })
          

          .when('/FinancialStatement/TrialBalanceSecondFormat', {
              title: 'Admin.Breadcrumb.TrialBalance',
              templateUrl: '/Admin/Voucher/NewTrialBalanceSecondFormatView',
              caseInsensitiveMatch: true,
              permission: ["ManageTrialBalance"],
              controller: 'NewTrialBalanceSecondFormatCtrl'

          })

          .when('/Depreciation', {
              title: 'Admin.Breadcrumb.TrialBalance',
              templateUrl: '/Admin/Voucher/Depreciation',
              caseInsensitiveMatch: true,
              permission: ["ManageTrialBalance"],
              controller: 'DepreciationFormatCtrl'

          })

          //GlobalReport FinancialStatement
          //NewBalanceSheet
          .when('/GlobalReport/BalanceSheet', {
              title: 'Admin.Breadcrumb.BalanceSheet',
              templateUrl: '/Admin/Voucher/GlobalBalanceSheetView',
              caseInsensitiveMatch: true,
              controller: 'NewBalanceSheetCtrl'

          })



          //ProfitAndLoss
          .when('/GlobalReport/ProfitAndLoss', {
              title: 'Admin.Breadcrumb.ProfitAndLoss',
              templateUrl: '/Admin/Voucher/GlobalProfitAndLossView',
              caseInsensitiveMatch: true,
              permission: ["ManageProfitAndLoss"],
              controller: 'NewProfitAndLossCtrl'

          })

          //TrialBalance
          .when('/GlobalReport/TrialBalance', {
              title: 'Admin.Breadcrumb.TrialBalance',
              templateUrl: '/Admin/Voucher/GlobalTrialBalanceView',
              caseInsensitiveMatch: true,
              permission: ["ManageTrialBalance"],
              controller: 'NewTrialBalanceCtrl'

          })




          //SalesGlobalReport
          .when('/SalesGlobalReport', {
              title: 'Admin.Breadcrumb.TrialBalance',
              templateUrl: '/Admin/Bill/SalesGlobalReport',
              caseInsensitiveMatch: true,
              permission: ["ManageTrialBalance"],
              controller: 'SalesListCtrl'

          })

          //PurchaseGlobalReport
          .when('/PurchaseGlobalReport', {
              title: 'Admin.Breadcrumb.TrialBalance',
              templateUrl: '/Admin/Bill/PurchaseGlobalReport',
              caseInsensitiveMatch: true,
              permission: ["ManageTrialBalance"],
              controller: 'PurchaseListCtrl'

          })

          //Balance Adjustment
          .when('/PendingBalanceList', {
              title: 'Admin.Breadcrumb.PendingBalanceList',
              templateUrl: '/Admin/Party/PendingBalanceList',
              caseInsensitiveMatch: true,
              controller: 'PendingBalanceAdjustmentCtrl'
          })

          //CreateDPR
          .when('/DPRSummary/Create', {
              title: 'Admin.Breadcrumb.CreateDPRSummary',
              templateUrl: '/Admin/Manpower/CreateDPRSummary',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDPRSummaryReportCtrl'

          })



          //LeaveType
          .when('/LeaveType', {
              title: 'Admin.Breadcrumb.LeaveType',
              templateUrl: '/Admin/EmployeeDetail/LeaveTypeList',
              caseInsensitiveMatch: true,
              controller: 'LeaveTypeCtrl'
          })


          //AllEmployeeList

          .when('/LeaveDetails', {
              setTitle: 'LeaveDetails',
              title: 'Admin.List',
              templateUrl: '/Admin/EmployeeDetail/LeaveDetails',
              caseInsensitiveMatch: true,
              controller: 'AllLeaveDetailsCtrl'
          })


          //LeaveReport
          .when('/LeaveReport', {
              title: 'Admin.Breadcrumb.LeaveReport',
              setTitle: 'Admin.Breadcrumb.LeaveReport',
              templateUrl: '/Admin/EmployeeDetail/LeaveReport',
              caseInsensitiveMatch: true,
              permission: ["ReadAttendanceReport"],
              controller: 'LeaveReportCtrl'
          })

          //FinancialYearBalance
          .when('/FinancialYearBalanceAdjust', {
              title: 'Admin.Breadcrumb.FinancialYearBalanceAdjust',
              templateUrl: '/Admin/Account/FinancialYearBalanceAdjustList',
              caseInsensitiveMatch: true,
              controller: 'FinancialYearBalanceAdjustCtrl'

          })

          //ExpiringDocument
          .when('/ExpiringDocument', {
              title: 'Admin.Breadcrumb.ExpiringDocument',
              templateUrl: '/Admin/Account/ExpiringDocumentList',
              caseInsensitiveMatch: true,
              controller: 'ExpiringDocumentCtrl'

          })


          //ExpiringDocument

          //JobCard
          .when('/JobCardService', {
              title: 'Admin.Breadcrumb.JobCardService',
              templateUrl: '/Admin/Manpower/JobCardServiceList',
              caseInsensitiveMatch: true,
              controller: 'JobCardServiceCtrl'
          })


          //CreateJobCard
          .when('/JobCardService/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.JobCardService',
              templateUrl: '/Admin/Manpower/CreateOrUpdateJobCardService',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateJobCardServiceCtrl'
          })

          //EditJobCard
          .when('/JobCardService/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.JobCardService',
              templateUrl: '/Admin/Manpower/CreateOrUpdateJobCardService',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateJobCardServiceCtrl'
          })
          //Payment
          .when('/ClientRecieptCommissionReport', {
              title: 'Admin.Breadcrumb.Payment',
              templateUrl: '/Admin/Voucher/ClientRecieptCommissionReport',
              caseInsensitiveMatch: true,
              permission: ["ReadPayment"],
              controller: 'ClientRecieptVoucherCommissionReportCtrl'

          })

          .when('/VatReportOld', {
              title: 'Admin.Breadcrumb.VatReport',
              templateUrl: '/Admin/Account/VatReportOld',
              caseInsensitiveMatch: true,
              controller: 'VatReportOldCtrl'

          })

          //EditSalesInvoice
          .when('/SalesInvoiceOld/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditSalesInvoice',
              setTitle: 'Admin.Breadcrumb.SalesList',
              templateUrl: '/Admin/Bill/CreateOrUpdateSalesBillOld',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'CreateOrUpdateSalesOldCtrl'
          })


          //EditPurchaseInvoice
          .when('/PurchaseInvoiceOld/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditPurchaseInvoice',
              setTitle: 'Admin.Breadcrumb.PurchaseList',
              templateUrl: '/Admin/Bill/CreateOrUpdatePurchaseBillOld',
              caseInsensitiveMatch: true,
              permission: ["CreatePurchaseInvoice"],
              controller: 'CreateOrUpdatePurchaseInvoiceOldCtrl'
          })


          //CreateDPR
          .when('/DPRActivity/Create', {
              title: 'Admin.Breadcrumb.CreateDPR',
              templateUrl: '/Admin/Manpower/CreateDPRActivity',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDPRActivityCtrl'

          })
          //CreateDPR
          .when('/DPRActivityReport/Create', {
              title: 'Admin.Breadcrumb.CreateDPRReport',
              templateUrl: '/Admin/Manpower/CreateDPRActivityReport',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateDPRActivityReportCtrl'

          })

          //CreateDPR
          .when('/Production/Create', {
              title: 'Admin.Breadcrumb.CreateProduction',
              templateUrl: '/Admin/Manpower/CreateProduction',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateProductionCtrl'

          })

          .when('/Production/Edit/:Id', {
              title: 'Admin.Breadcrumb.Production',
              setTitle: 'Admin.Breadcrumb.Production',
              templateUrl: '/Admin/Manpower/CreateProduction',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateProductionCtrl'
          })

          //Production
          .when('/ProductionView', {
              title: 'Admin.Breadcrumb.ProductionView',
              templateUrl: '/Admin/Manpower/ProductionViewList',
              caseInsensitiveMatch: true,
              controller: 'ProductionViewCtrl'
          })
          //Production
          .when('/Production', {
              title: 'Admin.Breadcrumb.Production',
              templateUrl: '/Admin/Manpower/ProductionList',
              caseInsensitiveMatch: true,
              controller: 'ProductionCtrl'
          })



          //MaterialEntry
          .when('/MaterialEntry', {
              title: 'Admin.Breadcrumb.MaterialEntry',
              templateUrl: '/Admin/Bill/MaterialEntry',
              caseInsensitiveMatch: true,
              controller: 'MaterialEntryCtrl'
          })

          //CreateMaterialEntry
          .when('/MaterialEntry/Create', {
              title: 'Admin.Breadcrumb.CreateMaterialEntry',
              setTitle: 'Admin.Breadcrumb.MaterialEntry',
              templateUrl: '/Admin/Bill/CreateOrUpdateMaterialEntry',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateMaterialEntryCtrl'
          })

          //EditMaterialEntry
          .when('/MaterialEntry/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditMaterialEntry',
              setTitle: 'Admin.Breadcrumb.MaterialEntry',
              templateUrl: '/Admin/Bill/CreateOrUpdateMaterialEntry',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateMaterialEntryCtrl'
          })

          //StockEntryReceiptRegistry
          .when('/MaterialEntryRegistry', {
              title: 'Admin.Breadcrumb.MaterialEntryRegistry',
              templateUrl: '/Admin/Bill/MaterialEntryRegistry',
              caseInsensitiveMatch: true,
              controller: 'MaterialEntryRegistryCtrl'
          })


          //InspectionOrTraining
          .when('/InspectionOrTraining/:Type', {
              title: 'Admin.Breadcrumb.InspectionOrTraining',
              templateUrl: '/Admin/Manpower/InspectionOrTrainingList',
              caseInsensitiveMatch: true,
              controller: 'InspectionOrTrainingCtrl'
          })


          //InspectionOrTraining
          .when('/InspectionOrTraining/Create/:Type', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.InspectionOrTraining',
              templateUrl: '/Admin/Manpower/CreateOrUpdateInspectionOrTraining',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateInspectionOrTrainingCtrl'
          })

          //EditJobCard
          .when('/InspectionOrTraining/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.InspectionOrTraining',
              templateUrl: '/Admin/Manpower/CreateOrUpdateInspectionOrTraining',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateInspectionOrTrainingCtrl'
          })

          //SalesOrderRegistry
          .when('/ProductionRegistry', {
              title: 'Admin.Breadcrumb.ProductionRegistry',
              templateUrl: '/Admin/Bill/ProductionRegistry',
              caseInsensitiveMatch: true,
              controller: 'ProductionRegistryCtrl'

          })




          //IncidentInvestigation
          .when('/IncidentInvestigation', {
              title: 'Admin.Breadcrumb.IncidentInvestigation',
              templateUrl: '/Admin/Manpower/IncidentInvestigation',
              caseInsensitiveMatch: true,
              controller: 'IncidentInvestigationCtrl'
          })

          //CreateIncidentInvestigation
          .when('/IncidentInvestigation/Create', {
              title: 'Admin.Breadcrumb.CreateIncidentInvestigation',
              setTitle: 'Admin.Breadcrumb.IncidentInvestigation',
              templateUrl: '/Admin/Manpower/CreateOrUpdateIncidentInvestigation',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateIncidentInvestigationCtrl'
          })

          //EditIncidentInvestigation
          .when('/IncidentInvestigation/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditIncidentInvestigation',
              setTitle: 'Admin.Breadcrumb.IncidentInvestigation',
              templateUrl: '/Admin/Manpower/CreateOrUpdateIncidentInvestigation',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateIncidentInvestigationCtrl'
          })

          //DTCategory
          .when('/InspectionOrTrainingType/:Type', {
              title: 'Admin.Breadcrumb.Category',
              templateUrl: '/Admin/Manpower/InspectionOrTrainingTypeList',
              caseInsensitiveMatch: true,
              controller: 'InspectionOrTrainingTypeCtrl'

          })

          .when('/AllEmployeeTrainingReport', {
              setTitle: 'Employee',
              title: 'Admin.List',
              templateUrl: '/Admin/Manpower/AllEmployeeTrainingReport',
              caseInsensitiveMatch: true,
              controller: 'AllEmployeeTrainingReportCtrl'
          })
          
          //request
      .when('/RequestDocumentType', {
          title: 'Admin.Breadcrumb.RequestDocumentType',
          templateUrl: '/Admin/EmployeeDetail/RequestDocumentTypeList',
          caseInsensitiveMatch: true,
          controller: 'RequestDocumentTypeCtrl'
      })
          //DynamicDocumentType
          .when('/RequestDocumentType/Create/:Type', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.RequestDocumentType',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateRequestDocumentType',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateRequestDocumentTypeCtrl'
          })

          //EditJobCard
          .when('/RequestDocumentType/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.RequestDocumentType',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateRequestDocumentType',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateRequestDocumentTypeCtrl'
          })


          //RequestDocument
          .when('/RequestDocument/:Type', {
              title: 'Admin.Breadcrumb.RequestDocument',
              templateUrl: '/Admin/EmployeeDetail/RequestDocumentList',
              caseInsensitiveMatch: true,
              controller: 'RequestDocumentCtrl'
          })


          //RequestDocument
          .when('/RequestDocument/Create/:Type', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.RequestDocument',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateRequestDocument',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateRequestDocumentCtrl'
          })

          //EditJobCard
          .when('/RequestDocument/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.RequestDocument',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateRequestDocument',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateRequestDocumentCtrl'
          })
          .when('/AllEquipmentInspectionReport', {
              setTitle: 'Employee',
              title: 'Admin.List',
              templateUrl: '/Admin/Manpower/AllEquipmentInspectionReport',
              caseInsensitiveMatch: true,
              controller: 'AllEquipmentInspectionReportCtrl'
          })

          .when('/AllGatePassInspectionReport', {
              setTitle: 'Employee',
              title: 'Admin.List',
              templateUrl: '/Admin/Manpower/AllGatePasstInspectionReport',
              caseInsensitiveMatch: true,
              controller: 'AllGatePassInspectionReportCtrl'
          })

          //FuelLog
          .when('/FuelLog', {
              title: 'Admin.Breadcrumb.FuelLog',
              templateUrl: '/Admin/Manpower/FuelLog',
              caseInsensitiveMatch: true,
              controller: 'FuelLogCtrl'
          })


          //CreateFuelLog
          .when('/FuelLog/Create', {
              title: 'Admin.Create',
              setTitle: 'Admin.Breadcrumb.FuelLog',
              templateUrl: '/Admin/Manpower/CreateOrUpdateFuelLog',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateFuelLogCtrl'
          })

          //EditFuelLog
          .when('/FuelLog/Edit/:Id', {
              title: 'Admin.Edit',
              setTitle: 'Admin.Breadcrumb.FuelLog',
              templateUrl: '/Admin/Manpower/CreateOrUpdateFuelLog',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateFuelLogCtrl'
          })

          //NewDPRActivity
          .when('/NewDPRActivity/Create', {
              title: 'Admin.Breadcrumb.CreateDPR',
              templateUrl: '/Admin/Manpower/CreateNewDPRActivity',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateNewDPRActivityCtrl'

          })

          //GatePassist
          .when('/GatePass', {
              title: 'Admin.Breadcrumb.GatePass',
              templateUrl: '/Admin/Manpower/InspectionOrTrainingList',
              caseInsensitiveMatch: true,
              //permission: ["ReadSalesQuotation"],
              controller: 'GatePassCtrl'
          })

          //CreateGatePass
          .when('/GatePass/Create', {
              title: 'Admin.Breadcrumb.GatePass',
              setTitle: 'Admin.Breadcrumb.GatePass',
              templateUrl: '/Admin/Manpower/CreateOrUpdateGatePass',
              caseInsensitiveMatch: true,
              //permission: ["CreateSalesQuotation"],
              controller: 'CreateOrUpdateGatePassCtrl'
          })

          //EditGatePass
          .when('/GatePass/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditSalesQuotation',
              setTitle: 'Admin.Breadcrumb.SalesQuotation',
              templateUrl: '/Admin/Manpower/CreateOrUpdateGatePass',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesQuotation"],
              controller: 'CreateOrUpdateGatePassCtrl'
          })

          //Payment Request
          .when('/PaymentRequestApprovalForm', {
              title: 'Admin.Breadcrumb.Category',
              templateUrl: '/Admin/Reports/AppprovedPaymentRequestList',
              caseInsensitiveMatch: true,
              //permission: ["ReadApprovalForm"],
              controller: 'AppprovedPaymentRequestFormCtrl'

          })




          .when('/CreateOrUpdateEmployeeMobilization', {
              title: 'Admin.Breadcrumb.CreateEmployeeMobilization',
              setTitle: 'Admin.Breadcrumb.EmployeeMobilization',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateEmployeeMobilization',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateEmployeeMobilizationCtrl'
          })


          .when('/EmployeeMobilization/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditEmployeeMobilization',
              setTitle: 'Admin.Breadcrumb.EmployeeMobilization',
              templateUrl: '/Admin/EmployeeDetail/CreateOrUpdateEmployeeMobilization',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateEmployeeMobilizationCtrl'
          })

          //Costing Template
          .when('/CostingTemplate', {
              title: 'Admin.Breadcrumb.CostingTemplate',
              templateUrl: '/Admin/ManPower/CostingTemplateList',
              caseInsensitiveMatch: true,
              //permission: ["ReadCostingTemplate"],
              controller: 'CostingCtrl'

          })
          .when('/CostingTemplate/Create', {
              title: 'Admin.Breadcrumb.CreateCostingTemplate',
              setTitle: 'Admin.Breadcrumb.EmployeeMobilization',
              templateUrl: '/Admin/ManPower/CreateOrUpdateCostingTemplateList',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCostingCtrl'
          })


          .when('/CostingTemplate/Edit/:Id', {
              title: 'Admin.Breadcrumb.EditCostingTemplate',
              setTitle: 'Admin.Breadcrumb.CostingTemplate',
              templateUrl: '/Admin/ManPower/CreateOrUpdateCostingTemplateList',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateCostingCtrl'
          })




          //DTCategory
          .when('/DTCategory/:Type', {
              title: 'Admin.Breadcrumb.DTCategory',
              templateUrl: '/Admin/DTCategory/DTCategoryList',
              caseInsensitiveMatch: true,
              permission: ["ReadCategory"],
              controller: 'DTCategoryCtrl'

          })


          .when('/Draft/:DraftType', {
              title: 'Admin.Breadcrumb.Draft',
              templateUrl: '/Admin/Bill/DraftList',
              caseInsensitiveMatch: true,
              controller: 'DraftCtrl'

          })

          .when('/Approval/:DraftType', {
              title: 'Admin.Breadcrumb.Draft',
              templateUrl: '/Admin/Bill/DraftList',
              caseInsensitiveMatch: true,
              controller: 'ApprovalCtrl'

          })




          //CostingTemplate
          .when('/PriceList/:Type', {
              title: 'Admin.Breadcrumb.PriceList',
              templateUrl: '/Admin/Manpower/PriceList',
              caseInsensitiveMatch: true,
              controller: 'PriceListCtrl'

          })

          //CreateCostingTemplate
          .when('/Price/Create', {
              title: 'Admin.Breadcrumb.CreatePriceList',
              templateUrl: '/Admin/Manpower/CreatePriceList',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdatePriceListCtrl'

          })

          //EditCostingTemplate
          .when('/Price/Edit/:Id', {
              title: 'Admin.Breadcrumb.CreatePriceList',
              templateUrl: '/Admin/Manpower/CreatePriceList',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdatePriceListCtrl'
          })



          //SalesList
          .when('/SalesReportList', {
              title: 'Admin.Breadcrumb.Sales',
              templateUrl: '/Admin/Bill/SalesReportList',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'SalesReportListCtrl'

          })
          //SalesList
          .when('/SalesCommisionReportList', {
              title: 'Admin.Breadcrumb.Sales',
              templateUrl: '/Admin/Bill/SalesCommisionReportList',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'SalesCommisionReportListCtrl'

          })

          //SalesComisionReportNew

          .when('/SalesCommisionReportListNew', {
              title: 'Admin.Breadcrumb.Sales',
              templateUrl: '/Admin/Bill/SalesCommisionReportListNew',
              caseInsensitiveMatch: true,
              permission: ["ReadSalesInvoice"],
              controller: 'SalesCommisionReportListNewCtrl'

          })


          //StockEntry
          .when('/ClosingStock', {
              title: 'Admin.Breadcrumb.ClosingStock',
              templateUrl: '/Admin/Bill/ClosingStock',
              caseInsensitiveMatch: true,
              controller: 'ClosingStockCtrl'
          })

          //CreateStockEntry
          .when('/ClosingStock/Create', {
              title: 'Admin.Breadcrumb.ClosingStock',
              setTitle: 'Admin.Breadcrumb.ClosingStock',
              templateUrl: '/Admin/Bill/CreateOrUpdateClosingStock',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateClosingStockCtrl'
          })

          //EditStockEntry
          .when('/ClosingStock/Edit/:Id', {
              title: 'Admin.Breadcrumb.SalesGroup',
              setTitle: 'Admin.Breadcrumb.ClosingStock',
              templateUrl: '/Admin/Bill/CreateOrUpdateClosingStock',
              caseInsensitiveMatch: true,
              controller: 'CreateOrUpdateClosingStockCtrl'
          })

      .otherwise({
          redirectTo: '/'
      });

     // $locationProvider.html5Mode(true);
  }]);
app.config(['$httpProvider', function ($httpProvider) {
    $httpProvider.defaults.headers.common["X-Requested-With"] = 'XMLHttpRequest';
    //ajax.setRequestHeaders('accept-encoding', 'gzip');
    //ajax.setRequestHeaders('content-encoding', 'gzip')

}]);

//app.config(['$tooltipProvider', function($tooltipProvider) {
//  $tooltipProvider.options({animation: true});
//}]);


var httpInterceptor = function ($provide, $httpProvider) {
    $provide.factory('httpInterceptor', function ($q) {
      return {
        response: function (response) {
          return response || $q.when(response);
        },
        responseError: function (rejection) {
            if (rejection.status === 401) {
                window.location.href = "/logout";
            // you are not autorized
          }
          return $q.reject(rejection);
        }
      };
    });
    $httpProvider.interceptors.push('httpInterceptor');
  };
angular.module("RifApp").config(httpInterceptor);
















app.controller('customersCrtl', function ($scope, $http, $timeout) {
    $http.get('getCustomers.php').success(function (data) {
        $scope.list = data;
        $scope.currentPage = 1; //current page
        $scope.entryLimit = 5; //max no of items to display in a page
        $scope.filteredItems = $scope.list.length; //Initially for no filter  
        $scope.totalItems = $scope.list.length;
    });

});

app.factory('myService', function ($rootScope, $filter, $http, $timeout) {
    return {
        GetResource: function (resourceName) {

            if ($rootScope.LanguageResources.length <= 0) {
                // if (!$rootScope.ResourceCalled) {
                //$rootScope.ResourceCalled = true;
                //console.log("Undefined" + $rootScope.Count);
                //$http({
                //    method: "GET",
                //    url: "/Admin/Language/GetCurrentLanguageResources",
                //    cache: false,

                //})
                //.success(function (localResources) {
                //    $rootScope.LanguageResources = localResources;
                //    var resource = $filter('filter')($rootScope.LanguageResources, { Name: resourceName }, true);
                //    console.log("Undefined inner" + $rootScope.Count);
                //if (resource[0]) {
                //    console.log("Exists" + $rootScope.Count);
                //    return resource[0].Value;
                //}
                //else {
                //    console.log("Not Exists" + $rootScope.Count);
                //    return resourceName;
                //}
                // return "abb"
                // $rootScope.ResourceCalled = false;
                //});

                //} else {
                //    $timeout(function () {
                //        $rootScope.ResourceCalled = false;
                //        console.log("time Out function" + $rootScope.Count);

                //        var resource = $filter('filter')($rootScope.LanguageResources, { Name: resourceName }, true);
                //        if (resource[0]) {
                //            console.log("Exists else " + $rootScope.Count);
                //            return resource[0].Value;
                //        }
                //        else {
                //            console.log("Not Exists else" + $rootScope.Count);
                //            return resourceName;
                //        }
                //    }, 700);
                //}
            }
            else {
                // console.log("Else" + $rootScope.Count);
                //console.log($rootScope.Count);
                var resource = $filter('filter')($rootScope.LanguageResources, { Name: resourceName }, true);
                if (resource[0])
                    return resource[0].Value;
                else
                    return resourceName;
            }
        },
        GetAllResourceFromServer: function (resourceName) {
            console.log("Init Called");

   
            //    method: "POST",
            //    url: "/Admin/Language/GetCurrentLanguageResources",
            //    cache: false,

            //})
            //   .success(function (localResources) {
            //       $rootScope.LanguageResources = localResources;
            //   });
        }
    };
});

app.run(['$location', '$rootScope', function ($location, $rootScope) {
    $rootScope.$on('$routeChangeSuccess', function (event, current, previous) {       
        $rootScope.Title = current.$$route.title;
        $rootScope.SetTitle = current.$$route.setTitle;
        $rootScope.LinkTitle = current.$$route.setTitle ? current.$$route.setTitle.replace('Admin.Breadcrumb.', '') : '';
        //--before 
        //$rootScope.RequestedUrls = current.$$route.setTitle ? current.$$route.setTitle.replace(' ', '') : $location.path().replace('/', '');
        $rootScope.RequestedUrls = current.$$route.setTitle ? current.$$route.setTitle.replace('Admin.Breadcrumb.', '') : $location.path().replace('/', '');

    });
    $rootScope.$on('$routeChangeStart', function (scope, next, current) {
        var permission = next.$$route.permission;

        if (angular.isArray(permission)) {
          
            var isExist = false;
            for (var i = 0; (i <permission.length &&  !isExist); i++) {
                isExist = $rootScope.StandardPermissionProvider.includes(permission[i]);
            }

            if (!isExist) {
                $location.path('/AccessDenied');
            }
           
        }
        
    });
}]);


//app.controller('mainAppCtrl', function ($scope, $location, permissions) {
//    $scope.$on('$routeChangeStart', function (scope, next, current) {
//        var permission = next.$$route.permission;
//        if (_.isString(permission) && !permissions.hasPermission(permission)) {
//            $location.path('/unauthorized');
//        }
//    });
//});

//var notification = $("#notification").kendoNotification({
//    position: {
//        pinned: true,
//        top: 30,
//        right: 30
//    },
//    autoHideAfter: 0,
//    stacking: "down",
//    templates: [{
//        type: "info",
//        template: $("#emailTemplate").html()
//    }, {
//        type: "error",
//        template: $("#errorTemplate").html()
//    }, {
//        type: "upload-success",
//        template: $("#successTemplate").html()
//    }]

//}).data("kendoNotification");

//$("#showEmailNotification").click(function () {
//    notification.show({
//        title: "New E-mail",
//        message: "You have 1 new mail message!"
//    }, "info");
//});

//$("#showErrorNotification").click(function () {
//    notification.show({
//        title: "Wrong Password",
//        message: "Please enter your password again."
//    }, "error");
//});

//$("#showSuccessNotification").click(function () {
//    notification.show({
//        message: "Upload Successful"
//    }, "upload-success");
//});

//$("#hideAllNotifications").click(function () {
//    notification.hide();
//});

//$(document).one("kendo:pageUnload", function () { if (notification) { notification.hide(); } });

